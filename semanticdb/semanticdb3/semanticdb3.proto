syntax = "proto3";

package scala.meta.internal.semanticdb3;

enum Schema {
  LEGACY = 0;
  SEMANTICDB3 = 3;
}

message TextDocuments {
  repeated TextDocument documents = 1;
}

message TextDocument {
  reserved 4;
  Schema schema = 1;
  string uri = 2;
  string text = 3;
  Language language = 9;
  repeated SymbolInformation symbols = 5;
  repeated SymbolOccurrence occurrences = 6;
  repeated Diagnostic diagnostics = 7;
  repeated Synthetic synthetics = 8;
}

message Language {
  string name = 1;
}

message Range {
  int32 start_line = 1;
  int32 start_character = 2;
  int32 end_line = 3;
  int32 end_character = 4;
}

message Location {
  string uri = 1;
  Range range = 2;
}

message Type {
  enum Tag {
    // reserved 2, 3, 4, 5;
    UNKNOWN_TAG = 0;
    TYPE_REF = 1;
    SINGLETON_TYPE = 15;
    STRUCTURAL_TYPE = 6;
    ANNOTATED_TYPE = 7;
    EXISTENTIAL_TYPE = 8;
    UNIVERSAL_TYPE = 9;
    CLASS_INFO_TYPE = 10;
    METHOD_TYPE = 11;
    BY_NAME_TYPE = 12;
    REPEATED_TYPE = 13;
    TYPE_TYPE = 14;
  }
  reserved 3, 4, 5, 6;
  Tag tag = 1;
  TypeRef typeRef = 2;
  SingletonType singletonType = 16;
  StructuralType structuralType = 7;
  AnnotatedType annotatedType = 8;
  ExistentialType existentialType = 9;
  UniversalType universalType = 10;
  ClassInfoType classInfoType = 11;
  MethodType methodType = 12;
  ByNameType byNameType = 13;
  RepeatedType repeatedType = 14;
  TypeType typeType = 15;
}

message TypeRef {
  Type prefix = 1;
  string symbol = 2;
  repeated Type type_arguments = 3;
}

message SingletonType {
  enum Tag {
    UNKNOWN_TAG = 0;
    SYMBOL = 1;
    THIS = 2;
    SUPER = 3;
    UNIT = 4;
    BOOLEAN = 5;
    BYTE = 6;
    SHORT = 7;
    CHAR = 8;
    INT = 9;
    LONG = 10;
    FLOAT = 11;
    DOUBLE = 12;
    STRING = 13;
    NULL = 14;
  }
  Tag tag = 1;
  Type prefix = 2;
  string symbol = 3;
  int64 primitive = 4;
  string string = 5;
}

message StructuralType {
  repeated string type_parameters = 1;
  repeated Type parents = 2;
  repeated string declarations = 3;
}

message AnnotatedType {
  reserved 2;
  repeated Annotation annotations = 3;
  Type tpe = 1;
}

message ExistentialType {
  repeated string type_parameters = 2;
  Type tpe = 1;
}

message UniversalType {
  repeated string type_parameters = 1;
  Type tpe = 2;
}

message ClassInfoType {
  repeated string type_parameters = 1;
  repeated Type parents = 2;
  repeated string declarations = 3;
}

message MethodType {
  message ParameterList {
    repeated string symbols = 1;
  }
  repeated string type_parameters = 1;
  repeated ParameterList parameters = 2;
  Type return_type = 3;
}

message ByNameType {
  Type tpe = 1;
}

message RepeatedType {
  Type tpe = 1;
}

message TypeType {
  repeated string type_parameters = 1;
  Type lower_bound = 2;
  Type upper_bound = 3;
}

message SymbolInformation {
  enum Kind {
    UNKNOWN_KIND = 0;
    VAL = 1;
    VAR = 2;
    GETTER = 15;
    SETTER = 16;
    DEF = 3;
    PRIMARY_CONSTRUCTOR = 4;
    SECONDARY_CONSTRUCTOR = 5;
    MACRO = 6;
    TYPE = 7;
    PARAMETER = 8;
    TYPE_PARAMETER = 9;
    OBJECT = 10;
    PACKAGE = 11;
    PACKAGE_OBJECT = 12;
    CLASS = 13;
    TRAIT = 14;
  }
  enum Property {
    UNKNOWN_PROPERTY = 0;
    // reserved 0x1;
    // reserved 0x2;
    ABSTRACT = 0x4;
    FINAL = 0x8;
    SEALED = 0x10;
    IMPLICIT = 0x20;
    LAZY = 0x40;
    CASE = 0x80;
    COVARIANT = 0x100;
    CONTRAVARIANT = 0x200;
    // reserved 0x400;
    // reserved 0x800;
  }
  reserved 2, 6;
  string symbol = 1;
  Language language = 12;
  Kind kind = 3;
  int32 properties = 4;
  string name = 5;
  Location location = 10;
  TextDocument signature = 7;
  repeated string members = 8;
  repeated string overrides = 9;
  Type tpe = 11;
  repeated Annotation annotations = 13;
  Accessibility accessibility = 14;
}

message Annotation {
  Type tpe = 1;
}

message Accessibility {
  enum Tag {
    UNKNOWN_TAG = 0;
    PRIVATE = 1;
    PRIVATE_THIS = 2;
    PRIVATE_WITHIN = 3;
    PROTECTED = 4;
    PROTECTED_THIS = 5;
    PROTECTED_WITHIN = 6;
  }
  Tag tag = 1;
  string symbol = 2;
}

message SymbolOccurrence {
  enum Role {
    UNKNOWN_ROLE = 0;
    REFERENCE = 1;
    DEFINITION = 2;
  }
  Range range = 1;
  string symbol = 2;
  Role role = 3;
}

message Diagnostic {
  enum Severity {
    UNKNOWN_SEVERITY = 0;
    ERROR = 1;
    WARNING = 2;
    INFORMATION = 3;
    HINT = 4;
  }
  Range range = 1;
  Severity severity = 2;
  string message = 3;
}

message Synthetic {
  Range range = 1;
  TextDocument text = 2;
}
