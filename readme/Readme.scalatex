@import scala.meta.Readme._
@import Main._
@import scala.meta._

@sect("scala.meta", versionBadge)

  @p
    Scala.meta is a clean-room implementation of a metaprogramming toolkit for Scala,
    designed to be simple, robust and portable.
    We are striving for scala.meta to become a successor of scala.reflect,
    the current de facto standard in the Scala ecosystem.

  @p
    Scala.meta provides functionality that's unprecedented in the Scala ecosystem.
    Our killer feature is abstract syntax trees that capture the code exactly as it is written -
    with all the original formatting and attention to minor syntactic details.

  @p
    With scala.meta, we are building a community of next-generation tooling for Scala.
    @lnk("Codacy", "https://codacy.com/")'s Scala engine, @lnk("Scalafmt", "http://scalafmt.org")
    and @lnk("Scalafix", "https://github.com/scalacenter/scalafix")
    take advantage of our unique features and deliver user experiences
    that have been unreachable for the most of the traditional Scala tools.

  @sect{Features}
    @p
      @b
        High-fidelity parsing.
      Note how the abstract syntax trees in the printout below
      contain comprehensive information about formatting and comments.
      This is an exclusive feature of scala.meta.

    @meta
      "x + y /* adds x and y */".parse[Term]
      "List[ Int ]".parse[Type]

    @p
      @b
        Tokens.
      Scala.meta takes even the finest details of Scala code into account.
      We achieve this by attaching tokens, data structures representing atomic
      units of Scala syntax, to our abstract syntax trees. Note that the
      abstract syntax tree in the printout doesn't have the comment per se -
      it is stored in tokens instead.

    @meta
      val tree = "x + y /* adds x and y */".parse[Term].get
      tree.syntax
      tree.structure
      tree.tokens.structure

    @p
      @b
        Dialects.
      Scala.meta is designed from the ground up to be platform-independent.
      This means that we understand different versions of the base language:
      Scala 2.10, Scala 2.11 and even Dotty. We also support Sbt build files
      to make sure we cover as much Scala code as possible.

    @meta
      import scala.meta.dialects.Sbt0137
      Sbt0137("""
        lazy val root = (project in file(".")).
        settings(name := "hello")
      """).parse[Source]

    @p
      @b
        Quasiquotes.
      Scala.reflect is notorious for being obscure and user-unfriendly,
      but it has its moments.
      Quasiquotes have proven to be an amazing productivity booster,
      so we implemented them in scala.meta, and now they are better than ever.
      Note how the precise types for @code("x") and @code("y")
      prevent the programmer from generating invalid code.
      Learn more about quasiquotes in
      @lnk("our documentation", "https://github.com/scalameta/scalameta/blob/master/notes/quasiquotes.md").

    @meta
      val addition = q"x + y"
      val q"$x + $y" = addition
      q"$y + $x" // compilation error

  @sect{Getting started}
    @p
      To get started with scala.meta, add the following to your @code("build.sbt"):

    @hl.scala
      libraryDependencies += "org.scalameta" %% "scalameta" % "@versionString"

    @p
      Next, you'll need to add a single wildcard import to the files where you'll
      be using scala.meta. Unlike with scala.reflect, the metaprogramming
      library from the standard distribution, no complicated setup is necessary.

    @hl.scala
      import scala.meta._

    @p
      To learn more about practical aspects of using scala.meta, take a look at
      @lnk("our tutorial", "http://scalameta.org/tutorial"), which is based on
      a workshop given by Ã“lafur Pall Geirsson at Scala World 2016.

  @sect{Roadmap}
    @p
      @b
        Semantic API.
      Our first priority is to come up with an API that will provide
      functionality to perform typechecking, name resolution, implicit inference, etc.
      It is crucial to fully model the language and
      achieve feature parity with scala.reflect. Visit @lnk("#604", "https://github.com/scalameta/scalameta/issues/604")
      to check out our roadmap and provide feedback.

    @p
      @b
        New-style ("inline") macros.
      As announced at ScalaDays NYC 2016,
      macros based on scala.reflect are going to be dropped from the future versions of Scala.
      We are now working on the replacement, so-called inline macros, under the banner of Macro Paradise 3.0.
      You may be interested in visiting @lnk("https://github.com/scalameta/paradise", "https://github.com/scalameta/paradise")
      to check out the state of the art.

    @p
      @b
        Other execution environments.
      The current version of scala.meta can only be run with Scala 2.11 or 2.12.
      This means that it is very hard or outright impossible to write scala.meta-based tools
      targetting Scala 2.10 (e.g. running in sbt 0.13.x) or Scala.js.
      Vote for @lnk("#295", "https://github.com/scalameta/scalameta/issues/295")
      and @lnk("#359", "https://github.com/scalameta/scalameta/issues/359")
      on our issue tracker if that's important for you.

  @sect("Talks")
    @p
      @b
        Metaprogramming 2.0
      (ScalaDays Berlin 2016). This talk explains the status of scala.meta, demonstrates key features,
      presents the early adopters and publishes our plans for the future. In Berlin, we provided an extensive
      story of what's going to happen to compile-time metaprogramming in Scala,
      featuring a live demo of new-style ("inline") macros that support integration with IntelliJ IDEA.

    @p
      Video:
      @lnk("https://www.youtube.com/watch?v=IPnd_SZJ1nM", "https://www.youtube.com/watch?v=IPnd_SZJ1nM")
      @br
      Slides:
      @lnk("http://scalamacros.org/paperstalks/2016-06-17-Metaprogramming20.pdf", "http://scalamacros.org/paperstalks/2016-06-17-Metaprogramming20.pdf")

  @sect("Supporters")
    @p
      @raw
        <center>
          <a href="https://twitter.com/"><img width="112" height="90" src="https://g.twimg.com/Twitter_logo_blue.png" /></a>
          &nbsp; &nbsp;
          <a href="https://www.jetbrains.com/"><img width="95" height="95" src="http://resources.jetbrains.com/assets/media/open-graph/jetbrains_250x250.png" /></a>
          &nbsp; &nbsp;
          <a href="https://www.codacy.com/"><img width="105" height="105" src="https://avatars3.githubusercontent.com/u/1834093?v=3&s=200" /></a>
          &nbsp; &nbsp;
          <a href="https://scala.epfl.ch/"><img width="95" height="95" src="https://scala.epfl.ch/resources/img/scala-center-swirl.png"/></a>
          &nbsp; &nbsp;
          <a href="https://www.evolutiongaming.com/"><img width="75" height="95" src="https://dl.dropboxusercontent.com/u/10497693/evolution_gaming.png"/></a>
        </center>

@copyrightBadge

@raw
  <a href="https://github.com/scalameta/scalameta"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/652c5b9acfaddf3a9c326fa6bde407b87f7be0f4/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6f72616e67655f6666373630302e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_orange_ff7600.png"></a>

  <script type="text/javascript">
    var _paq = _paq || [];
    _paq.push(["setDomains", ["*.scalameta.org"]]);
    _paq.push(['trackPageView']);
    _paq.push(['enableLinkTracking']);
    (function() {
      var u="https://stats.geirsson.com/hello/";
      _paq.push(['setTrackerUrl', u+'hello.php']);
      _paq.push(['setSiteId', 4]);
      var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
      g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'hello.js'; s.parentNode.insertBefore(g,s);
    })();
  </script>
  <noscript><p><img src="https://stats.geirsson.com/hello/hello.php?idsite=4" style="border:0;" alt="" /></p></noscript>

  <script>
    // NOTE: Disables the sidebar because we don't really have anything to show there yet.
    // Gonna re-enable it back by deleting this <script/> block once we have something interesting.
    (function() {
      controller = scalatex.scrollspy.Controller();
      controller.main = function(config) {}
    })()
  </script>
