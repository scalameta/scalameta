@import scala.meta.Readme._
@import Main._
@import scala.meta._

@sect("Scalameta", stableVersionBadge)

  @raw
    <center>
      <img style="margin: auto; width: 12em; padding-top: 2em" src="img/scalameta-logo.png" />
    </center>

  @p
    Scalameta is a clean-room implementation of a metaprogramming toolkit for Scala,
    designed to be simple, robust and portable.
    We are striving for scalameta to become a successor of scala.reflect,
    the current de facto standard in the Scala ecosystem.

  @p
    Scalameta provides functionality that's unprecedented in the Scala ecosystem.
    Our killer feature is abstract syntax trees that capture the code exactly as it is written -
    with all the original formatting and attention to minor syntactic details.

  @p
    With scalameta, we are building a community of next-generation tooling for Scala.
    @lnk("Codacy", "https://codacy.com/")'s Scala engine, @lnk("Scalafmt", "http://scalafmt.org"),
    and @lnk("Scalafix", "https://github.com/scalacenter/scalafix")
    take advantage of our unique features and deliver user experiences
    that have been unreachable for the most of the traditional Scala tools.

  @sect{Features}
    @p
      @b
        High-fidelity parsing.
      Note how the abstract syntax trees in the printout below
      contain comprehensive information about formatting and comments.
      This is an exclusive feature of scalameta.

    @meta
      "x + y /* adds x and y */".parse[Term]
      "List[ Int ]".parse[Type]

    @p
      @b
        Tokens.
      Scalameta takes even the finest details of Scala code into account.
      We achieve this by attaching tokens, data structures representing atomic
      units of Scala syntax, to our abstract syntax trees. Note that the
      abstract syntax tree in the printout doesn't have the comment per se -
      it is stored in tokens instead.

    @meta
      val tree = "x + y /* adds x and y */".parse[Term].get
      tree.syntax
      tree.structure
      tree.tokens.structure

    @p
      @b
        Dialects.
      Scalameta is designed from the ground up to be platform-independent.
      This means that we understand different versions of the base language:
      Scala 2.10, Scala 2.11 and even Dotty. We also support Sbt build files
      to make sure we cover as much Scala code as possible.

    @meta
      import scala.meta.dialects.Sbt0137
      Sbt0137("""
        lazy val root = (project in file(".")).
        settings(name := "hello")
      """).parse[Source]

    @p
      @b
        Quasiquotes.
      Scala.reflect is notorious for being obscure and user-unfriendly,
      but it has its moments.
      Quasiquotes have proven to be an amazing productivity booster,
      so we implemented them in scalameta, and now they are better than ever.
      Note how the precise types for @code("x") and @code("y")
      prevent the programmer from generating invalid code.
      Learn more about quasiquotes in
      @lnk("our documentation", "https://github.com/scalameta/scalameta/blob/master/notes/quasiquotes.md").

    @meta
      val addition = q"x + y"
      val q"$x + $y" = addition
      q"$y + $x" // compilation error

  @sect{Releases}

    @p
      @b
        Stable releases.
      We are committed to publishing major releases (e.g. 1.7.0, 1.8.0, etc)
      on the 10th day of every month. In such releases, we accumulate battle-tested changes
      that have been merged since the last release and make them available on Maven Central.

   @p
      @b
        Pre-release builds.
      We automatically publish pre-release builds to our Bintray repository on every merge into master,
      typically within 10-30 minutes of a merge. In such builds, we publish potentially experimental changes
      that haven't yet undergone practical testing.

   @p
      @b
        Compatibility.
      Following a popular convention, we only provide binary and source compatibility
      between minor versions (e.g. between 1.6.0 and 1.6.1, but not between 1.6.0 and 1.7.0).
      There are no compatibility guarantees provided for pre-release builds.

  @sect{Getting started}
    @p
      To get started with scalameta, add the following to your @code("build.sbt"):

    @hl.scala
      // Latest stable version
      libraryDependencies += "org.scalameta" %% "scalameta" % "@stableVersionString"

      // Latest pre-release version
      resolvers += Resolver.bintrayRepo("scalameta", "maven")
      libraryDependencies += "org.scalameta" %% "scalameta" % "@preReleaseVersionString"

    @p
      Next, you'll need to add a single wildcard import to the files where you'll
      be using scalameta. Unlike with scala.reflect, the metaprogramming
      library from the standard distribution, no complicated setup is necessary.

    @hl.scala
      import scala.meta._

  @sect{Tutorial}
    @p
      To learn more about practical aspects of using scalameta, take a look at
      our tutorial that is based on a workshop given by Ã“lafur Pall Geirsson at Scala World 2016:
      @lnk("http://scalameta.org/tutorial", "http://scalameta.org/tutorial").

  @sect{Roadmap}
    @p
      @b
        Semantic API.
      Our first priority is to come up with an API that will provide
      functionality to perform typechecking, name resolution, implicit inference, etc.
      It is crucial to fully model the language and
      achieve feature parity with scala.reflect. Visit @lnk("#604", "https://github.com/scalameta/scalameta/issues/604")
      to check out our roadmap and provide feedback.

    @p
      @b
        New-style ("inline") macros.
      As announced at ScalaDays New York City 2016,
      macros based on scala.reflect are going to be dropped from the future versions of Scala.
      We are now working on the replacement that is designed to be platform-independent and easy-to-use.
      You may be interested in visiting @lnk("https://github.com/scalamacros/scalamacros", "https://github.com/scalamacros/scalamacros")
      to check out the state of the art.

    @p
      @b
        Other execution environments.
      The current version of scalameta can only be run with Scala 2.11, Scala 2.12 or Scala.js.
      This means that it is very hard or outright impossible to write scalameta-based tools
      targetting Scala 2.10 (e.g. running in sbt 0.13.x) or Scala Native.
      Vote for @lnk("#295", "https://github.com/scalameta/scalameta/issues/295")
      and @lnk("#772", "https://github.com/scalameta/scalameta/issues/772")
      on our issue tracker if that's important for you.

  @sect("Talks")
    @p
      @b
        Semantic Tooling at Twitter
      (ScalaDays Copenhagen 2017). This talk introduces semantic databases, the cornerstone of
      the scalameta semantic API, and explains how semantic databases can be used to integrate
      with Kythe, a language-agnostic ecosystem for developer tools. In this talk, we presented
      our vision of next-generation semantic tooling for the Scala ecosystem.

    @p
      Video: coming soon
      @br
      Slides:
      @lnk("http://scalameta.org/talks/2017-06-01-SemanticToolingAtTwitter.pdf", "http://scalameta.org/talks/2017-06-01-SemanticToolingAtTwitter.pdf")

    @p
      @b
        Metaprogramming 2.0
      (ScalaDays Berlin 2016). This talk explains the status of scalameta, demonstrates key features,
      presents the early adopters and publishes our plans for the future. In Berlin, we provided an extensive
      story of what's going to happen to compile-time metaprogramming in Scala,
      featuring a live demo of new-style ("inline") macros that support integration with IntelliJ IDEA.

    @p
      Video:
      @lnk("https://www.youtube.com/watch?v=IPnd_SZJ1nM", "https://www.youtube.com/watch?v=IPnd_SZJ1nM")
      @br
      Slides:
      @lnk("http://scalamacros.org/paperstalks/2016-06-17-Metaprogramming20.pdf", "http://scalamacros.org/paperstalks/2016-06-17-Metaprogramming20.pdf")

  @sect("Supporters")
    @p
      @raw
        <center>
          <a href="https://twitter.com/"><img width="112" height="90" src="https://g.twimg.com/Twitter_logo_blue.png" /></a>
          &nbsp; &nbsp;
          <a href="https://www.jetbrains.com/"><img width="95" height="95" src="http://resources.jetbrains.com/assets/media/open-graph/jetbrains_250x250.png" /></a>
          &nbsp; &nbsp;
          <a href="https://www.codacy.com/"><img width="105" height="105" src="https://avatars3.githubusercontent.com/u/1834093?v=3&s=200" /></a>
          &nbsp; &nbsp;
          <a href="https://scala.epfl.ch/"><img width="95" height="95" src="https://scala.epfl.ch/resources/img/scala-center-swirl.png"/></a>
          &nbsp; &nbsp;
          <a href="https://www.evolutiongaming.com/"><img width="75" height="95" src="https://www.dropbox.com/s/u5zulu0w1i04di6/evolution_gaming.png?dl=1"/></a>
        </center>

@copyrightBadge

@raw
  <a href="https://github.com/scalameta/scalameta"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/652c5b9acfaddf3a9c326fa6bde407b87f7be0f4/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6f72616e67655f6666373630302e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_orange_ff7600.png"></a>

  <script>
    // NOTE: Disables the sidebar because we don't really have anything to show there yet.
    // Gonna re-enable it back by deleting this <script/> block once we have something interesting.
    (function() {
      controller = scalatex.scrollspy.Controller();
      controller.main = function(config) {}
    })()
  </script>
