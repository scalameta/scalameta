_empty_. => _root_.
_empty_.A# => _empty_.
_empty_.A#`<init>`(). => _empty_.A#
_empty_.A#b(). => _empty_.A#
_empty_.B# => _empty_.
_empty_.B#`<init>`(). => _empty_.B#
_empty_.B#a(). => _empty_.B#
_root_. => <none>
com. => _root_.
com.javacp. => com.
com.javacp.ClassSuffix# => com.javacp.
com.javacp.ClassSuffix#Inner# => com.javacp.ClassSuffix#
com.javacp.ClassSuffix#Inner#Bar# => com.javacp.ClassSuffix#Inner#
com.javacp.ClassSuffix#Inner#Bar#Fuz# => com.javacp.ClassSuffix#Inner#Bar#
com.javacp.ClassSuffix#Inner#Bar#Fuz#[B] => com.javacp.ClassSuffix#Inner#Bar#Fuz#
com.javacp.ClassSuffix#Inner#Bar#Fuz#`<init>`(Bar). => com.javacp.ClassSuffix#Inner#Bar#Fuz#
com.javacp.ClassSuffix#Inner#Bar#`<init>`(Inner). => com.javacp.ClassSuffix#Inner#Bar#
com.javacp.ClassSuffix#Inner#[A] => com.javacp.ClassSuffix#Inner#
com.javacp.ClassSuffix#Inner#`<init>`(ClassSuffix). => com.javacp.ClassSuffix#Inner#
com.javacp.ClassSuffix#`<init>`(). => com.javacp.ClassSuffix#
com.javacp.ClassSuffix#suffix. => com.javacp.ClassSuffix#
com.javacp.Coin# => com.javacp.
com.javacp.Coin#$VALUES. => com.javacp.Coin#
com.javacp.Coin#DIME. => com.javacp.Coin#
com.javacp.Coin#NICKEL. => com.javacp.Coin#
com.javacp.Coin#PENNY. => com.javacp.Coin#
com.javacp.Coin#QUARTER. => com.javacp.Coin#
com.javacp.Coin#`<init>`(Int). => com.javacp.Coin#
com.javacp.Coin#`<init>`(Int).($enum$name) => com.javacp.Coin#`<init>`(Int).
com.javacp.Coin#value(). => com.javacp.Coin#
com.javacp.Coin#value. => com.javacp.Coin#
com.javacp.Coin#valueOf(String). => com.javacp.Coin#
com.javacp.Coin#valueOf(String).(name) => com.javacp.Coin#valueOf(String).
com.javacp.Coin#values(). => com.javacp.Coin#
com.javacp.Interface# => com.javacp.
com.javacp.Logger# => com.javacp.
com.javacp.Logger#`<init>`(). => com.javacp.Logger#
com.javacp.MetacJava# => com.javacp.
com.javacp.MetacJava#Overload1# => com.javacp.MetacJava#
com.javacp.MetacJava#Overload1#A# => com.javacp.MetacJava#Overload1#
com.javacp.MetacJava#Overload1#A#`<init>`(Overload1). => com.javacp.MetacJava#Overload1#A#
com.javacp.MetacJava#Overload1#`<init>`(MetacJava). => com.javacp.MetacJava#Overload1#
com.javacp.MetacJava#Overload2# => com.javacp.MetacJava#
com.javacp.MetacJava#Overload2#A# => com.javacp.MetacJava#Overload2#
com.javacp.MetacJava#Overload2#A#`<init>`(Overload2). => com.javacp.MetacJava#Overload2#A#
com.javacp.MetacJava#Overload2#`<init>`(MetacJava). => com.javacp.MetacJava#Overload2#
com.javacp.MetacJava#Overload3# => com.javacp.MetacJava#
com.javacp.MetacJava#Overload3#A# => com.javacp.MetacJava#Overload3#
com.javacp.MetacJava#Overload3#A#`<init>`(). => com.javacp.MetacJava#Overload3#A#
com.javacp.MetacJava#Overload3#`<init>`(). => com.javacp.MetacJava#Overload3#
com.javacp.MetacJava#StaticInner# => com.javacp.MetacJava#
com.javacp.MetacJava#StaticInner#NonStatic# => com.javacp.MetacJava#StaticInner#
com.javacp.MetacJava#StaticInner#NonStatic#`<init>`(StaticInner). => com.javacp.MetacJava#StaticInner#NonStatic#
com.javacp.MetacJava#StaticInner#NonStatic#method(NonStatic). => com.javacp.MetacJava#StaticInner#NonStatic#
com.javacp.MetacJava#StaticInner#NonStatic#method(NonStatic).(e) => com.javacp.MetacJava#StaticInner#NonStatic#method(NonStatic).
com.javacp.MetacJava#StaticInner#`<init>`(). => com.javacp.MetacJava#StaticInner#
com.javacp.MetacJava#StaticInner#isNotStatic(). => com.javacp.MetacJava#StaticInner#
com.javacp.MetacJava#StaticInner#isStatic(). => com.javacp.MetacJava#StaticInner#
com.javacp.MetacJava#`<init>`(). => com.javacp.MetacJava#
com.javacp.MetacJava#overload(A). => com.javacp.MetacJava#
com.javacp.MetacJava#overload(A).(a) => com.javacp.MetacJava#overload(A).
com.javacp.MetacJava#overload(A+1). => com.javacp.MetacJava#
com.javacp.MetacJava#overload(A+1).(a) => com.javacp.MetacJava#overload(A+1).
com.javacp.MetacJava#overload(A+2). => com.javacp.MetacJava#
com.javacp.MetacJava#overload(A+2).(a) => com.javacp.MetacJava#overload(A+2).
com.javacp.NonGeneric# => com.javacp.
com.javacp.NonGeneric#`<init>`(). => com.javacp.NonGeneric#
com.javacp.NonGeneric#flush(). => com.javacp.NonGeneric#
com.javacp.Recursive# => com.javacp.
com.javacp.Recursive#Inner# => com.javacp.Recursive#
com.javacp.Recursive#Inner#[A] => com.javacp.Recursive#Inner#
com.javacp.Recursive#Inner#[B] => com.javacp.Recursive#Inner#
com.javacp.Recursive#Inner#`<init>`(). => com.javacp.Recursive#Inner#
com.javacp.Recursive#Inner2# => com.javacp.Recursive#
com.javacp.Recursive#Inner2#[C] => com.javacp.Recursive#Inner2#
com.javacp.Recursive#Inner2#`<init>`(Recursive). => com.javacp.Recursive#Inner2#
com.javacp.Recursive#[A] => com.javacp.Recursive#
com.javacp.Recursive#[B] => com.javacp.Recursive#
com.javacp.Recursive#`<init>`(). => com.javacp.Recursive#
com.javacp.Recursive#foo(). => com.javacp.Recursive#
com.javacp.Recursive#foo().[Anon] => com.javacp.Recursive#foo().
com.javacp.Test# => com.javacp.
com.javacp.Test#Boolean. => com.javacp.Test#
com.javacp.Test#Byte. => com.javacp.Test#
com.javacp.Test#Char. => com.javacp.Test#
com.javacp.Test#Float. => com.javacp.Test#
com.javacp.Test#InnerShadowTypeParam# => com.javacp.Test#
com.javacp.Test#InnerShadowTypeParam#[A] => com.javacp.Test#InnerShadowTypeParam#
com.javacp.Test#InnerShadowTypeParam#`<init>`(Test). => com.javacp.Test#InnerShadowTypeParam#
com.javacp.Test#InnerShadowTypeParam#move(A,B). => com.javacp.Test#InnerShadowTypeParam#
com.javacp.Test#InnerShadowTypeParam#move(A,B).(a) => com.javacp.Test#InnerShadowTypeParam#move(A,B).
com.javacp.Test#InnerShadowTypeParam#move(A,B).(b) => com.javacp.Test#InnerShadowTypeParam#move(A,B).
com.javacp.Test#Int. => com.javacp.Test#
com.javacp.Test#Long. => com.javacp.Test#
com.javacp.Test#Short. => com.javacp.Test#
com.javacp.Test#StaticClass# => com.javacp.Test#
com.javacp.Test#StaticClass#`<init>`(). => com.javacp.Test#StaticClass#
com.javacp.Test#[A] => com.javacp.Test#
com.javacp.Test#[B] => com.javacp.Test#
com.javacp.Test#`<init>`(). => com.javacp.Test#
com.javacp.Test#anonymous. => com.javacp.Test#
com.javacp.Test#arrayField. => com.javacp.Test#
com.javacp.Test#arrayMethod(). => com.javacp.Test#
com.javacp.Test#compareTo(B). => com.javacp.Test#
com.javacp.Test#compareTo(B).(b) => com.javacp.Test#compareTo(B).
com.javacp.Test#genericField. => com.javacp.Test#
com.javacp.Test#genericMethod(). => com.javacp.Test#
com.javacp.Test#genericParams(A,B). => com.javacp.Test#
com.javacp.Test#genericParams(A,B).(a) => com.javacp.Test#genericParams(A,B).
com.javacp.Test#genericParams(A,B).(b) => com.javacp.Test#genericParams(A,B).
com.javacp.Test#methodTypeParams(C). => com.javacp.Test#
com.javacp.Test#methodTypeParams(C).(c) => com.javacp.Test#methodTypeParams(C).
com.javacp.Test#methodTypeParams(C).[C] => com.javacp.Test#methodTypeParams(C).
com.javacp.Test#overload(Logger). => com.javacp.Test#
com.javacp.Test#overload(Logger).(a) => com.javacp.Test#overload(Logger).
com.javacp.Test#overload(Logger+1). => com.javacp.Test#
com.javacp.Test#overload(Logger+1).(a) => com.javacp.Test#overload(Logger+1).
com.javacp.Test#packagePrivateField. => com.javacp.Test#
com.javacp.Test#packagePrivateMethod(). => com.javacp.Test#
com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char). => com.javacp.Test#
com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).(a) => com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).
com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).(b) => com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).
com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).(c) => com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).
com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).(d) => com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).
com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).(e) => com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).
com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).(f) => com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).
com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).(g) => com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).
com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).(h) => com.javacp.Test#primitiveParams(Int,Long,Float,Double,Short,Byte,Boolean,Char).
com.javacp.Test#privateField. => com.javacp.Test#
com.javacp.Test#privateMethod(). => com.javacp.Test#
com.javacp.Test#protectedField. => com.javacp.Test#
com.javacp.Test#protectedMethod(). => com.javacp.Test#
com.javacp.Test#publicField. => com.javacp.Test#
com.javacp.Test#publicMethod(). => com.javacp.Test#
com.javacp.Test#staticField. => com.javacp.Test#
com.javacp.Test#staticMethod(). => com.javacp.Test#
com.javacp.Test#strictfpMethod(). => com.javacp.Test#
com.javacp.Test#typeParams(ArrayList,Hashtable). => com.javacp.Test#
com.javacp.Test#typeParams(ArrayList,Hashtable).(a) => com.javacp.Test#typeParams(ArrayList,Hashtable).
com.javacp.Test#typeParams(ArrayList,Hashtable).(b) => com.javacp.Test#typeParams(ArrayList,Hashtable).
com.javacp.Test#wildcard(ArrayList). => com.javacp.Test#
com.javacp.Test#wildcard(ArrayList).(wildcard) => com.javacp.Test#wildcard(ArrayList).
com.javacp.Test#wildcard(Collection,Collection). => com.javacp.Test#
com.javacp.Test#wildcard(Collection,Collection).(a) => com.javacp.Test#wildcard(Collection,Collection).
com.javacp.Test#wildcard(Collection,Collection).(b) => com.javacp.Test#wildcard(Collection,Collection).
example. => _root_.
example.A# => example.
example.A#foo(). => example.A#
example.Acc# => example.
example.Acc#`<init>`(). => example.Acc#
example.Acc#m1(). => example.Acc#
example.Acc#m2(). => example.Acc#
example.Acc#m3(). => example.Acc#
example.Acc#m4(). => example.Acc#
example.Acc#m5(). => example.Acc#
example.Acc#m6(). => example.Acc#
example.Acc#m7(). => example.Acc#
example.B# => example.
example.B#`<init>`(). => example.B#
example.B#foo(). => example.B#
example.Example. => example.
example.Example.main(Array). => example.Example.
example.Example.main(Array).(args) => example.Example.main(Array).
example.Example.x(). => example.Example.
example.Example.x. => example.Example.
example.MetacJava# => example.
example.MetacJava#`<init>`(). => example.MetacJava#
example.MetacJava#coin(). => example.MetacJava#
example.MetacJava#coin. => example.MetacJava#
example.MetacJava#inner(). => example.MetacJava#
example.MetacJava#inner. => example.MetacJava#
example.MetacJava#interface(). => example.MetacJava#
example.MetacJava#interface. => example.MetacJava#
example.MetacJava#nonStatic(). => example.MetacJava#
example.MetacJava#nonStatic. => example.MetacJava#
example.MetacJava#overload1(). => example.MetacJava#
example.MetacJava#overload1. => example.MetacJava#
example.MetacJava#overload2(). => example.MetacJava#
example.MetacJava#overload2. => example.MetacJava#
example.MetacJava#staticInner(). => example.MetacJava#
example.MetacJava#staticInner. => example.MetacJava#
example.MethodUsages# => example.
example.MethodUsages#`<init>`(). => example.MethodUsages#
example.MethodUsages#m(). => example.MethodUsages#
example.MethodUsages#m. => example.MethodUsages#
example.Methods# => example.
example.Methods#$anon# => example.Methods#
example.Methods#$anon#x(). => example.Methods#$anon#
example.Methods#AList# => example.Methods#
example.Methods#AList#[T] => example.Methods#AList#
example.Methods#List# => example.Methods#
example.Methods#List#[T] => example.Methods#List#
example.Methods#List#`<init>`(). => example.Methods#List#
example.Methods#[T] => example.Methods#
example.Methods#`<init>`(). => example.Methods#
example.Methods#`m8().`(). => example.Methods#
example.Methods#`m9().`# => example.Methods#
example.Methods#`m9().`#`<init>`(). => example.Methods#`m9().`#
example.Methods#m1(). => example.Methods#
example.Methods#m10(AList). => example.Methods#
example.Methods#m10(AList).(x) => example.Methods#m10(AList).
example.Methods#m11(.type). => example.Methods#
example.Methods#m11(.type).(x) => example.Methods#m11(.type).
example.Methods#m11(.type+1). => example.Methods#
example.Methods#m11(.type+1).(x) => example.Methods#m11(.type+1).
example.Methods#m12a({}). => example.Methods#
example.Methods#m12a({}).(x) => example.Methods#m12a({}).
example.Methods#m12b({}). => example.Methods#
example.Methods#m12b({}).(x) => example.Methods#m12b({}).
example.Methods#m13(Int). => example.Methods#
example.Methods#m13(Int).(x) => example.Methods#m13(Int).
example.Methods#m14(T). => example.Methods#
example.Methods#m14(T).(x) => example.Methods#m14(T).
example.Methods#m14(T).(x)T# => example.Methods#m14(T).(x)
example.Methods#m15(=>Int). => example.Methods#
example.Methods#m15(=>Int).(x) => example.Methods#m15(=>Int).
example.Methods#m16(Int*). => example.Methods#
example.Methods#m16(Int*).(x) => example.Methods#m16(Int*).
example.Methods#m2(). => example.Methods#
example.Methods#m3(Int). => example.Methods#
example.Methods#m3(Int).(x) => example.Methods#m3(Int).
example.Methods#m4(Int,Int). => example.Methods#
example.Methods#m4(Int,Int).(x) => example.Methods#m4(Int,Int).
example.Methods#m4(Int,Int).(y) => example.Methods#m4(Int,Int).
example.Methods#m5(Int). => example.Methods#
example.Methods#m5(Int).(x) => example.Methods#m5(Int).
example.Methods#m5(String). => example.Methods#
example.Methods#m5(String).(x) => example.Methods#m5(String).
example.Methods#m6(Int). => example.Methods#
example.Methods#m6(Int).(x) => example.Methods#m6(Int).
example.Methods#m6(List). => example.Methods#
example.Methods#m6(List).(x) => example.Methods#m6(List).
example.Methods#m6(List+1). => example.Methods#
example.Methods#m6(List+1).(x) => example.Methods#m6(List+1).
example.Methods#m7a(Methods,List,Ordering). => example.Methods#
example.Methods#m7a(Methods,List,Ordering).(c) => example.Methods#m7a(Methods,List,Ordering).
example.Methods#m7a(Methods,List,Ordering).(evidence$1) => example.Methods#m7a(Methods,List,Ordering).
example.Methods#m7a(Methods,List,Ordering).(l) => example.Methods#m7a(Methods,List,Ordering).
example.Methods#m7a(Methods,List,Ordering).[U] => example.Methods#m7a(Methods,List,Ordering).
example.Methods#m7b(List,Function1). => example.Methods#
example.Methods#m7b(List,Function1).(evidence$2) => example.Methods#m7b(List,Function1).
example.Methods#m7b(List,Function1).(l) => example.Methods#m7b(List,Function1).
example.Methods#m7b(List,Function1).[U] => example.Methods#m7b(List,Function1).
example.Methods#m9(`m9().`). => example.Methods#
example.Methods#m9(`m9().`).(x) => example.Methods#m9(`m9().`).
example.Synthetic# => example.
example.Synthetic#`<init>`(). => example.Synthetic#
example.ValUsages. => example.
example.ValUsages.v(). => example.ValUsages.
example.ValUsages.v. => example.ValUsages.
example.Vals# => example.
example.Vals#`<init>`(Int,Int,Int). => example.Vals#
example.Vals#`<init>`(Int,Int,Int).(p) => example.Vals#`<init>`(Int,Int,Int).
example.Vals#`<init>`(Int,Int,Int).(xp) => example.Vals#`<init>`(Int,Int,Int).
example.Vals#`<init>`(Int,Int,Int).(yp) => example.Vals#`<init>`(Int,Int,Int).
example.Vals#`yam_=`(Int). => example.Vals#
example.Vals#`yam_=`(Int).(x$1) => example.Vals#`yam_=`(Int).
example.Vals#`yfm_=`(Int). => example.Vals#
example.Vals#`yfm_=`(Int).(x$1) => example.Vals#`yfm_=`(Int).
example.Vals#`yim_=`(Int). => example.Vals#
example.Vals#`yim_=`(Int).(x$1) => example.Vals#`yim_=`(Int).
example.Vals#`ym_=`(Int). => example.Vals#
example.Vals#`ym_=`(Int).(x$1) => example.Vals#`ym_=`(Int).
example.Vals#`yp_=`(Int). => example.Vals#
example.Vals#`yp_=`(Int).(x$1) => example.Vals#`yp_=`(Int).
example.Vals#m(). => example.Vals#
example.Vals#p. => example.Vals#
example.Vals#xam(). => example.Vals#
example.Vals#xfm(). => example.Vals#
example.Vals#xfm. => example.Vals#
example.Vals#xim(). => example.Vals#
example.Vals#xim. => example.Vals#
example.Vals#xlm. => example.Vals#
example.Vals#xm(). => example.Vals#
example.Vals#xm. => example.Vals#
example.Vals#xp(). => example.Vals#
example.Vals#xp. => example.Vals#
example.Vals#xzlm(). => example.Vals#
example.Vals#xzm(). => example.Vals#
example.Vals#yam(). => example.Vals#
example.Vals#yfm(). => example.Vals#
example.Vals#yfm. => example.Vals#
example.Vals#yim(). => example.Vals#
example.Vals#yim. => example.Vals#
example.Vals#ylm. => example.Vals#
example.Vals#ym(). => example.Vals#
example.Vals#ym. => example.Vals#
example.Vals#yp(). => example.Vals#
example.Vals#yp. => example.Vals#
example.`local-file`# => example.
example.`local-file`#`<init>`(). => example.`local-file`#
exclude. => _root_.
exclude.Exclude# => exclude.
exclude.Exclude#`<init>`(). => exclude.Exclude#
flags. => _root_.
flags.p. => flags.
flags.p.package. => flags.p.
flags.p.package.AA# => flags.p.package.
flags.p.package.AA#`<init>`(Int,Int,Int). => flags.p.package.AA#
flags.p.package.AA#`<init>`(Int,Int,Int).(x) => flags.p.package.AA#`<init>`(Int,Int,Int).
flags.p.package.AA#`<init>`(Int,Int,Int).(y) => flags.p.package.AA#`<init>`(Int,Int,Int).
flags.p.package.AA#`<init>`(Int,Int,Int).(z) => flags.p.package.AA#`<init>`(Int,Int,Int).
flags.p.package.AA#`z_=`(Int). => flags.p.package.AA#
flags.p.package.AA#`z_=`(Int).(x$1) => flags.p.package.AA#`z_=`(Int).
flags.p.package.AA#x. => flags.p.package.AA#
flags.p.package.AA#y(). => flags.p.package.AA#
flags.p.package.AA#y. => flags.p.package.AA#
flags.p.package.AA#z(). => flags.p.package.AA#
flags.p.package.AA#z. => flags.p.package.AA#
flags.p.package.C# => flags.p.package.
flags.p.package.C#[T] => flags.p.package.C#
flags.p.package.C#[U] => flags.p.package.C#
flags.p.package.C#[V] => flags.p.package.C#
flags.p.package.C#`<init>`(). => flags.p.package.C#
flags.p.package.C#`<init>`(T,U,V). => flags.p.package.C#
flags.p.package.C#`<init>`(T,U,V).(x) => flags.p.package.C#`<init>`(T,U,V).
flags.p.package.C#`<init>`(T,U,V).(y) => flags.p.package.C#`<init>`(T,U,V).
flags.p.package.C#`<init>`(T,U,V).(z) => flags.p.package.C#`<init>`(T,U,V).
flags.p.package.C#w(). => flags.p.package.C#
flags.p.package.C#x. => flags.p.package.C#
flags.p.package.C#y. => flags.p.package.C#
flags.p.package.C#z. => flags.p.package.C#
flags.p.package.S# => flags.p.package.
flags.p.package.S#[T] => flags.p.package.S#
flags.p.package.S#`<init>`(). => flags.p.package.S#
flags.p.package.T1# => flags.p.package.
flags.p.package.T2# => flags.p.package.
flags.p.package.T2#[T] => flags.p.package.T2#
flags.p.package.U# => flags.p.package.
flags.p.package.V# => flags.p.package.
flags.p.package.X. => flags.p.package.
flags.p.package.X.canEqual(Any). => flags.p.package.X.
flags.p.package.X.canEqual(Any).(x$1) => flags.p.package.X.canEqual(Any).
flags.p.package.X.hashCode(). => flags.p.package.X.
flags.p.package.X.productArity(). => flags.p.package.X.
flags.p.package.X.productElement(Int). => flags.p.package.X.
flags.p.package.X.productElement(Int).(x$1) => flags.p.package.X.productElement(Int).
flags.p.package.X.productIterator(). => flags.p.package.X.
flags.p.package.X.productPrefix(). => flags.p.package.X.
flags.p.package.X.readResolve(). => flags.p.package.X.
flags.p.package.X.toString(). => flags.p.package.X.
flags.p.package.Y# => flags.p.package.
flags.p.package.Y#`<init>`(). => flags.p.package.Y#
flags.p.package.Z# => flags.p.package.
flags.p.package.`y_=`(Int). => flags.p.package.
flags.p.package.`y_=`(Int).(x$1) => flags.p.package.`y_=`(Int).
flags.p.package.m(). => flags.p.package.
flags.p.package.m().[TT] => flags.p.package.m().
flags.p.package.x(). => flags.p.package.
flags.p.package.xs1(). => flags.p.package.
flags.p.package.xs1. => flags.p.package.
flags.p.package.y(). => flags.p.package.
flags.p.package.y. => flags.p.package.
flags.p.package.z(Int). => flags.p.package.
flags.p.package.z(Int).(pp) => flags.p.package.z(Int).
types. => _root_.
types.B# => types.
types.B#`<init>`(). => types.B#
types.C# => types.
types.C#`<init>`(). => types.C#
types.P# => types.
types.P#C# => types.P#
types.P#C#`<init>`(). => types.P#C#
types.P#X# => types.P#
types.P#X#`<init>`(). => types.P#X#
types.P#`<init>`(). => types.P#
types.P#x(). => types.P#
types.P#x. => types.P#
types.T# => types.
types.T#C# => types.T#
types.T#C#`<init>`(). => types.T#C#
types.T#X# => types.T#
types.T#X#`<init>`(). => types.T#X#
types.T#`<init>`(). => types.T#
types.T#x(). => types.T#
types.T#x. => types.T#
types.Test. => types.
types.Test.C# => types.Test.
types.Test.C#$anon# => types.Test.C#
types.Test.C#$anon#k(). => types.Test.C#$anon#
types.Test.C#ByNameType. => types.Test.C#
types.Test.C#ByNameType.m1(=>Int). => types.Test.C#ByNameType.
types.Test.C#ByNameType.m1(=>Int).(x) => types.Test.C#ByNameType.m1(=>Int).
types.Test.C#ClassInfoType1. => types.Test.C#
types.Test.C#ClassInfoType2# => types.Test.C#
types.Test.C#ClassInfoType2#`<init>`(). => types.Test.C#ClassInfoType2#
types.Test.C#ClassInfoType2#x(). => types.Test.C#ClassInfoType2#
types.Test.C#ClassInfoType3# => types.Test.C#
types.Test.C#ClassInfoType3#[T] => types.Test.C#ClassInfoType3#
types.Test.C#MethodType. => types.Test.C#
types.Test.C#MethodType.m3(). => types.Test.C#MethodType.
types.Test.C#MethodType.m4(). => types.Test.C#MethodType.
types.Test.C#MethodType.m5(Int). => types.Test.C#MethodType.
types.Test.C#MethodType.m5(Int).(x) => types.Test.C#MethodType.m5(Int).
types.Test.C#MethodType.m6(T). => types.Test.C#MethodType.
types.Test.C#MethodType.m6(T).(x) => types.Test.C#MethodType.m6(T).
types.Test.C#MethodType.m6(T).[T] => types.Test.C#MethodType.m6(T).
types.Test.C#MethodType.x1(). => types.Test.C#MethodType.
types.Test.C#MethodType.x2(). => types.Test.C#MethodType.
types.Test.C#RepeatedType# => types.Test.C#
types.Test.C#RepeatedType#`<init>`(String*). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#`<init>`(String*).(s) => types.Test.C#RepeatedType#`<init>`(String*).
types.Test.C#RepeatedType#canEqual(Any). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#canEqual(Any).(x$1) => types.Test.C#RepeatedType#canEqual(Any).
types.Test.C#RepeatedType#equals(Any). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#equals(Any).(x$1) => types.Test.C#RepeatedType#equals(Any).
types.Test.C#RepeatedType#hashCode(). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#m1(Int*). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#m1(Int*).(x) => types.Test.C#RepeatedType#m1(Int*).
types.Test.C#RepeatedType#productArity(). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#productElement(Int). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#productElement(Int).(x$1) => types.Test.C#RepeatedType#productElement(Int).
types.Test.C#RepeatedType#productIterator(). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#productPrefix(). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#s(). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#s. => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#toString(). => types.Test.C#RepeatedType#
types.Test.C#RepeatedType. => types.Test.C#
types.Test.C#RepeatedType.apply(String*). => types.Test.C#RepeatedType.
types.Test.C#RepeatedType.apply(String*).(s) => types.Test.C#RepeatedType.apply(String*).
types.Test.C#RepeatedType.toString(). => types.Test.C#RepeatedType.
types.Test.C#RepeatedType.unapplySeq(RepeatedType). => types.Test.C#RepeatedType.
types.Test.C#RepeatedType.unapplySeq(RepeatedType).(x$0) => types.Test.C#RepeatedType.unapplySeq(RepeatedType).
types.Test.C#TypeType. => types.Test.C#
types.Test.C#TypeType.T1# => types.Test.C#TypeType.
types.Test.C#TypeType.T4# => types.Test.C#TypeType.
types.Test.C#TypeType.T5# => types.Test.C#TypeType.
types.Test.C#TypeType.T5#[U] => types.Test.C#TypeType.T5#
types.Test.C#TypeType.m2(). => types.Test.C#TypeType.
types.Test.C#TypeType.m2().[T2] => types.Test.C#TypeType.m2().
types.Test.C#TypeType.m3(). => types.Test.C#TypeType.
types.Test.C#TypeType.m3().[M3] => types.Test.C#TypeType.m3().
types.Test.C#TypeType.m3().[M3][_] => types.Test.C#TypeType.m3().[M3]
types.Test.C#`<init>`(). => types.Test.C#
types.Test.C#annType1(). => types.Test.C#
types.Test.C#annType1. => types.Test.C#
types.Test.C#annType2(). => types.Test.C#
types.Test.C#annType2. => types.Test.C#
types.Test.C#compoundType1(). => types.Test.C#
types.Test.C#compoundType1. => types.Test.C#
types.Test.C#compoundType2(). => types.Test.C#
types.Test.C#compoundType2. => types.Test.C#
types.Test.C#compoundType3(). => types.Test.C#
types.Test.C#compoundType3. => types.Test.C#
types.Test.C#existentialType1(). => types.Test.C#
types.Test.C#existentialType1. => types.Test.C#
types.Test.C#existentialType1.T# => types.Test.C#existentialType1.
types.Test.C#p(). => types.Test.C#
types.Test.C#p. => types.Test.C#
types.Test.C#singleType1(). => types.Test.C#
types.Test.C#singleType1. => types.Test.C#
types.Test.C#singleType2(). => types.Test.C#
types.Test.C#singleType2. => types.Test.C#
types.Test.C#superType1(). => types.Test.C#
types.Test.C#superType1. => types.Test.C#
types.Test.C#superType2(). => types.Test.C#
types.Test.C#superType2. => types.Test.C#
types.Test.C#superType3(). => types.Test.C#
types.Test.C#superType3. => types.Test.C#
types.Test.C#thisType1(). => types.Test.C#
types.Test.C#thisType1. => types.Test.C#
types.Test.C#thisType2(). => types.Test.C#
types.Test.C#thisType2. => types.Test.C#
types.Test.C#typeLambda1(). => types.Test.C#
types.Test.C#typeLambda1().[M] => types.Test.C#typeLambda1().
types.Test.C#typeLambda1().[M][_] => types.Test.C#typeLambda1().[M]
types.Test.C#typeRef1(). => types.Test.C#
types.Test.C#typeRef1. => types.Test.C#
types.Test.C#typeRef2(). => types.Test.C#
types.Test.C#typeRef2. => types.Test.C#
types.Test.C#typeRef3(). => types.Test.C#
types.Test.C#typeRef3. => types.Test.C#
types.Test.C#typeRef4(). => types.Test.C#
types.Test.C#typeRef4. => types.Test.C#
types.Test.C#x(). => types.Test.C#
types.Test.C#x. => types.Test.C#
types.Test.Literal. => types.Test.
types.Test.Literal.bool(). => types.Test.Literal.
types.Test.Literal.bool. => types.Test.Literal.
types.Test.Literal.char(). => types.Test.Literal.
types.Test.Literal.char. => types.Test.Literal.
types.Test.Literal.clazzOf(). => types.Test.Literal.
types.Test.Literal.clazzOf. => types.Test.Literal.
types.Test.Literal.double(). => types.Test.Literal.
types.Test.Literal.double. => types.Test.Literal.
types.Test.Literal.float(). => types.Test.Literal.
types.Test.Literal.float. => types.Test.Literal.
types.Test.Literal.int(). => types.Test.Literal.
types.Test.Literal.int. => types.Test.Literal.
types.Test.Literal.javaEnum(?). => types.Test.Literal.
types.Test.Literal.javaEnum. => types.Test.Literal.
types.Test.Literal.long(). => types.Test.Literal.
types.Test.Literal.long. => types.Test.Literal.
types.Test.Literal.nil(). => types.Test.Literal.
types.Test.Literal.nil. => types.Test.Literal.
types.Test.Literal.string(). => types.Test.Literal.
types.Test.Literal.string. => types.Test.Literal.
types.Test.Literal.unit(). => types.Test.Literal.
types.Test.Literal.unit. => types.Test.Literal.
types.Test.M# => types.Test.
types.Test.M#`<init>`(). => types.Test.M#
types.Test.M#m(). => types.Test.M#
types.Test.N# => types.Test.
types.Test.N#`<init>`(). => types.Test.N#
types.Test.N#n(). => types.Test.N#
types.ann# => types.
types.ann#[T] => types.ann#
types.ann#`<init>`(T). => types.ann#
types.ann#`<init>`(T).(x) => types.ann#`<init>`(T).
types.ann#x. => types.ann#
types.ann1# => types.
types.ann1#`<init>`(). => types.ann1#
types.ann2# => types.
types.ann2#`<init>`(). => types.ann2#