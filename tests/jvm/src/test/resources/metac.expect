semanticdb/integration/src/main/scala/example/Accessibility.scala
-----------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Accessibility.scala
Text => non-empty
Language => Scala
Symbols => 10 entries
Occurrences => 19 entries

Symbols:
example. => package example
example.Acc# => class Acc extends AnyRef { +8 decls }
  AnyRef => scala.AnyRef#
example.Acc#`<init>`(). => primary ctor <init>()
example.Acc#m1(). => private method m1: Nothing
  Nothing => scala.Nothing#
example.Acc#m2(). => private[this] method m2: Nothing
  Nothing => scala.Nothing#
example.Acc#m3(). => private[Acc] method m3: Nothing
  Acc => example.Acc#
  Nothing => scala.Nothing#
example.Acc#m4(). => protected method m4: Nothing
  Nothing => scala.Nothing#
example.Acc#m5(). => protected[this] method m5: Nothing
  Nothing => scala.Nothing#
example.Acc#m6(). => protected[example] method m6: Nothing
  example => example.
  Nothing => scala.Nothing#
example.Acc#m7(). => method m7: Nothing
  Nothing => scala.Nothing#

Occurrences:
[0:8..0:15): example <= example.
[2:6..2:9): Acc <= example.Acc#
[2:10..2:10):  <= example.Acc#`<init>`().
[3:14..3:16): m1 <= example.Acc#m1().
[3:19..3:22): ??? => scala.Predef.`???`().
[4:20..4:22): m2 <= example.Acc#m2().
[4:25..4:28): ??? => scala.Predef.`???`().
[5:10..5:13): Acc => example.Acc#
[5:19..5:21): m3 <= example.Acc#m3().
[5:24..5:27): ??? => scala.Predef.`???`().
[6:16..6:18): m4 <= example.Acc#m4().
[6:21..6:24): ??? => scala.Predef.`???`().
[7:22..7:24): m5 <= example.Acc#m5().
[7:27..7:30): ??? => scala.Predef.`???`().
[8:12..8:19): example => example.
[8:25..8:27): m6 <= example.Acc#m6().
[8:30..8:33): ??? => scala.Predef.`???`().
[9:6..9:8): m7 <= example.Acc#m7().
[9:11..9:14): ??? => scala.Predef.`???`().

semanticdb/integration/src/main/scala/example/Advanced.scala
------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Advanced.scala
Text => non-empty
Language => Scala
Symbols => 41 entries
Occurrences => 109 entries
Synthetics => 1 entries

Symbols:
advanced. => package advanced
advanced.C# => class C[T] extends AnyRef { +2 decls }
  T => advanced.C#[T]
  AnyRef => scala.AnyRef#
advanced.C#[T] => typeparam T
advanced.C#`<init>`(). => primary ctor <init>()
advanced.C#t(). => method t: T
  T => advanced.C#[T]
advanced.D# => class D[CC[unknown _]] extends C[CC[_] forSome { type _ }] { +1 decls }
  CC => advanced.D#[CC]
  _ => advanced.D#[CC][_]
  C => advanced.C#
  _ => local14
advanced.D#[CC] => typeparam CC[unknown _]
  _ => advanced.D#[CC][_]
advanced.D#`<init>`(). => primary ctor <init>()
advanced.Existential# => class Existential extends AnyRef { +4 decls }
  AnyRef => scala.AnyRef#
advanced.Existential#`<init>`(). => primary ctor <init>()
advanced.Existential#e1(). => method e1: List[_] forSome { type _ }
  List => scala.package.List#
  _ => local7
advanced.Existential#e2(). => method e2: C[List[T] forSome { type T }]
  C => advanced.C#
  List => scala.package.List#
  T => local8
advanced.Existential#e4(). => method e4: U[Int] forSome { type U[T <: Int] => Any }
  U => local10
  Int => scala.Int#
  T => local11
  Any => scala.Any#
advanced.Structural# => class Structural extends AnyRef { +4 decls }
  AnyRef => scala.AnyRef#
advanced.Structural#`<init>`(). => primary ctor <init>()
advanced.Structural#s1(). => method s1: AnyRef { val def x: Int }
  AnyRef => scala.AnyRef#
  x => local0
  Int => scala.Int#
advanced.Structural#s2(). => method s2: AnyRef { val def x: Int }
  AnyRef => scala.AnyRef#
  x => local1
  Int => scala.Int#
advanced.Structural#s3(). => method s3: AnyRef { def m(x: Int): Int }
  AnyRef => scala.AnyRef#
  m => local3
  x => local4
  Int => scala.Int#
advanced.Test. => final object Test extends AnyRef { +13 decls }
  AnyRef => scala.AnyRef#
advanced.Test.e(). => val method e: Existential
  Existential => advanced.Existential#
advanced.Test.e1(). => val method e1: List[Any]
  List => scala.collection.immutable.List#
  Any => scala.Any#
advanced.Test.e1x(). => val method e1x: Any
  Any => scala.Any#
advanced.Test.e2(). => val method e2: C[List[T] forSome { type T }]
  C => advanced.C#
  List => scala.package.List#
  T => local8
advanced.Test.e2x(). => val method e2x: List[Any]
  List => scala.collection.immutable.List#
  Any => scala.Any#
advanced.Test.e2xx(). => val method e2xx: Any
  Any => scala.Any#
advanced.Test.s(). => val method s: Structural
  Structural => advanced.Structural#
advanced.Test.s1(). => val method s1: AnyRef { val def x: Int }
  AnyRef => scala.AnyRef#
  x => local0
  Int => scala.Int#
advanced.Test.s1x(). => val method s1x: Int
  Int => scala.Int#
advanced.Test.s2(). => val method s2: AnyRef { val def x: Int }
  AnyRef => scala.AnyRef#
  x => local1
  Int => scala.Int#
advanced.Test.s2x(). => val method s2x: Int
  Int => scala.Int#
advanced.Test.s3(). => val method s3: AnyRef { def m(x: Int): Int }
  AnyRef => scala.AnyRef#
  m => local3
  x => local4
  Int => scala.Int#
advanced.Test.s3x(). => val method s3x: Int
  Int => scala.Int#
local0 => abstract val method x: Int
  Int => scala.Int#
local12 => abstract type U[T <: Int]
  T => local13
  Int => scala.Int#
local13 => typeparam T <: Int
  Int => scala.Int#
local15 => val local e3: List[local16]
  List => scala.package.List#
  local16 => local16
local17 => val local e3x: local16
  local16 => local16
local2 => val method x: Int
  Int => scala.Int#
local5 => method m(x: Int): Int
  x => local6
  Int => scala.Int#
local6 => param x: Int
  Int => scala.Int#
local9 => abstract type T

Occurrences:
[0:8..0:16): advanced <= advanced.
[2:7..2:12): scala => scala.
[2:13..2:21): language => scala.language.
[2:22..2:34): existentials => scala.language.existentials().
[3:7..3:12): scala => scala.
[3:13..3:21): language => scala.language.
[3:22..3:33): higherKinds => scala.language.higherKinds().
[4:7..4:12): scala => scala.
[4:13..4:21): language => scala.language.
[4:22..4:37): reflectiveCalls => scala.language.reflectiveCalls().
[6:6..6:7): C <= advanced.C#
[6:8..6:9): T <= advanced.C#[T]
[6:11..6:11):  <= advanced.C#`<init>`().
[7:6..7:7): t <= advanced.C#t().
[7:9..7:10): T => advanced.C#[T]
[7:13..7:16): ??? => scala.Predef.`???`().
[10:6..10:16): Structural <= advanced.Structural#
[10:17..10:17):  <= advanced.Structural#`<init>`().
[11:6..11:8): s1 <= advanced.Structural#s1().
[11:16..11:17): x <= local0
[11:19..11:22): Int => scala.Int#
[11:27..11:30): ??? => scala.Predef.`???`().
[12:6..12:8): s2 <= advanced.Structural#s2().
[12:21..12:22): x <= local2
[12:24..12:27): Int => scala.Int#
[12:30..12:33): ??? => scala.Predef.`???`().
[13:6..13:8): s3 <= advanced.Structural#s3().
[13:21..13:22): m <= local5
[13:23..13:24): x <= local6
[13:26..13:29): Int => scala.Int#
[13:32..13:35): Int => scala.Int#
[13:38..13:41): ??? => scala.Predef.`???`().
[16:6..16:17): Existential <= advanced.Existential#
[16:18..16:18):  <= advanced.Existential#`<init>`().
[17:6..17:8): e1 <= advanced.Existential#e1().
[17:10..17:14): List => scala.package.List#
[17:20..17:23): ??? => scala.Predef.`???`().
[18:6..18:8): e2 <= advanced.Existential#e2().
[18:10..18:11): C => advanced.C#
[18:12..18:16): List => scala.package.List#
[18:17..18:18): T => local9
[18:35..18:36): T <= local9
[18:42..18:45): ??? => scala.Predef.`???`().
[19:6..19:8): e4 <= advanced.Existential#e4().
[19:10..19:11): U => local12
[19:12..19:15): Int => scala.Int#
[19:32..19:33): U <= local12
[19:34..19:35): T <= local13
[19:39..19:42): Int => scala.Int#
[19:48..19:51): ??? => scala.Predef.`???`().
[22:6..22:7): D <= advanced.D#
[22:8..22:10): CC <= advanced.D#[CC]
[22:15..22:15):  <= advanced.D#`<init>`().
[22:23..22:24): C => advanced.C#
[22:25..22:27): CC => advanced.D#[CC]
[23:0..23:0):  => advanced.C#`<init>`().
[24:7..24:11): Test <= advanced.Test.
[25:6..25:7): s <= advanced.Test.s().
[25:14..25:24): Structural => advanced.Structural#
[25:24..25:24):  => advanced.Structural#`<init>`().
[26:6..26:8): s1 <= advanced.Test.s1().
[26:11..26:12): s => advanced.Test.s().
[26:13..26:15): s1 => advanced.Structural#s1().
[27:6..27:9): s1x <= advanced.Test.s1x().
[27:12..27:13): s => advanced.Test.s().
[27:14..27:16): s1 => advanced.Structural#s1().
[28:6..28:8): s2 <= advanced.Test.s2().
[28:11..28:12): s => advanced.Test.s().
[28:13..28:15): s2 => advanced.Structural#s2().
[29:6..29:9): s2x <= advanced.Test.s2x().
[29:12..29:13): s => advanced.Test.s().
[29:14..29:16): s2 => advanced.Structural#s2().
[30:6..30:8): s3 <= advanced.Test.s3().
[30:11..30:12): s => advanced.Test.s().
[30:13..30:15): s3 => advanced.Structural#s3().
[31:6..31:9): s3x <= advanced.Test.s3x().
[31:12..31:13): s => advanced.Test.s().
[31:14..31:16): s3 => advanced.Structural#s3().
[31:19..31:22): ??? => scala.Predef.`???`().
[33:6..33:7): e <= advanced.Test.e().
[33:14..33:25): Existential => advanced.Existential#
[33:25..33:25):  => advanced.Existential#`<init>`().
[34:6..34:8): e1 <= advanced.Test.e1().
[34:11..34:12): e => advanced.Test.e().
[34:13..34:15): e1 => advanced.Existential#e1().
[35:6..35:9): e1x <= advanced.Test.e1x().
[35:12..35:13): e => advanced.Test.e().
[35:14..35:16): e1 => advanced.Existential#e1().
[35:17..35:21): head => scala.collection.IterableLike#head().
[36:6..36:8): e2 <= advanced.Test.e2().
[36:11..36:12): e => advanced.Test.e().
[36:13..36:15): e2 => advanced.Existential#e2().
[37:6..37:9): e2x <= advanced.Test.e2x().
[37:12..37:13): e => advanced.Test.e().
[37:14..37:16): e2 => advanced.Existential#e2().
[37:17..37:18): t => advanced.C#t().
[38:6..38:10): e2xx <= advanced.Test.e2xx().
[38:13..38:14): e => advanced.Test.e().
[38:15..38:17): e2 => advanced.Existential#e2().
[38:18..38:19): t => advanced.C#t().
[38:20..38:24): head => scala.collection.IterableLike#head().
[39:2..39:9): locally => scala.Predef.locally().
[40:5..40:8): ??? => scala.Predef.`???`().
[40:11..40:14): Any => scala.Any#
[41:11..41:13): e3 <= local15
[41:15..41:19): List => scala.package.List#
[42:12..42:15): e3x <= local17
[42:18..42:20): e3 => local15
[42:21..42:25): head => scala.collection.IterableLike#head().

Synthetics:
[39:9..39:9):  => *[Unit]
  [0:0..0:1): * => _star_.
  [0:2..0:6): Unit => scala.Unit#

semanticdb/integration/src/main/scala/example/Anonymous.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Anonymous.scala
Text => non-empty
Language => Scala
Symbols => 6 entries
Occurrences => 21 entries
Synthetics => 2 entries

Symbols:
_empty_.C# => class C extends AnyRef { +3 decls }
  AnyRef => scala.AnyRef#
_empty_.C#`<init>`(). => primary ctor <init>()
_empty_.C#m1(). => method m1[T[unknown _], unknown _]: Nothing
  T => _empty_.C#m1().[T]
  _ => _empty_.C#m1().[T][_]
  _ => _empty_.C#m1().[_]
  Nothing => scala.Nothing#
_empty_.C#m1().[T] => typeparam T[unknown _]
  _ => _empty_.C#m1().[T][_]
_empty_.C#m2(). => method m2: Map[_, List[_] forSome { type _ }] forSome { type _ }
  Map => scala.Predef.Map#
  _ => local0
  List => scala.package.List#
  _ => local1
local2 => val local x: Function1[Int, Int]
  Function1 => scala.Function1#
  Int => scala.Int#

Occurrences:
[0:7..0:12): scala => scala.
[0:13..0:21): language => scala.language.
[0:22..0:33): higherKinds => scala.language.higherKinds().
[2:6..2:7): C <= _empty_.C#
[2:8..2:8):  <= _empty_.C#`<init>`().
[3:8..3:9): C => _empty_.C#
[5:6..5:8): m1 <= _empty_.C#m1().
[5:9..5:10): T <= _empty_.C#m1().[T]
[5:20..5:23): ??? => scala.Predef.`???`().
[6:6..6:8): m2 <= _empty_.C#m2().
[6:10..6:13): Map => scala.Predef.Map#
[6:17..6:21): List => scala.package.List#
[6:28..6:31): ??? => scala.Predef.`???`().
[7:2..7:9): locally => scala.Predef.locally().
[8:4..8:7): ??? => scala.Predef.`???`().
[8:24..8:28): List => scala.package.List#
[10:2..10:9): locally => scala.Predef.locally().
[11:8..11:9): x <= local2
[11:11..11:14): Int => scala.Int#
[11:18..11:21): Int => scala.Int#
[11:29..11:32): ??? => scala.Predef.`???`().

Synthetics:
[7:9..7:9):  => *[Unit]
  [0:0..0:1): * => _star_.
  [0:2..0:6): Unit => scala.Unit#
[10:9..10:9):  => *[Unit]
  [0:0..0:1): * => _star_.
  [0:2..0:6): Unit => scala.Unit#

semanticdb/integration/src/main/scala/example/Classes.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Classes.scala
Text => non-empty
Language => Scala
Symbols => 109 entries
Occurrences => 57 entries
Synthetics => 3 entries

Symbols:
classes. => package classes
classes.C1# => final class C1 extends AnyVal { +4 decls }
  AnyVal => scala.AnyVal#
classes.C1#`<init>`(). => primary ctor <init>(val x1: Int)
  x1 => classes.C1#`<init>`().(x1)
  Int => scala.Int#
classes.C1#`<init>`().(x1) => val param x1: Int
  Int => scala.Int#
classes.C1#equals(). => method equals(x$1: Any): Boolean
  x$1 => classes.C1#equals().(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
classes.C1#equals().(x$1) => param x$1: Any
  Any => scala.Any#
classes.C1#hashCode(). => method hashCode(): Int
  Int => scala.Int#
classes.C1#x1(). => val method x1: Int
  Int => scala.Int#
classes.C2# => final class C2 extends AnyVal { +4 decls }
  AnyVal => scala.AnyVal#
classes.C2#`<init>`(). => primary ctor <init>(val x2: Int)
  x2 => classes.C2#`<init>`().(x2)
  Int => scala.Int#
classes.C2#`<init>`().(x2) => val param x2: Int
  Int => scala.Int#
classes.C2#equals(). => method equals(x$1: Any): Boolean
  x$1 => classes.C2#equals().(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
classes.C2#equals().(x$1) => param x$1: Any
  Any => scala.Any#
classes.C2#hashCode(). => method hashCode(): Int
  Int => scala.Int#
classes.C2#x2(). => val method x2: Int
  Int => scala.Int#
classes.C2. => final object C2 extends AnyRef
  AnyRef => scala.AnyRef#
classes.C3# => case class C3 extends AnyRef with Product with Serializable { +12 decls }
  AnyRef => scala.AnyRef#
  Product => scala.Product#
  Serializable => scala.Serializable#
classes.C3#`<init>`(). => primary ctor <init>(val x: Int)
  x => classes.C3#`<init>`().(x)
  Int => scala.Int#
classes.C3#`<init>`().(x) => val param x: Int
  Int => scala.Int#
classes.C3#canEqual(). => method canEqual(x$1: Any): Boolean
  x$1 => classes.C3#canEqual().(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
classes.C3#canEqual().(x$1) => param x$1: Any
  Any => scala.Any#
classes.C3#copy$default$1(). => method copy$default$1: Int @uncheckedVariance
  Int => scala.Int#
  uncheckedVariance => scala.annotation.unchecked.uncheckedVariance#
classes.C3#copy(). => method copy(unknown x): C3
  x => classes.C3#copy().(x)
  C3 => classes.C3#
classes.C3#equals(). => method equals(x$1: Any): Boolean
  x$1 => classes.C3#equals().(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
classes.C3#equals().(x$1) => param x$1: Any
  Any => scala.Any#
classes.C3#hashCode(). => method hashCode(): Int
  Int => scala.Int#
classes.C3#productArity(). => method productArity: Int
  Int => scala.Int#
classes.C3#productElement(). => method productElement(x$1: Int): Any
  x$1 => classes.C3#productElement().(x$1)
  Int => scala.Int#
  Any => scala.Any#
classes.C3#productElement().(x$1) => param x$1: Int
  Int => scala.Int#
classes.C3#productIterator(). => method productIterator: Iterator[Any]
  Iterator => scala.collection.Iterator#
  Any => scala.Any#
classes.C3#productPrefix(). => method productPrefix: String
  String => java.lang.String#
classes.C3#toString(). => method toString(): String
  String => java.lang.String#
classes.C3#x(). => val method x: Int
  Int => scala.Int#
classes.C3. => final object C3 extends AbstractFunction1[Int, C3] with Serializable { +4 decls }
  AbstractFunction1 => scala.runtime.AbstractFunction1#
  Int => scala.Int#
  C3 => classes.C3#
  Serializable => scala.Serializable#
classes.C3.apply(). => method apply(unknown x): C3
  x => classes.C3.apply().(x)
  C3 => classes.C3#
classes.C3.readResolve(). => private method readResolve(): Object
  Object => java.lang.Object#
classes.C3.toString(). => final method toString(): String
  String => java.lang.String#
classes.C3.unapply(). => method unapply(x$0: C3): Option[Int]
  x$0 => classes.C3.unapply().(x$0)
  C3 => classes.C3#
  Option => scala.Option#
  Int => scala.Int#
classes.C3.unapply().(x$0) => param x$0: C3
  C3 => classes.C3#
classes.C4# => case class C4 extends AnyRef with Product with Serializable { +12 decls }
  AnyRef => scala.AnyRef#
  Product => scala.Product#
  Serializable => scala.Serializable#
classes.C4#`<init>`(). => primary ctor <init>(val x: Int)
  x => classes.C4#`<init>`().(x)
  Int => scala.Int#
classes.C4#`<init>`().(x) => val param x: Int
  Int => scala.Int#
classes.C4#canEqual(). => method canEqual(x$1: Any): Boolean
  x$1 => classes.C4#canEqual().(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
classes.C4#canEqual().(x$1) => param x$1: Any
  Any => scala.Any#
classes.C4#copy$default$1(). => method copy$default$1: Int @uncheckedVariance
  Int => scala.Int#
  uncheckedVariance => scala.annotation.unchecked.uncheckedVariance#
classes.C4#copy(). => method copy(unknown x): C4
  x => classes.C4#copy().(x)
  C4 => classes.C4#
classes.C4#equals(). => method equals(x$1: Any): Boolean
  x$1 => classes.C4#equals().(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
classes.C4#equals().(x$1) => param x$1: Any
  Any => scala.Any#
classes.C4#hashCode(). => method hashCode(): Int
  Int => scala.Int#
classes.C4#productArity(). => method productArity: Int
  Int => scala.Int#
classes.C4#productElement(). => method productElement(x$1: Int): Any
  x$1 => classes.C4#productElement().(x$1)
  Int => scala.Int#
  Any => scala.Any#
classes.C4#productElement().(x$1) => param x$1: Int
  Int => scala.Int#
classes.C4#productIterator(). => method productIterator: Iterator[Any]
  Iterator => scala.collection.Iterator#
  Any => scala.Any#
classes.C4#productPrefix(). => method productPrefix: String
  String => java.lang.String#
classes.C4#toString(). => method toString(): String
  String => java.lang.String#
classes.C4#x(). => val method x: Int
  Int => scala.Int#
classes.C4. => final object C4 extends AnyRef with Serializable { +3 decls }
  AnyRef => scala.AnyRef#
  Serializable => scala.Serializable#
classes.C4.apply(). => method apply(unknown x): C4
  x => classes.C4.apply().(x)
  C4 => classes.C4#
classes.C4.readResolve(). => private method readResolve(): Object
  Object => java.lang.Object#
classes.C4.unapply(). => method unapply(x$0: C4): Option[Int]
  x$0 => classes.C4.unapply().(x$0)
  C4 => classes.C4#
  Option => scala.Option#
  Int => scala.Int#
classes.C4.unapply().(x$0) => param x$0: C4
  C4 => classes.C4#
classes.C6# => case class C6 extends AnyRef with Product with Serializable { +12 decls }
  AnyRef => scala.AnyRef#
  Product => scala.Product#
  Serializable => scala.Serializable#
classes.C6#`<init>`(). => primary ctor <init>(val x: Int)
  x => classes.C6#`<init>`().(x)
  Int => scala.Int#
classes.C6#`<init>`().(x) => val param x: Int
  Int => scala.Int#
classes.C6#canEqual(). => method canEqual(x$1: Any): Boolean
  x$1 => classes.C6#canEqual().(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
classes.C6#canEqual().(x$1) => param x$1: Any
  Any => scala.Any#
classes.C6#copy$default$1(). => method copy$default$1: Int @uncheckedVariance
  Int => scala.Int#
  uncheckedVariance => scala.annotation.unchecked.uncheckedVariance#
classes.C6#copy(). => method copy(unknown x): C6
  x => classes.C6#copy().(x)
  C6 => classes.C6#
classes.C6#equals(). => method equals(x$1: Any): Boolean
  x$1 => classes.C6#equals().(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
classes.C6#equals().(x$1) => param x$1: Any
  Any => scala.Any#
classes.C6#hashCode(). => method hashCode(): Int
  Int => scala.Int#
classes.C6#productArity(). => method productArity: Int
  Int => scala.Int#
classes.C6#productElement(). => method productElement(x$1: Int): Any
  x$1 => classes.C6#productElement().(x$1)
  Int => scala.Int#
  Any => scala.Any#
classes.C6#productElement().(x$1) => param x$1: Int
  Int => scala.Int#
classes.C6#productIterator(). => method productIterator: Iterator[Any]
  Iterator => scala.collection.Iterator#
  Any => scala.Any#
classes.C6#productPrefix(). => method productPrefix: String
  String => java.lang.String#
classes.C6#toString(). => method toString(): String
  String => java.lang.String#
classes.C6. => final object C6 extends AbstractFunction1[Int, C6] with Serializable { +4 decls }
  AbstractFunction1 => scala.runtime.AbstractFunction1#
  Int => scala.Int#
  C6 => classes.C6#
  Serializable => scala.Serializable#
classes.C6.apply(). => method apply(unknown x): C6
  x => classes.C6.apply().(x)
  C6 => classes.C6#
classes.C6.readResolve(). => private method readResolve(): Object
  Object => java.lang.Object#
classes.C6.toString(). => final method toString(): String
  String => java.lang.String#
classes.C6.unapply(). => method unapply(x$0: C6): Option[Int]
  x$0 => classes.C6.unapply().(x$0)
  C6 => classes.C6#
  Option => scala.Option#
  Int => scala.Int#
classes.C6.unapply().(x$0) => param x$0: C6
  C6 => classes.C6#
classes.C7# => class C7 extends AnyRef { +2 decls }
  AnyRef => scala.AnyRef#
classes.C7#`<init>`(). => primary ctor <init>(x: Int)
  x => classes.C7#`<init>`().(x)
  Int => scala.Int#
classes.C7#`<init>`().(x) => param x: Int
  Int => scala.Int#
classes.C7#x(). => private[this] val method x: Int
  Int => scala.Int#
classes.C8# => class C8 extends AnyRef { +2 decls }
  AnyRef => scala.AnyRef#
classes.C8#`<init>`(). => primary ctor <init>(x: Int)
  x => classes.C8#`<init>`().(x)
  Int => scala.Int#
classes.C8#`<init>`().(x) => param x: Int
  Int => scala.Int#
classes.C8#x(). => private[this] val method x: Int
  Int => scala.Int#
classes.C9# => class C9 extends AnyRef { +3 decls }
  AnyRef => scala.AnyRef#
classes.C9#`<init>`(). => primary ctor <init>(var x: Int)
  x => classes.C9#`<init>`().(x)
  Int => scala.Int#
classes.C9#`<init>`().(x) => var param x: Int
  Int => scala.Int#
classes.C9#`x_=`(). => private[this] var method x_=(x$1: Int): Unit
  x$1 => classes.C9#`x_=`().(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
classes.C9#`x_=`().(x$1) => param x$1: Int
  Int => scala.Int#
classes.C9#x(). => private[this] var method x: Int
  Int => scala.Int#
classes.M. => final object M extends AnyRef { +2 decls }
  AnyRef => scala.AnyRef#
classes.M.C5# => implicit class C5 extends AnyRef { +2 decls }
  AnyRef => scala.AnyRef#
classes.M.C5#`<init>`(). => primary ctor <init>(x: Int)
  x => classes.M.C5#`<init>`().(x)
  Int => scala.Int#
classes.M.C5#`<init>`().(x) => param x: Int
  Int => scala.Int#
classes.M.C5#x(). => private[this] val method x: Int
  Int => scala.Int#
classes.M.C5(). => implicit method C5(unknown x): C5
  x => classes.M.C5().(x)
  C5 => classes.M.C5#
classes.N. => final object N extends AnyRef { +2 decls }
  AnyRef => scala.AnyRef#
classes.N.anonClass(). => val method anonClass: C7 { val def local: Nothing }
  C7 => classes.C7#
  local => local1
  Nothing => scala.Nothing#
classes.N.anonFun(). => val method anonFun: List[Int]
  List => scala.collection.immutable.List#
  Int => scala.Int#
local0 => val method local: Nothing
  Nothing => scala.Nothing#
local2 => param i: Int
  Int => scala.Int#
local3 => val local local: Int
  Int => scala.Int#

Occurrences:
[0:8..0:15): classes <= classes.
[2:6..2:8): C1 <= classes.C1#
[2:8..2:8):  <= classes.C1#`<init>`().
[2:13..2:15): x1 <= classes.C1#x1().
[2:17..2:20): Int => scala.Int#
[2:30..2:36): AnyVal => scala.AnyVal#
[3:0..3:0):  => scala.AnyVal#`<init>`().
[4:6..4:8): C2 <= classes.C2#
[4:8..4:8):  <= classes.C2#`<init>`().
[4:13..4:15): x2 <= classes.C2#x2().
[4:17..4:20): Int => scala.Int#
[4:30..4:36): AnyVal => scala.AnyVal#
[4:36..4:36):  => scala.AnyVal#`<init>`().
[5:7..5:9): C2 <= classes.C2.
[7:11..7:13): C3 <= classes.C3#
[7:13..7:13):  <= classes.C3#`<init>`().
[7:14..7:15): x <= classes.C3#x().
[7:17..7:20): Int => scala.Int#
[9:11..9:13): C4 <= classes.C4#
[9:13..9:13):  <= classes.C4#`<init>`().
[9:14..9:15): x <= classes.C4#x().
[9:17..9:20): Int => scala.Int#
[10:7..10:9): C4 <= classes.C4.
[12:7..12:8): M <= classes.M.
[13:17..13:19): C5 <= classes.M.C5#
[13:19..13:19):  <= classes.M.C5#`<init>`().
[13:20..13:21): x <= classes.M.C5#x().
[13:23..13:26): Int => scala.Int#
[16:11..16:13): C6 <= classes.C6#
[16:13..16:13):  <= classes.C6#`<init>`().
[16:26..16:27): x <= classes.C6#
[16:29..16:32): Int => scala.Int#
[18:6..18:8): C7 <= classes.C7#
[18:8..18:8):  <= classes.C7#`<init>`().
[18:9..18:10): x <= classes.C7#x().
[18:12..18:15): Int => scala.Int#
[20:6..20:8): C8 <= classes.C8#
[20:8..20:8):  <= classes.C8#`<init>`().
[20:27..20:28): x <= classes.C8#x().
[20:30..20:33): Int => scala.Int#
[22:6..22:8): C9 <= classes.C9#
[22:8..22:8):  <= classes.C9#`<init>`().
[22:27..22:28): x <= classes.C9#x().
[22:30..22:33): Int => scala.Int#
[24:7..24:8): N <= classes.N.
[25:6..25:15): anonClass <= classes.N.anonClass().
[25:22..25:24): C7 => classes.C7#
[25:24..25:24):  => classes.C7#`<init>`().
[26:8..26:13): local <= local0
[26:16..26:19): ??? => scala.Predef.`???`().
[28:6..28:13): anonFun <= classes.N.anonFun().
[28:16..28:20): List => scala.collection.immutable.List.
[28:24..28:27): map => scala.collection.immutable.List#map().
[28:30..28:31): i <= local2
[29:8..29:13): local <= local3
[30:4..30:9): local => local3
[30:10..30:11): + => scala.Int#`+`(+4).

Synthetics:
[28:20..28:20):  => *.apply[Int]
  [0:0..0:1): * => _star_.
  [0:2..0:7): apply => scala.collection.immutable.List.apply().
  [0:8..0:11): Int => scala.Int#
[28:27..28:27):  => *[Int, List[Int]]
  [0:0..0:1): * => _star_.
  [0:2..0:5): Int => scala.Int#
  [0:7..0:11): List => scala.collection.immutable.List#
  [0:12..0:15): Int => scala.Int#
[31:3..31:3):  => *(scala.collection.immutable.List.canBuildFrom[Int])
  [0:0..0:1): * => _star_.
  [0:34..0:46): canBuildFrom => scala.collection.immutable.List.canBuildFrom().
  [0:47..0:50): Int => scala.Int#

semanticdb/integration/src/main/scala/example/Empty.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Empty.scala
Text => non-empty
Language => Scala
Symbols => 6 entries
Occurrences => 10 entries

Symbols:
_empty_.A# => class A extends AnyRef { +2 decls }
  AnyRef => scala.AnyRef#
_empty_.A#`<init>`(). => primary ctor <init>()
_empty_.A#b(). => method b: B
  B => _empty_.B#
_empty_.B# => class B extends AnyRef { +2 decls }
  AnyRef => scala.AnyRef#
_empty_.B#`<init>`(). => primary ctor <init>()
_empty_.B#a(). => method a: A
  A => _empty_.A#

Occurrences:
[0:6..0:7): A <= _empty_.A#
[0:8..0:8):  <= _empty_.A#`<init>`().
[1:6..1:7): b <= _empty_.A#b().
[1:9..1:10): B => _empty_.B#
[1:13..1:16): ??? => scala.Predef.`???`().
[4:6..4:7): B <= _empty_.B#
[4:8..4:8):  <= _empty_.B#`<init>`().
[5:6..5:7): a <= _empty_.B#a().
[5:9..5:10): A => _empty_.A#
[5:13..5:16): ??? => scala.Predef.`???`().

semanticdb/integration/src/main/scala/example/EmptyObject.scala
---------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/EmptyObject.scala
Text => non-empty
Language => Scala
Symbols => 2 entries
Occurrences => 2 entries

Symbols:
example. => package example
example.EmptyObject. => final object EmptyObject extends AnyRef
  AnyRef => scala.AnyRef#

Occurrences:
[0:8..0:15): example <= example.
[2:7..2:18): EmptyObject <= example.EmptyObject.

semanticdb/integration/src/main/scala/example/Example.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Example.scala
Text => non-empty
Language => Scala
Symbols => 6 entries
Occurrences => 24 entries
Diagnostics => 1 entries
Synthetics => 1 entries

Symbols:
example. => package example
example.Example. => final object Example extends AnyRef { +2 decls }
  AnyRef => scala.AnyRef#
example.Example.main(). => method main(args: Array[String]): Unit
  args => example.Example.main().(args)
  Array => scala.Array#
  String => scala.Predef.String#
  Unit => scala.Unit#
example.Example.main().(args) => param args: Array[String]
  Array => scala.Array#
  String => scala.Predef.String#
example.Example.x(). => val method x: ClassTag[Int]
  ClassTag => scala.reflect.ClassTag#
  Int => scala.Int#
local0 => selfparam self

Occurrences:
[0:8..0:15): example <= example.
[2:7..2:12): scala => scala.
[2:13..2:23): concurrent => scala.concurrent.
[2:24..2:30): Future => scala.concurrent.Future#
[2:24..2:30): Future => scala.concurrent.Future.
[4:7..4:14): Example <= example.Example.
[4:17..4:21): self <= local0
[5:6..5:11): scala => scala.
[5:12..5:22): collection => scala.collection.
[5:23..5:30): mutable => scala.collection.mutable.
[5:31..5:36): Stack => scala.collection.mutable.Stack#
[5:37..5:40): Int => scala.Int#
[5:41..5:41):  => scala.collection.mutable.Stack#`<init>`(+1).
[6:6..6:10): main <= example.Example.main().
[6:11..6:15): args <= example.Example.main().(args)
[6:17..6:22): Array => scala.Array#
[6:23..6:29): String => scala.Predef.String#
[6:33..6:37): Unit => scala.Unit#
[7:4..7:11): println => scala.Predef.println(+1).
[9:6..9:7): x <= example.Example.x().
[9:10..9:15): scala => scala.
[9:16..9:23): reflect => scala.reflect.
[9:24..9:32): classTag => scala.reflect.package.classTag().
[9:33..9:36): Int => scala.Int#

Diagnostics:
[2:24..2:30) [warning] Unused import

Synthetics:
[9:37..9:37):  => *(((ClassTag.Int): ClassTag[Int]))
  [0:0..0:1): * => _star_.
  [0:13..0:16): Int => scala.reflect.ClassTag.Int().
  [0:19..0:27): ClassTag => scala.reflect.ClassTag#
  [0:28..0:31): Int => scala.Int#
semanticdb/integration/src/main/scala/example/Example.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Example.scala
Text => empty
Language => Scala
Diagnostics => 1 entries

Diagnostics:
[5:6..5:41) [warning] class Stack in package mutable is deprecated (since 2.12.0): Stack is an inelegant and potentially poorly-performing wrapper around List. Use a List assigned to a var instead.

semanticdb/integration/src/main/scala/example/Flags.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Flags.scala
Text => non-empty
Language => Scala
Symbols => 58 entries
Occurrences => 71 entries
Synthetics => 2 entries

Symbols:
flags. => package flags
flags.p.package. => final package object p extends AnyRef { +16 decls }
  AnyRef => scala.AnyRef#
flags.p.package.AA# => class AA extends AnyRef { +5 decls }
  AnyRef => scala.AnyRef#
flags.p.package.AA#`<init>`(). => primary ctor <init>(x: Int, val y: Int, var z: Int)
  x => flags.p.package.AA#`<init>`().(x)
  Int => scala.Int#
  y => flags.p.package.AA#`<init>`().(y)
  z => flags.p.package.AA#`<init>`().(z)
flags.p.package.AA#`<init>`().(x) => param x: Int
  Int => scala.Int#
flags.p.package.AA#`<init>`().(y) => val param y: Int
  Int => scala.Int#
flags.p.package.AA#`<init>`().(z) => var param z: Int
  Int => scala.Int#
flags.p.package.AA#`z_=`(). => var method z_=(x$1: Int): Unit
  x$1 => flags.p.package.AA#`z_=`().(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
flags.p.package.AA#`z_=`().(x$1) => param x$1: Int
  Int => scala.Int#
flags.p.package.AA#x(). => private[this] val method x: Int
  Int => scala.Int#
flags.p.package.AA#y(). => val method y: Int
  Int => scala.Int#
flags.p.package.AA#z(). => var method z: Int
  Int => scala.Int#
flags.p.package.C# => abstract class C[+T, -U, V] extends AnyRef { +6 decls }
  T => flags.p.package.C#[T]
  U => flags.p.package.C#[U]
  V => flags.p.package.C#[V]
  AnyRef => scala.AnyRef#
flags.p.package.C#[T] => covariant typeparam T
flags.p.package.C#[U] => contravariant typeparam U
flags.p.package.C#[V] => typeparam V
flags.p.package.C#`<init>`(). => primary ctor <init>(x: T, y: U, z: V)
  x => flags.p.package.C#`<init>`().(x)
  T => flags.p.package.C#[T]
  y => flags.p.package.C#`<init>`().(y)
  U => flags.p.package.C#[U]
  z => flags.p.package.C#`<init>`().(z)
  V => flags.p.package.C#[V]
flags.p.package.C#`<init>`().(x) => param x: T
  T => flags.p.package.C#[T]
flags.p.package.C#`<init>`().(y) => param y: U
  U => flags.p.package.C#[U]
flags.p.package.C#`<init>`().(z) => param z: V
  V => flags.p.package.C#[V]
flags.p.package.C#`<init>`(+1). => ctor <init>()
flags.p.package.C#w(). => abstract method w: Int
  Int => scala.Int#
flags.p.package.C#x(). => private[this] val method x: T
  T => flags.p.package.C#[T]
flags.p.package.C#y(). => private[this] val method y: U
  U => flags.p.package.C#[U]
flags.p.package.C#z(). => private[this] val method z: V
  V => flags.p.package.C#[V]
flags.p.package.S# => class S[@specialized T] extends AnyRef { +1 decls }
  T => flags.p.package.S#[T]
  specialized => scala.specialized#
  AnyRef => scala.AnyRef#
flags.p.package.S#[T] => @specialized typeparam T
  specialized => scala.specialized#
flags.p.package.S#`<init>`(). => primary ctor <init>()
flags.p.package.T1# => type T1 = Int
  Int => scala.Int#
flags.p.package.T2# => type T2[T] = S[T]
  T => flags.p.package.T2#[T]
  S => flags.p.package.S#
flags.p.package.T2#[T] => typeparam T
flags.p.package.U# => abstract type U <: Int
  Int => scala.Int#
flags.p.package.V# => abstract type V >: Int
  Int => scala.Int#
flags.p.package.X. => final case object X extends AnyRef with Product with Serializable { +8 decls }
  AnyRef => scala.AnyRef#
  Product => scala.Product#
  Serializable => scala.Serializable#
flags.p.package.X.canEqual(). => method canEqual(x$1: Any): Boolean
  x$1 => flags.p.package.X.canEqual().(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
flags.p.package.X.canEqual().(x$1) => param x$1: Any
  Any => scala.Any#
flags.p.package.X.hashCode(). => method hashCode(): Int
  Int => scala.Int#
flags.p.package.X.productArity(). => method productArity: Int
  Int => scala.Int#
flags.p.package.X.productElement(). => method productElement(x$1: Int): Any
  x$1 => flags.p.package.X.productElement().(x$1)
  Int => scala.Int#
  Any => scala.Any#
flags.p.package.X.productElement().(x$1) => param x$1: Int
  Int => scala.Int#
flags.p.package.X.productIterator(). => method productIterator: Iterator[Any]
  Iterator => scala.collection.Iterator#
  Any => scala.Any#
flags.p.package.X.productPrefix(). => method productPrefix: String
  String => java.lang.String#
flags.p.package.X.readResolve(). => private method readResolve(): Object
  Object => java.lang.Object#
flags.p.package.X.toString(). => method toString(): String
  String => java.lang.String#
flags.p.package.Y# => final class Y extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
flags.p.package.Y#`<init>`(). => primary ctor <init>()
flags.p.package.Z# => sealed trait Z extends AnyRef
  AnyRef => scala.AnyRef#
flags.p.package.`y_=`(). => protected var method y_=(x$1: Int): Unit
  x$1 => flags.p.package.`y_=`().(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
flags.p.package.`y_=`().(x$1) => param x$1: Int
  Int => scala.Int#
flags.p.package.m(). => macro m[TT]: Nothing
  TT => flags.p.package.m().[TT]
  Nothing => scala.Nothing#
flags.p.package.m().[TT] => typeparam TT
flags.p.package.x(). => private lazy val method x: Int
  Int => scala.Int#
flags.p.package.xs1.xs1. => val local xs1: Nothing
  Nothing => scala.Nothing#
flags.p.package.y(). => protected implicit var method y: Int
  Int => scala.Int#
flags.p.package.z(). => method z(pp: Int): Int
  pp => flags.p.package.z().(pp)
  Int => scala.Int#
flags.p.package.z().(pp) => param pp: Int
  Int => scala.Int#
local0 => val local xs2: Nothing
  Nothing => scala.Nothing#
local1 => abstract type t

Occurrences:
[0:8..0:13): flags <= flags.
[2:7..2:12): scala => scala.
[2:13..2:21): language => scala.language.
[2:22..2:34): experimental => scala.language.experimental.
[2:35..2:41): macros => scala.language.experimental.macros().
[4:15..4:16): p <= flags.p.package.
[5:19..5:20): x <= flags.p.package.x().
[6:25..6:26): y <= flags.p.package.y().
[6:28..6:31): Int => scala.Int#
[7:6..7:7): z <= flags.p.package.z().
[7:8..7:10): pp <= flags.p.package.z().(pp)
[7:12..7:15): Int => scala.Int#
[8:6..8:7): m <= flags.p.package.m().
[8:8..8:10): TT <= flags.p.package.m().[TT]
[8:20..8:23): ??? => scala.Predef.`???`().
[9:17..9:18): C <= flags.p.package.C#
[9:20..9:21): T <= flags.p.package.C#[T]
[9:24..9:25): U <= flags.p.package.C#[U]
[9:27..9:28): V <= flags.p.package.C#[V]
[9:29..9:29):  <= flags.p.package.C#`<init>`().
[9:30..9:31): x <= flags.p.package.C#x().
[9:33..9:34): T => flags.p.package.C#[T]
[9:36..9:37): y <= flags.p.package.C#y().
[9:39..9:40): U => flags.p.package.C#[U]
[9:42..9:43): z <= flags.p.package.C#z().
[9:45..9:46): V => flags.p.package.C#[V]
[10:8..10:12): this <= flags.p.package.C#`<init>`(+1).
[10:21..10:21):  => flags.p.package.C#`<init>`().
[10:22..10:25): ??? => scala.Predef.`???`().
[10:27..10:30): ??? => scala.Predef.`???`().
[10:32..10:35): ??? => scala.Predef.`???`().
[11:8..11:9): w <= flags.p.package.C#w().
[11:11..11:14): Int => scala.Int#
[13:7..13:9): T1 <= flags.p.package.T1#
[13:12..13:15): Int => scala.Int#
[14:7..14:9): T2 <= flags.p.package.T2#
[14:10..14:11): T <= flags.p.package.T2#[T]
[14:15..14:16): S => flags.p.package.S#
[14:17..14:18): T => flags.p.package.T2#[T]
[15:7..15:8): U <= flags.p.package.U#
[15:12..15:15): Int => scala.Int#
[16:7..16:8): V <= flags.p.package.V#
[16:12..16:15): Int => scala.Int#
[17:14..17:15): X <= flags.p.package.X.
[18:14..18:15): Y <= flags.p.package.Y#
[18:15..18:15):  <= flags.p.package.Y#`<init>`().
[19:15..19:16): Z <= flags.p.package.Z#
[20:8..20:10): AA <= flags.p.package.AA#
[20:10..20:10):  <= flags.p.package.AA#`<init>`().
[20:11..20:12): x <= flags.p.package.AA#x().
[20:14..20:17): Int => scala.Int#
[20:23..20:24): y <= flags.p.package.AA#y().
[20:26..20:29): Int => scala.Int#
[20:35..20:36): z <= flags.p.package.AA#z().
[20:38..20:41): Int => scala.Int#
[21:8..21:9): S <= flags.p.package.S#
[21:11..21:22): specialized => scala.specialized#
[21:23..21:23):  => scala.specialized#`<init>`(+2).
[21:23..21:24): T <= flags.p.package.S#[T]
[21:25..21:25):  <= flags.p.package.S#`<init>`().
[22:6..22:10): List => scala.collection.immutable.List.
[22:11..22:14): xs1 <= flags.p.package.xs1.xs1.
[22:18..22:21): ??? => scala.Predef.`???`().
[23:2..23:5): ??? => scala.Predef.`???`().
[23:19..23:23): List => scala.collection.immutable.List.
[23:24..23:27): xs2 <= local0
[23:32..23:35): ??? => scala.Predef.`???`().
[24:2..24:5): ??? => scala.Predef.`???`().
[24:22..24:26): List => scala.package.List#
[24:27..24:28): t <= local1
[24:33..24:36): ??? => scala.Predef.`???`().

Synthetics:
[22:10..22:10):  => *.unapplySeq[Nothing]
  [0:0..0:1): * => _star_.
  [0:2..0:12): unapplySeq => scala.collection.generic.SeqFactory#unapplySeq().
  [0:13..0:20): Nothing => scala.Nothing#
[23:23..23:23):  => *.unapplySeq[Nothing]
  [0:0..0:1): * => _star_.
  [0:2..0:12): unapplySeq => scala.collection.generic.SeqFactory#unapplySeq().
  [0:13..0:20): Nothing => scala.Nothing#

semanticdb/integration/src/main/scala/example/Imports.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Imports.scala
Text => non-empty
Language => Scala
Occurrences => 4 entries
Diagnostics => 1 entries

Occurrences:
[0:7..0:12): scala => scala.
[0:13..0:17): util => scala.util.
[0:18..0:25): control => scala.util.control.
[0:26..0:34): NonFatal => scala.util.control.NonFatal.

Diagnostics:
[0:26..0:34) [warning] Unused import

semanticdb/integration/src/main/scala/example/local-file.scala
--------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/local-file.scala
Text => non-empty
Language => Scala
Symbols => 4 entries
Occurrences => 7 entries
Synthetics => 1 entries

Symbols:
example. => package example
example.`local-file`# => class local-file extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
example.`local-file`#`<init>`(). => primary ctor <init>()
local0 => val local local: Int
  Int => scala.Int#

Occurrences:
[0:8..0:15): example <= example.
[2:6..2:18): `local-file` <= example.`local-file`#
[2:19..2:19):  <= example.`local-file`#`<init>`().
[3:2..3:9): locally => scala.Predef.locally().
[4:8..4:13): local <= local0
[5:4..5:9): local => local0
[5:10..5:11): + => scala.Int#`+`(+4).

Synthetics:
[3:9..3:9):  => *[Int]
  [0:0..0:1): * => _star_.
  [0:2..0:5): Int => scala.Int#

semanticdb/integration/src/main/scala/example/MetacJava.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/MetacJava.scala
Text => non-empty
Language => Scala
Symbols => 11 entries
Occurrences => 77 entries

Symbols:
example. => package example
example.MetacJava# => class MetacJava extends AnyRef { +9 decls }
  AnyRef => scala.AnyRef#
example.MetacJava#`<init>`(). => primary ctor <init>()
example.MetacJava#coin(). => val method coin: Coin
  Coin => com.javacp.Coin#
example.MetacJava#entry(). => val method entry: Entry[String, Integer]
  Entry => java.util.Map.Entry#
  String => java.lang.String#
  Integer => java.lang.Integer#
example.MetacJava#inner(). => val method inner: MetacJava
  MetacJava => com.javacp.MetacJava#
example.MetacJava#interface(). => val method interface: Interface
  Interface => com.javacp.Interface#
example.MetacJava#nonStatic(). => val method nonStatic: staticInner.NonStatic
  staticInner => example.MetacJava#staticInner().
  NonStatic => com.javacp.MetacJava.StaticInner#NonStatic#
example.MetacJava#overload1(). => val method overload1: inner.Overload1
  inner => example.MetacJava#inner().
  Overload1 => com.javacp.MetacJava#Overload1#
example.MetacJava#overload2(). => val method overload2: inner.Overload2
  inner => example.MetacJava#inner().
  Overload2 => com.javacp.MetacJava#Overload2#
example.MetacJava#staticInner(). => val method staticInner: StaticInner
  StaticInner => com.javacp.MetacJava.StaticInner#

Occurrences:
[0:8..0:15): example <= example.
[2:7..2:10): com => com.
[2:11..2:17): javacp => com.javacp.
[4:6..4:15): MetacJava <= example.MetacJava#
[4:16..4:16):  <= example.MetacJava#`<init>`().
[5:2..5:8): javacp => com.javacp.
[5:9..5:18): MetacJava => com.javacp.MetacJava#
[5:19..5:30): StaticInner => com.javacp.MetacJava#StaticInner#
[5:31..5:39): isStatic => com.javacp.MetacJava#StaticInner#isStatic().
[6:6..6:12): javacp => com.javacp.
[6:13..6:22): MetacJava => com.javacp.MetacJava#
[6:23..6:34): StaticInner => com.javacp.MetacJava.StaticInner#
[6:34..6:34):  => com.javacp.MetacJava.StaticInner#`<init>`().
[6:37..6:48): isNotStatic => com.javacp.MetacJava.StaticInner#isNotStatic().
[7:6..7:11): inner <= example.MetacJava#inner().
[7:18..7:24): javacp => com.javacp.
[7:25..7:34): MetacJava => com.javacp.MetacJava#
[7:34..7:34):  => com.javacp.MetacJava#`<init>`().
[8:6..8:15): overload1 <= example.MetacJava#overload1().
[8:22..8:27): inner => example.MetacJava#inner().
[8:28..8:37): Overload1 => com.javacp.MetacJava#Overload1#
[8:37..8:37):  => com.javacp.MetacJava#Overload1#`<init>`().
[9:6..9:15): overload2 <= example.MetacJava#overload2().
[9:22..9:27): inner => example.MetacJava#inner().
[9:28..9:37): Overload2 => com.javacp.MetacJava#Overload2#
[9:37..9:37):  => com.javacp.MetacJava#Overload2#`<init>`().
[10:2..10:7): inner => example.MetacJava#inner().
[10:8..10:16): overload => com.javacp.MetacJava#overload().
[10:21..10:30): overload1 => example.MetacJava#overload1().
[10:31..10:32): A => com.javacp.MetacJava#Overload1#A#
[10:32..10:32):  => com.javacp.MetacJava#Overload1#A#`<init>`().
[11:2..11:7): inner => example.MetacJava#inner().
[11:8..11:16): overload => com.javacp.MetacJava#overload(+1).
[11:21..11:30): overload2 => example.MetacJava#overload2().
[11:31..11:32): A => com.javacp.MetacJava#Overload2#A#
[11:32..11:32):  => com.javacp.MetacJava#Overload2#A#`<init>`().
[12:6..12:17): staticInner <= example.MetacJava#staticInner().
[12:24..12:30): javacp => com.javacp.
[12:31..12:40): MetacJava => com.javacp.MetacJava#
[12:41..12:52): StaticInner => com.javacp.MetacJava.StaticInner#
[12:52..12:52):  => com.javacp.MetacJava.StaticInner#`<init>`().
[13:6..13:15): nonStatic <= example.MetacJava#nonStatic().
[13:22..13:33): staticInner => example.MetacJava#staticInner().
[13:34..13:43): NonStatic => com.javacp.MetacJava.StaticInner#NonStatic#
[13:43..13:43):  => com.javacp.MetacJava.StaticInner#NonStatic#`<init>`().
[14:2..14:11): nonStatic => example.MetacJava#nonStatic().
[14:12..14:18): method => com.javacp.MetacJava.StaticInner#NonStatic#method().
[14:19..14:28): nonStatic => example.MetacJava#nonStatic().
[15:2..15:8): javacp => com.javacp.
[15:9..15:18): MetacJava => com.javacp.MetacJava#
[15:19..15:27): overload => com.javacp.MetacJava#overload(+2).
[15:32..15:38): javacp => com.javacp.
[15:39..15:48): MetacJava => com.javacp.MetacJava#
[15:49..15:58): Overload3 => com.javacp.MetacJava#Overload3#
[15:59..15:60): A => com.javacp.MetacJava#Overload3.A#
[15:60..15:60):  => com.javacp.MetacJava#Overload3.A#`<init>`().
[16:6..16:15): interface <= example.MetacJava#interface().
[16:17..16:23): javacp => com.javacp.
[16:24..16:33): Interface => com.javacp.Interface#
[17:6..17:10): coin <= example.MetacJava#coin().
[17:12..17:18): javacp => com.javacp.
[17:19..17:23): Coin => com.javacp.Coin#
[17:26..17:32): javacp => com.javacp.
[17:33..17:37): Coin => com.javacp.Coin#
[17:38..17:43): PENNY => com.javacp.Coin#PENNY.
[18:6..18:11): entry <= example.MetacJava#entry().
[18:13..18:17): java => java.
[18:18..18:22): util => java.util.
[18:23..18:26): Map => java.util.Map#
[18:27..18:32): Entry => java.util.Map.Entry#
[18:33..18:37): java => java.
[18:38..18:42): lang => java.lang.
[18:43..18:49): String => java.lang.String#
[18:51..18:58): Integer => java.lang.Integer#
[18:62..18:68): javacp => com.javacp.
[18:69..18:78): MetacJava => com.javacp.MetacJava#
[18:79..18:84): entry => com.javacp.MetacJava#entry.

semanticdb/integration/src/main/scala/example/Methods.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Methods.scala
Text => non-empty
Language => Scala
Symbols => 63 entries
Occurrences => 186 entries
Synthetics => 4 entries

Symbols:
example. => package example
example.MethodUsages# => class MethodUsages extends AnyRef { +2 decls }
  AnyRef => scala.AnyRef#
example.MethodUsages#`<init>`(). => primary ctor <init>()
example.MethodUsages#m(). => val method m: Methods[Int]
  Methods => example.Methods#
  Int => scala.Int#
example.Methods# => class Methods[T] extends AnyRef { +26 decls }
  T => example.Methods#[T]
  AnyRef => scala.AnyRef#
example.Methods#AList# => type AList[T] = List[T]
  T => example.Methods#AList#[T]
  List => example.Methods#List#
example.Methods#AList#[T] => typeparam T
example.Methods#List# => class List[T] extends AnyRef { +1 decls }
  T => example.Methods#List#[T]
  AnyRef => scala.AnyRef#
example.Methods#List#[T] => typeparam T
example.Methods#List#`<init>`(). => primary ctor <init>()
example.Methods#[T] => typeparam T
example.Methods#`<init>`(). => primary ctor <init>()
example.Methods#`m8().`(). => method m8().(): Nothing
  Nothing => scala.Nothing#
example.Methods#`m9().`# => class m9(). extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
example.Methods#`m9().`#`<init>`(). => primary ctor <init>()
example.Methods#m1(). => method m1: Nothing
  Nothing => scala.Nothing#
example.Methods#m10(). => method m10(x: AList[T]): Nothing
  x => example.Methods#m10().(x)
  AList => example.Methods#AList#
  T => example.Methods#[T]
  Nothing => scala.Nothing#
example.Methods#m10().(x) => param x: AList[T]
  AList => example.Methods#AList#
  T => example.Methods#[T]
example.Methods#m11(). => method m11(x: Predef.type): Nothing
  x => example.Methods#m11().(x)
  Predef => scala.Predef.
  Nothing => scala.Nothing#
example.Methods#m11().(x) => param x: Predef.type
  Predef => scala.Predef.
example.Methods#m11(+1). => method m11(x: Example.type): Nothing
  x => example.Methods#m11(+1).(x)
  Example => example.Example.
  Nothing => scala.Nothing#
example.Methods#m11(+1).(x) => param x: Example.type
  Example => example.Example.
example.Methods#m12a(). => method m12a(x: AnyRef {}): Nothing
  x => example.Methods#m12a().(x)
  AnyRef => scala.AnyRef#
  Nothing => scala.Nothing#
example.Methods#m12a().(x) => param x: AnyRef {}
  AnyRef => scala.AnyRef#
example.Methods#m12b(). => method m12b(x: AnyRef { val def x: Int }): Nothing
  x => example.Methods#m12b().(x)
  AnyRef => scala.AnyRef#
  x => local0
  Int => scala.Int#
  Nothing => scala.Nothing#
example.Methods#m12b().(x) => param x: AnyRef { val def x: Int }
  AnyRef => scala.AnyRef#
  x => local0
  Int => scala.Int#
example.Methods#m13(). => method m13(x: Int @unchecked): Nothing
  x => example.Methods#m13().(x)
  Int => scala.Int#
  unchecked => scala.unchecked#
  Nothing => scala.Nothing#
example.Methods#m13().(x) => param x: Int @unchecked
  Int => scala.Int#
  unchecked => scala.unchecked#
example.Methods#m14(). => method m14(x: T forSome { type T }): Nothing
  x => example.Methods#m14().(x)
  T => local1
  Nothing => scala.Nothing#
example.Methods#m14().(x) => param x: T forSome { type T }
  T => local1
example.Methods#m15(). => method m15(x: => Int): Nothing
  x => example.Methods#m15().(x)
  Int => scala.Int#
  Nothing => scala.Nothing#
example.Methods#m15().(x) => param x: => Int
  Int => scala.Int#
example.Methods#m16(). => method m16(x: Int*): Nothing
  x => example.Methods#m16().(x)
  Int => scala.Int#
  Nothing => scala.Nothing#
example.Methods#m16().(x) => param x: Int*
  Int => scala.Int#
example.Methods#m2(). => method m2(): Nothing
  Nothing => scala.Nothing#
example.Methods#m3(). => method m3(x: Int): Nothing
  x => example.Methods#m3().(x)
  Int => scala.Int#
  Nothing => scala.Nothing#
example.Methods#m3().(x) => param x: Int
  Int => scala.Int#
example.Methods#m4(). => method m4(x: Int)(y: Int): Nothing
  x => example.Methods#m4().(x)
  Int => scala.Int#
  y => example.Methods#m4().(y)
  Nothing => scala.Nothing#
example.Methods#m4().(x) => param x: Int
  Int => scala.Int#
example.Methods#m4().(y) => param y: Int
  Int => scala.Int#
example.Methods#m5(). => method m5(x: String): Nothing
  x => example.Methods#m5().(x)
  String => scala.Predef.String#
  Nothing => scala.Nothing#
example.Methods#m5().(x) => param x: String
  String => scala.Predef.String#
example.Methods#m5(+1). => method m5(x: Int): Nothing
  x => example.Methods#m5(+1).(x)
  Int => scala.Int#
  Nothing => scala.Nothing#
example.Methods#m5(+1).(x) => param x: Int
  Int => scala.Int#
example.Methods#m6(). => method m6(x: Int): Nothing
  x => example.Methods#m6().(x)
  Int => scala.Int#
  Nothing => scala.Nothing#
example.Methods#m6().(x) => param x: Int
  Int => scala.Int#
example.Methods#m6(+1). => method m6(x: List[T]): Nothing
  x => example.Methods#m6(+1).(x)
  List => example.Methods#List#
  T => example.Methods#[T]
  Nothing => scala.Nothing#
example.Methods#m6(+1).(x) => param x: List[T]
  List => example.Methods#List#
  T => example.Methods#[T]
example.Methods#m6(+2). => method m6(x: List[T]): Nothing
  x => example.Methods#m6(+2).(x)
  List => scala.package.List#
  T => example.Methods#[T]
  Nothing => scala.Nothing#
example.Methods#m6(+2).(x) => param x: List[T]
  List => scala.package.List#
  T => example.Methods#[T]
example.Methods#m7a(). => method m7a[U](c: Methods[T], l: List[U])(implicit evidence$1: Ordering[U]): Nothing
  U => example.Methods#m7a().[U]
  c => example.Methods#m7a().(c)
  Methods => example.Methods#
  T => example.Methods#[T]
  l => example.Methods#m7a().(l)
  List => example.Methods#List#
  evidence$1 => example.Methods#m7a().(evidence$1)
  Ordering => scala.math.Ordering#
  Nothing => scala.Nothing#
example.Methods#m7a().(c) => param c: Methods[T]
  Methods => example.Methods#
  T => example.Methods#[T]
example.Methods#m7a().(evidence$1) => implicit param evidence$1: Ordering[U]
  Ordering => scala.math.Ordering#
  U => example.Methods#m7a().[U]
example.Methods#m7a().(l) => param l: List[U]
  List => example.Methods#List#
  U => example.Methods#m7a().[U]
example.Methods#m7a().[U] => typeparam U
example.Methods#m7b(). => method m7b[U](l: List[U])(implicit evidence$2: Function1[U, T]): Nothing
  U => example.Methods#m7b().[U]
  l => example.Methods#m7b().(l)
  List => example.Methods#List#
  evidence$2 => example.Methods#m7b().(evidence$2)
  Function1 => scala.Function1#
  T => example.Methods#[T]
  Nothing => scala.Nothing#
example.Methods#m7b().(evidence$2) => implicit param evidence$2: Function1[U, T]
  Function1 => scala.Function1#
  U => example.Methods#m7b().[U]
  T => example.Methods#[T]
example.Methods#m7b().(l) => param l: List[U]
  List => example.Methods#List#
  U => example.Methods#m7b().[U]
example.Methods#m7b().[U] => typeparam U
example.Methods#m9(). => method m9(x: m9().): Nothing
  x => example.Methods#m9().(x)
  m9(). => example.Methods#`m9().`#
  Nothing => scala.Nothing#
example.Methods#m9().(x) => param x: m9().
  m9(). => example.Methods#`m9().`#
local0 => abstract val method x: Int
  Int => scala.Int#
local2 => abstract type T

Occurrences:
[0:8..0:15): example <= example.
[2:7..2:12): scala => scala.
[2:13..2:17): math => scala.math.
[2:18..2:26): Ordering => scala.math.Ordering#
[2:18..2:26): Ordering => scala.math.Ordering.
[3:7..3:12): scala => scala.
[3:13..3:21): language => scala.language.
[3:22..3:34): existentials => scala.language.existentials().
[5:6..5:13): Methods <= example.Methods#
[5:14..5:15): T <= example.Methods#[T]
[5:17..5:17):  <= example.Methods#`<init>`().
[6:8..6:12): List <= example.Methods#List#
[6:13..6:14): T <= example.Methods#List#[T]
[6:15..6:15):  <= example.Methods#List#`<init>`().
[7:7..7:12): AList <= example.Methods#AList#
[7:13..7:14): T <= example.Methods#AList#[T]
[7:18..7:22): List => example.Methods#List#
[7:23..7:24): T => example.Methods#AList#[T]
[8:6..8:8): m1 <= example.Methods#m1().
[8:11..8:14): ??? => scala.Predef.`???`().
[9:6..9:8): m2 <= example.Methods#m2().
[9:13..9:16): ??? => scala.Predef.`???`().
[10:6..10:8): m3 <= example.Methods#m3().
[10:9..10:10): x <= example.Methods#m3().(x)
[10:12..10:15): Int => scala.Int#
[10:19..10:22): ??? => scala.Predef.`???`().
[11:6..11:8): m4 <= example.Methods#m4().
[11:9..11:10): x <= example.Methods#m4().(x)
[11:12..11:15): Int => scala.Int#
[11:17..11:18): y <= example.Methods#m4().(y)
[11:20..11:23): Int => scala.Int#
[11:27..11:30): ??? => scala.Predef.`???`().
[12:6..12:8): m5 <= example.Methods#m5().
[12:9..12:10): x <= example.Methods#m5().(x)
[12:12..12:18): String => scala.Predef.String#
[12:22..12:25): ??? => scala.Predef.`???`().
[13:6..13:8): m5 <= example.Methods#m5(+1).
[13:9..13:10): x <= example.Methods#m5(+1).(x)
[13:12..13:15): Int => scala.Int#
[13:19..13:22): ??? => scala.Predef.`???`().
[14:6..14:8): m6 <= example.Methods#m6().
[14:9..14:10): x <= example.Methods#m6().(x)
[14:12..14:15): Int => scala.Int#
[14:19..14:22): ??? => scala.Predef.`???`().
[15:6..15:8): m6 <= example.Methods#m6(+1).
[15:9..15:10): x <= example.Methods#m6(+1).(x)
[15:12..15:16): List => example.Methods#List#
[15:17..15:18): T => example.Methods#[T]
[15:23..15:26): ??? => scala.Predef.`???`().
[16:6..16:8): m6 <= example.Methods#m6(+2).
[16:9..16:10): x <= example.Methods#m6(+2).(x)
[16:12..16:17): scala => scala.
[16:18..16:22): List => scala.package.List#
[16:23..16:24): T => example.Methods#[T]
[16:29..16:32): ??? => scala.Predef.`???`().
[17:6..17:9): m7a <= example.Methods#m7a().
[17:10..17:11): U <= example.Methods#m7a().[U]
[17:13..17:21): Ordering => scala.math.Ordering#
[17:23..17:24): c <= example.Methods#m7a().(c)
[17:26..17:33): Methods => example.Methods#
[17:34..17:35): T => example.Methods#[T]
[17:38..17:39): l <= example.Methods#m7a().(l)
[17:41..17:45): List => example.Methods#List#
[17:46..17:47): U => example.Methods#m7a().[U]
[17:52..17:55): ??? => scala.Predef.`???`().
[18:6..18:9): m7b <= example.Methods#m7b().
[18:10..18:11): U <= example.Methods#m7b().[U]
[18:15..18:16): T => example.Methods#[T]
[18:18..18:19): l <= example.Methods#m7b().(l)
[18:21..18:25): List => example.Methods#List#
[18:26..18:27): U => example.Methods#m7b().[U]
[18:32..18:35): ??? => scala.Predef.`???`().
[19:6..19:13): `m8().` <= example.Methods#`m8().`().
[19:18..19:21): ??? => scala.Predef.`???`().
[20:8..20:15): `m9().` <= example.Methods#`m9().`#
[20:15..20:15):  <= example.Methods#`m9().`#`<init>`().
[21:6..21:8): m9 <= example.Methods#m9().
[21:9..21:10): x <= example.Methods#m9().(x)
[21:12..21:19): `m9().` => example.Methods#`m9().`#
[21:23..21:26): ??? => scala.Predef.`???`().
[22:6..22:9): m10 <= example.Methods#m10().
[22:10..22:11): x <= example.Methods#m10().(x)
[22:13..22:18): AList => example.Methods#AList#
[22:19..22:20): T => example.Methods#[T]
[22:25..22:28): ??? => scala.Predef.`???`().
[23:6..23:9): m11 <= example.Methods#m11().
[23:10..23:11): x <= example.Methods#m11().(x)
[23:13..23:19): Predef => scala.Predef.
[23:28..23:31): ??? => scala.Predef.`???`().
[24:6..24:9): m11 <= example.Methods#m11(+1).
[24:10..24:11): x <= example.Methods#m11(+1).(x)
[24:13..24:20): Example => example.Example.
[24:29..24:32): ??? => scala.Predef.`???`().
[25:6..25:10): m12a <= example.Methods#m12a().
[25:11..25:12): x <= example.Methods#m12a().(x)
[25:20..25:23): ??? => scala.Predef.`???`().
[26:6..26:10): m12b <= example.Methods#m12b().
[26:11..26:12): x <= example.Methods#m12b().(x)
[26:20..26:21): x <= local0
[26:23..26:26): Int => scala.Int#
[26:32..26:35): ??? => scala.Predef.`???`().
[27:6..27:9): m13 <= example.Methods#m13().
[27:10..27:11): x <= example.Methods#m13().(x)
[27:13..27:16): Int => scala.Int#
[27:18..27:27): unchecked => scala.unchecked#
[27:27..27:27):  => scala.unchecked#`<init>`().
[27:31..27:34): ??? => scala.Predef.`???`().
[28:6..28:9): m14 <= example.Methods#m14().
[28:10..28:11): x <= example.Methods#m14().(x)
[28:13..28:14): T => local2
[28:30..28:31): T <= local2
[28:37..28:40): ??? => scala.Predef.`???`().
[29:6..29:9): m15 <= example.Methods#m15().
[29:10..29:11): x <= example.Methods#m15().(x)
[29:16..29:19): Int => scala.Int#
[29:23..29:26): ??? => scala.Predef.`???`().
[30:6..30:9): m16 <= example.Methods#m16().
[30:10..30:11): x <= example.Methods#m16().(x)
[30:13..30:16): Int => scala.`<repeated>`#
[30:21..30:24): ??? => scala.Predef.`???`().
[33:6..33:18): MethodUsages <= example.MethodUsages#
[33:19..33:19):  <= example.MethodUsages#`<init>`().
[34:6..34:7): m <= example.MethodUsages#m().
[34:14..34:21): Methods => example.Methods#
[34:22..34:25): Int => scala.Int#
[34:26..34:26):  => example.Methods#`<init>`().
[35:2..35:3): m => example.MethodUsages#m().
[35:4..35:6): m1 => example.Methods#m1().
[36:2..36:3): m => example.MethodUsages#m().
[36:4..36:6): m2 => example.Methods#m2().
[37:2..37:3): m => example.MethodUsages#m().
[37:4..37:6): m3 => example.Methods#m3().
[38:2..38:3): m => example.MethodUsages#m().
[38:4..38:6): m4 => example.Methods#m4().
[39:2..39:3): m => example.MethodUsages#m().
[39:4..39:6): m5 => example.Methods#m5().
[40:2..40:3): m => example.MethodUsages#m().
[40:4..40:6): m5 => example.Methods#m5(+1).
[41:2..41:3): m => example.MethodUsages#m().
[41:4..41:6): m6 => example.Methods#m6().
[42:2..42:3): m => example.MethodUsages#m().
[42:4..42:6): m6 => example.Methods#m6(+1).
[42:11..42:12): m => example.MethodUsages#m().
[42:13..42:17): List => example.Methods#List#
[42:18..42:21): Int => scala.Int#
[42:22..42:22):  => example.Methods#List#`<init>`().
[43:2..43:3): m => example.MethodUsages#m().
[43:4..43:6): m6 => example.Methods#m6(+2).
[43:7..43:10): Nil => scala.collection.immutable.Nil.
[44:2..44:3): m => example.MethodUsages#m().
[44:4..44:7): m7a => example.Methods#m7a().
[44:8..44:9): m => example.MethodUsages#m().
[44:15..44:16): m => example.MethodUsages#m().
[44:17..44:21): List => example.Methods#List#
[44:22..44:25): Int => scala.Int#
[44:26..44:26):  => example.Methods#List#`<init>`().
[45:2..45:3): m => example.MethodUsages#m().
[45:4..45:7): m7b => example.Methods#m7b().
[45:12..45:13): m => example.MethodUsages#m().
[45:14..45:18): List => example.Methods#List#
[45:19..45:22): Int => scala.Int#
[45:23..45:23):  => example.Methods#List#`<init>`().
[46:2..46:3): m => example.MethodUsages#m().
[46:4..46:11): `m8().` => example.Methods#`m8().`().
[47:2..47:3): m => example.MethodUsages#m().
[47:4..47:6): m9 => example.Methods#m9().
[48:2..48:3): m => example.MethodUsages#m().
[48:4..48:7): m10 => example.Methods#m10().
[49:2..49:3): m => example.MethodUsages#m().
[49:4..49:7): m11 => example.Methods#m11().
[49:8..49:14): Predef => scala.Predef.
[50:2..50:3): m => example.MethodUsages#m().
[50:4..50:7): m11 => example.Methods#m11(+1).
[50:8..50:15): Example => example.Example.
[51:2..51:3): m => example.MethodUsages#m().
[51:4..51:8): m12a => example.Methods#m12a().
[52:2..52:3): m => example.MethodUsages#m().
[52:4..52:8): m12b => example.Methods#m12b().
[53:2..53:3): m => example.MethodUsages#m().
[53:4..53:7): m13 => example.Methods#m13().
[54:2..54:3): m => example.MethodUsages#m().
[54:4..54:7): m14 => example.Methods#m14().
[55:2..55:3): m => example.MethodUsages#m().
[55:4..55:7): m15 => example.Methods#m15().
[56:2..56:3): m => example.MethodUsages#m().
[56:4..56:7): m16 => example.Methods#m16().

Synthetics:
[44:7..44:7):  => *[Int]
  [0:0..0:1): * => _star_.
  [0:2..0:5): Int => scala.Int#
[44:27..44:27):  => *(scala.math.Ordering.Int)
  [0:0..0:1): * => _star_.
  [0:22..0:25): Int => scala.math.Ordering.Int.
[45:7..45:7):  => *[Int]
  [0:0..0:1): * => _star_.
  [0:2..0:5): Int => scala.Int#
[45:24..45:24):  => *(scala.Predef.$conforms[Int])
  [0:0..0:1): * => _star_.
  [0:15..0:24): $conforms => scala.Predef.$conforms().
  [0:25..0:28): Int => scala.Int#

semanticdb/integration/src/main/scala/example/Objects.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Objects.scala
Text => non-empty
Language => Scala
Symbols => 3 entries
Occurrences => 3 entries

Symbols:
objects. => package objects
objects.X. => final object X extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
objects.X.Y. => final object Y extends AnyRef
  AnyRef => scala.AnyRef#

Occurrences:
[0:8..0:15): objects <= objects.
[2:7..2:8): X <= objects.X.
[3:9..3:10): Y <= objects.X.Y.

semanticdb/integration/src/main/scala/example/Overrides.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Overrides.scala
Text => non-empty
Language => Scala
Symbols => 6 entries
Occurrences => 10 entries

Symbols:
example. => package example
example.A# => trait A extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
example.A#foo(). => abstract method foo: Int
  Int => scala.Int#
example.B# => class B extends AnyRef with A { +2 decls }
  AnyRef => scala.AnyRef#
  A => example.A#
example.B#`<init>`(). => primary ctor <init>()
example.B#foo(). => method foo: Int
  Int => scala.Int#

Occurrences:
[0:8..0:15): example <= example.
[2:6..2:7): A <= example.A#
[2:14..2:17): foo <= example.A#foo().
[2:19..2:22): Int => scala.Int#
[3:6..3:7): B <= example.B#
[3:7..3:7):  <= example.B#`<init>`().
[3:18..3:19): A => example.A#
[3:20..3:20):  => java.lang.Object#`<init>`().
[3:26..3:29): foo <= example.B#foo().
[3:31..3:34): Int => scala.Int#

semanticdb/integration/src/main/scala/example/Prefixes.scala
------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Prefixes.scala
Text => non-empty
Language => Scala
Symbols => 18 entries
Occurrences => 44 entries

Symbols:
prefixes. => package prefixes
prefixes.C# => class C extends AnyRef { +5 decls }
  AnyRef => scala.AnyRef#
prefixes.C#N. => final object N extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
prefixes.C#N.U# => abstract type U
prefixes.C#T# => abstract type T
prefixes.C#`<init>`(). => primary ctor <init>()
prefixes.C#k1(). => method k1: U
  U => prefixes.C#N.U#
prefixes.C#m1(). => method m1: T
  T => prefixes.C#T#
prefixes.M. => final object M extends AnyRef { +2 decls }
  AnyRef => scala.AnyRef#
prefixes.M.T# => abstract type T
prefixes.M.n1(). => method n1: T
  T => prefixes.M.T#
prefixes.Test. => final object Test extends AnyRef { +6 decls }
  AnyRef => scala.AnyRef#
prefixes.Test.c(). => val method c: C
  C => prefixes.C#
prefixes.Test.k2(). => method k2: c.N.U
  c => prefixes.Test.c().
  N => prefixes.C#N.
  U => prefixes.C#N.U#
prefixes.Test.k3(). => method k3: c.N.U
  c => prefixes.Test.c().
  N => prefixes.C#N.
  U => prefixes.C#N.U#
prefixes.Test.m2(). => method m2: c.T
  c => prefixes.Test.c().
  T => prefixes.C#T#
prefixes.Test.n2(). => method n2: T
  T => prefixes.M.T#
prefixes.Test.n3(). => method n3: T
  T => prefixes.M.T#

Occurrences:
[0:8..0:16): prefixes <= prefixes.
[2:6..2:7): C <= prefixes.C#
[2:8..2:8):  <= prefixes.C#`<init>`().
[3:7..3:8): T <= prefixes.C#T#
[4:6..4:8): m1 <= prefixes.C#m1().
[4:10..4:11): T => prefixes.C#T#
[4:14..4:17): ??? => scala.Predef.`???`().
[6:9..6:10): N <= prefixes.C#N.
[7:9..7:10): U <= prefixes.C#N.U#
[9:6..9:8): k1 <= prefixes.C#k1().
[9:10..9:11): N => prefixes.C#N.
[9:12..9:13): U => prefixes.C#N.U#
[9:16..9:19): ??? => scala.Predef.`???`().
[12:7..12:8): M <= prefixes.M.
[13:7..13:8): T <= prefixes.M.T#
[14:6..14:8): n1 <= prefixes.M.n1().
[14:10..14:11): T => prefixes.M.T#
[14:14..14:17): ??? => scala.Predef.`???`().
[17:7..17:11): Test <= prefixes.Test.
[18:6..18:7): c <= prefixes.Test.c().
[18:9..18:10): C => prefixes.C#
[18:13..18:16): ??? => scala.Predef.`???`().
[19:6..19:8): m2 <= prefixes.Test.m2().
[19:10..19:11): c => prefixes.Test.c().
[19:12..19:13): T => prefixes.C#T#
[19:16..19:19): ??? => scala.Predef.`???`().
[20:6..20:8): k2 <= prefixes.Test.k2().
[20:10..20:11): c => prefixes.Test.c().
[20:12..20:13): N => prefixes.C#N.
[20:14..20:15): U => prefixes.C#N.U#
[20:18..20:21): ??? => scala.Predef.`???`().
[21:9..21:10): c => prefixes.Test.c().
[21:11..21:12): N => prefixes.C#N.
[22:6..22:8): k3 <= prefixes.Test.k3().
[22:10..22:11): U => prefixes.C#N.U#
[22:14..22:17): ??? => scala.Predef.`???`().
[24:6..24:8): n2 <= prefixes.Test.n2().
[24:10..24:11): M => prefixes.M.
[24:12..24:13): T => prefixes.M.T#
[24:16..24:19): ??? => scala.Predef.`???`().
[26:9..26:10): M => prefixes.M.
[27:6..27:8): n3 <= prefixes.Test.n3().
[27:10..27:11): T => prefixes.M.T#
[27:14..27:17): ??? => scala.Predef.`???`().

semanticdb/integration/src/main/scala/example/Selfs.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Selfs.scala
Text => non-empty
Language => Scala
Symbols => 18 entries
Occurrences => 34 entries

Symbols:
local0 => selfparam self
local1 => selfparam self: B
  B => selfs.B#
local2 => selfparam self: B with Int {}
  B => selfs.B#
  Int => scala.Int#
selfs. => package selfs
selfs.B# => class B extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
selfs.B#`<init>`(). => primary ctor <init>()
selfs.C1# => class C1 extends B { +1 decls }
  B => selfs.B#
selfs.C1#`<init>`(). => primary ctor <init>()
selfs.C2# => class C2 extends B { self: B => +1 decls }
  B => selfs.B#
selfs.C2#`<init>`(). => primary ctor <init>()
selfs.C3# => class C3 extends B { self: B with Int {} => +1 decls }
  B => selfs.B#
  Int => scala.Int#
selfs.C3#`<init>`(). => primary ctor <init>()
selfs.C4# => class C4 extends B { +1 decls }
  B => selfs.B#
selfs.C4#`<init>`(). => primary ctor <init>()
selfs.C5# => class C5 extends B { self: B => +1 decls }
  B => selfs.B#
selfs.C5#`<init>`(). => primary ctor <init>()
selfs.C6# => class C6 extends B { self: B => +1 decls }
  B => selfs.B#
selfs.C6#`<init>`(). => primary ctor <init>()

Occurrences:
[0:8..0:13): selfs <= selfs.
[2:6..2:7): B <= selfs.B#
[4:6..4:8): C1 <= selfs.C1#
[4:9..4:9):  <= selfs.C1#`<init>`().
[4:17..4:18): B => selfs.B#
[4:19..4:19):  => selfs.B#`<init>`().
[4:21..4:25): self <= local0
[7:6..7:8): C2 <= selfs.C2#
[7:9..7:9):  <= selfs.C2#`<init>`().
[7:17..7:18): B => selfs.B#
[7:19..7:19):  => selfs.B#`<init>`().
[7:21..7:25): self <= local1
[7:27..7:28): B => selfs.B#
[10:6..10:8): C3 <= selfs.C3#
[10:9..10:9):  <= selfs.C3#`<init>`().
[10:17..10:18): B => selfs.B#
[10:19..10:19):  => selfs.B#`<init>`().
[10:21..10:25): self <= local2
[10:27..10:28): B => selfs.B#
[10:34..10:37): Int => scala.Int#
[13:6..13:8): C4 <= selfs.C4#
[13:9..13:9):  <= selfs.C4#`<init>`().
[13:17..13:18): B => selfs.B#
[13:19..13:19):  => selfs.B#`<init>`().
[16:6..16:8): C5 <= selfs.C5#
[16:9..16:9):  <= selfs.C5#`<init>`().
[16:17..16:18): B => selfs.B#
[16:19..16:19):  => selfs.B#`<init>`().
[16:24..16:25): B => selfs.B#
[19:6..19:8): C6 <= selfs.C6#
[19:9..19:9):  <= selfs.C6#`<init>`().
[19:17..19:18): B => selfs.B#
[19:19..19:19):  => selfs.B#`<init>`().
[19:27..19:28): B => selfs.B#

semanticdb/integration/src/main/scala/example/Synthetic.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Synthetic.scala
Text => non-empty
Language => Scala
Symbols => 3 entries
Occurrences => 11 entries
Synthetics => 6 entries

Symbols:
example. => package example
example.Synthetic# => class Synthetic extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
example.Synthetic#`<init>`(). => primary ctor <init>()

Occurrences:
[0:8..0:15): example <= example.
[2:6..2:15): Synthetic <= example.Synthetic#
[2:16..2:16):  <= example.Synthetic#`<init>`().
[3:2..3:6): List => scala.collection.immutable.List.
[3:10..3:13): map => scala.collection.immutable.List#map().
[3:16..3:17): + => scala.Int#`+`(+4).
[4:2..4:7): Array => scala.Array.
[4:8..4:13): empty => scala.Array.empty().
[4:14..4:17): Int => scala.Int#
[4:19..4:29): headOption => scala.collection.TraversableLike#headOption().
[5:9..5:20): stripPrefix => scala.collection.immutable.StringLike#stripPrefix().

Synthetics:
[3:6..3:6):  => *.apply[Int]
  [0:0..0:1): * => _star_.
  [0:2..0:7): apply => scala.collection.immutable.List.apply().
  [0:8..0:11): Int => scala.Int#
[3:13..3:13):  => *[Int, List[Int]]
  [0:0..0:1): * => _star_.
  [0:2..0:5): Int => scala.Int#
  [0:7..0:11): List => scala.collection.immutable.List#
  [0:12..0:15): Int => scala.Int#
[3:20..3:20):  => *(scala.collection.immutable.List.canBuildFrom[Int])
  [0:0..0:1): * => _star_.
  [0:34..0:46): canBuildFrom => scala.collection.immutable.List.canBuildFrom().
  [0:47..0:50): Int => scala.Int#
[4:2..4:18): Array.empty[Int] => scala.Predef.intArrayOps(*)
  [0:13..0:24): intArrayOps => scala.Predef.intArrayOps().
  [0:25..0:26): * => _star_.
[4:18..4:18):  => *(((ClassTag.Int): ClassTag[Int]))
  [0:0..0:1): * => _star_.
  [0:13..0:16): Int => scala.reflect.ClassTag.Int().
  [0:19..0:27): ClassTag => scala.reflect.ClassTag#
  [0:28..0:31): Int => scala.Int#
[5:2..5:8): "fooo" => scala.Predef.augmentString(*)
  [0:13..0:26): augmentString => scala.Predef.augmentString().
  [0:27..0:28): * => _star_.

semanticdb/integration/src/main/scala/example/Traits.scala
----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Traits.scala
Text => non-empty
Language => Scala
Symbols => 10 entries
Occurrences => 14 entries

Symbols:
local0 => selfparam self: C
  C => traits.C#
traits. => package traits
traits.C# => class C extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
traits.C#`<init>`(). => primary ctor <init>()
traits.T# => trait T extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
traits.T#x(). => method x: Int
  Int => scala.Int#
traits.U# => sealed trait U extends AnyRef
  AnyRef => scala.AnyRef#
traits.U. => final object U extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
traits.U.u(). => method u: U
  U => traits.U#
traits.V# => trait V extends AnyRef { self: C =>  }
  AnyRef => scala.AnyRef#
  C => traits.C#

Occurrences:
[0:8..0:14): traits <= traits.
[2:6..2:7): T <= traits.T#
[3:6..3:7): x <= traits.T#x().
[6:13..6:14): U <= traits.U#
[7:7..7:8): U <= traits.U.
[8:6..8:7): u <= traits.U.u().
[8:9..8:10): U => traits.U#
[8:17..8:18): U => traits.U#
[8:19..8:19):  => java.lang.Object#`<init>`().
[11:6..11:7): C <= traits.C#
[11:7..11:7):  <= traits.C#`<init>`().
[12:6..12:7): V <= traits.V#
[12:10..12:14): self <= local0
[12:16..12:17): C => traits.C#

semanticdb/integration/src/main/scala/example/Types.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Types.scala
Text => non-empty
Language => Scala
Symbols => 131 entries
Occurrences => 244 entries

Symbols:
local0 => abstract method k: Int
  Int => scala.Int#
local1 => abstract method k: Int
  Int => scala.Int#
local10 => typeparam T
local2 => method k: Int
  Int => scala.Int#
local4 => method k: Int
  Int => scala.Int#
local6 => abstract type T
local9 => type L[T] = List[T]
  T => local10
  List => scala.package.List#
types. => package types
types.B# => class B extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
types.B#`<init>`(). => primary ctor <init>()
types.C# => class C extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
types.C#`<init>`(). => primary ctor <init>()
types.P# => class P extends AnyRef { +4 decls }
  AnyRef => scala.AnyRef#
types.P#C# => class C extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
types.P#C#`<init>`(). => primary ctor <init>()
types.P#X# => class X extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
types.P#X#`<init>`(). => primary ctor <init>()
types.P#`<init>`(). => primary ctor <init>()
types.P#x(). => val method x: X
  X => types.P#X#
types.T# => class T extends AnyRef { +4 decls }
  AnyRef => scala.AnyRef#
types.T#C# => class C extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
types.T#C#`<init>`(). => primary ctor <init>()
types.T#X# => class X extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
types.T#X#`<init>`(). => primary ctor <init>()
types.T#`<init>`(). => primary ctor <init>()
types.T#x(). => val method x: X
  X => types.T#X#
types.Test. => final object Test extends AnyRef { +4 decls }
  AnyRef => scala.AnyRef#
types.Test.C# => class C extends M { +34 decls }
  M => types.Test.M#
types.Test.C#ByNameType. => final object ByNameType extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
types.Test.C#ByNameType.m1(). => method m1(x: => Int): Int
  x => types.Test.C#ByNameType.m1().(x)
  Int => scala.Int#
types.Test.C#ByNameType.m1().(x) => param x: => Int
  Int => scala.Int#
types.Test.C#ClassInfoType1. => final object ClassInfoType1 extends AnyRef
  AnyRef => scala.AnyRef#
types.Test.C#ClassInfoType2# => class ClassInfoType2 extends B { +2 decls }
  B => types.B#
types.Test.C#ClassInfoType2#`<init>`(). => primary ctor <init>()
types.Test.C#ClassInfoType2#x(). => method x: Int
  Int => scala.Int#
types.Test.C#ClassInfoType3# => trait ClassInfoType3[T] extends AnyRef
  T => types.Test.C#ClassInfoType3#[T]
  AnyRef => scala.AnyRef#
types.Test.C#ClassInfoType3#[T] => typeparam T
types.Test.C#Either(). => val method Either: Either.type
  Either => scala.util.Either.
types.Test.C#MethodType. => final object MethodType extends AnyRef { +6 decls }
  AnyRef => scala.AnyRef#
types.Test.C#MethodType.m3(). => method m3: Int
  Int => scala.Int#
types.Test.C#MethodType.m4(). => method m4(): Int
  Int => scala.Int#
types.Test.C#MethodType.m5(). => method m5(x: Int): Int
  x => types.Test.C#MethodType.m5().(x)
  Int => scala.Int#
types.Test.C#MethodType.m5().(x) => param x: Int
  Int => scala.Int#
types.Test.C#MethodType.m6(). => method m6[T](x: T): T
  T => types.Test.C#MethodType.m6().[T]
  x => types.Test.C#MethodType.m6().(x)
types.Test.C#MethodType.m6().(x) => param x: T
  T => types.Test.C#MethodType.m6().[T]
types.Test.C#MethodType.m6().[T] => typeparam T
types.Test.C#MethodType.x1(). => method x1: Int
  Int => scala.Int#
types.Test.C#MethodType.x2(). => method x2: Int
  Int => scala.Int#
types.Test.C#RepeatedType# => case class RepeatedType extends AnyRef with Product with Serializable { +11 decls }
  AnyRef => scala.AnyRef#
  Product => scala.Product#
  Serializable => scala.Serializable#
types.Test.C#RepeatedType#`<init>`(). => primary ctor <init>(val s: String*)
  s => types.Test.C#RepeatedType#`<init>`().(s)
  String => scala.Predef.String#
types.Test.C#RepeatedType#`<init>`().(s) => val param s: String*
  String => scala.Predef.String#
types.Test.C#RepeatedType#canEqual(). => method canEqual(x$1: Any): Boolean
  x$1 => types.Test.C#RepeatedType#canEqual().(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
types.Test.C#RepeatedType#canEqual().(x$1) => param x$1: Any
  Any => scala.Any#
types.Test.C#RepeatedType#equals(). => method equals(x$1: Any): Boolean
  x$1 => types.Test.C#RepeatedType#equals().(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
types.Test.C#RepeatedType#equals().(x$1) => param x$1: Any
  Any => scala.Any#
types.Test.C#RepeatedType#hashCode(). => method hashCode(): Int
  Int => scala.Int#
types.Test.C#RepeatedType#m1(). => method m1(x: Int*): Int
  x => types.Test.C#RepeatedType#m1().(x)
  Int => scala.Int#
types.Test.C#RepeatedType#m1().(x) => param x: Int*
  Int => scala.Int#
types.Test.C#RepeatedType#productArity(). => method productArity: Int
  Int => scala.Int#
types.Test.C#RepeatedType#productElement(). => method productElement(x$1: Int): Any
  x$1 => types.Test.C#RepeatedType#productElement().(x$1)
  Int => scala.Int#
  Any => scala.Any#
types.Test.C#RepeatedType#productElement().(x$1) => param x$1: Int
  Int => scala.Int#
types.Test.C#RepeatedType#productIterator(). => method productIterator: Iterator[Any]
  Iterator => scala.collection.Iterator#
  Any => scala.Any#
types.Test.C#RepeatedType#productPrefix(). => method productPrefix: String
  String => java.lang.String#
types.Test.C#RepeatedType#s(). => val method s: String*
  String => scala.Predef.String#
types.Test.C#RepeatedType#toString(). => method toString(): String
  String => java.lang.String#
types.Test.C#RepeatedType. => final object RepeatedType extends AbstractFunction1[String*, RepeatedType] with Serializable { +3 decls }
  AbstractFunction1 => scala.runtime.AbstractFunction1#
  String => scala.Predef.String#
  RepeatedType => types.Test.C#RepeatedType#
  Serializable => scala.Serializable#
types.Test.C#RepeatedType.apply(). => method apply(unknown s): RepeatedType
  s => types.Test.C#RepeatedType.apply().(s)
  RepeatedType => types.Test.C#RepeatedType#
types.Test.C#RepeatedType.toString(). => final method toString(): String
  String => java.lang.String#
types.Test.C#RepeatedType.unapplySeq(). => method unapplySeq(x$0: RepeatedType): Option[Seq[String]]
  x$0 => types.Test.C#RepeatedType.unapplySeq().(x$0)
  RepeatedType => types.Test.C#RepeatedType#
  Option => scala.Option#
  Seq => scala.package.Seq#
  String => scala.Predef.String#
types.Test.C#RepeatedType.unapplySeq().(x$0) => param x$0: RepeatedType
  RepeatedType => types.Test.C#RepeatedType#
types.Test.C#TypeType. => final object TypeType extends AnyRef { +5 decls }
  AnyRef => scala.AnyRef#
types.Test.C#TypeType.T1# => abstract type T1
types.Test.C#TypeType.T4# => type T4 = C
  C => types.Test.C#
types.Test.C#TypeType.T5# => type T5[U] = U
  U => types.Test.C#TypeType.T5#[U]
types.Test.C#TypeType.T5#[U] => typeparam U
types.Test.C#TypeType.m2(). => method m2[T2 = C]: Nothing
  T2 => types.Test.C#TypeType.m2().[T2]
  C => types.Test.C#
  Nothing => scala.Nothing#
types.Test.C#TypeType.m2().[T2] => typeparam T2 = C
  C => types.Test.C#
types.Test.C#TypeType.m3(). => method m3[M3[unknown _]]: Nothing
  M3 => types.Test.C#TypeType.m3().[M3]
  _ => types.Test.C#TypeType.m3().[M3][_]
  Nothing => scala.Nothing#
types.Test.C#TypeType.m3().[M3] => typeparam M3[unknown _]
  _ => types.Test.C#TypeType.m3().[M3][_]
types.Test.C#`<init>`(). => primary ctor <init>()
types.Test.C#annType1(). => val method annType1: T @ann[Int]
  T => types.T#
  ann => types.ann#
  Int => scala.Int#
types.Test.C#annType2(). => val method annType2: T @ann1 @ann2
  T => types.T#
  ann1 => types.ann1#
  ann2 => types.ann2#
types.Test.C#compoundType1(). => val method compoundType1: AnyRef { def k: Int }
  AnyRef => scala.AnyRef#
  k => local0
  Int => scala.Int#
types.Test.C#compoundType2(). => val method compoundType2: M with N {}
  M => types.Test.M#
  N => types.Test.N#
types.Test.C#compoundType3(). => val method compoundType3: M with N { def k: Int }
  M => types.Test.M#
  N => types.Test.N#
  k => local1
  Int => scala.Int#
types.Test.C#compoundType4(). => val method compoundType4: AnyRef { def k: Int }
  AnyRef => scala.AnyRef#
  k => local3
  Int => scala.Int#
types.Test.C#compoundType5(). => val method compoundType5: M with N {}
  M => types.Test.M#
  N => types.Test.N#
types.Test.C#compoundType6(). => val method compoundType6: M with N { def k: Int }
  M => types.Test.M#
  N => types.Test.N#
  k => local5
  Int => scala.Int#
types.Test.C#existentialType1(). => val method existentialType1: T forSome { type T }
  T => local7
types.Test.C#existentialType2(). => val method existentialType2: List[_] forSome { type _ }
  List => scala.package.List#
  _ => local8
types.Test.C#p(). => val method p: P
  P => types.P#
types.Test.C#singleType1(). => val method singleType1: x.type
  x => types.Test.C#x().
types.Test.C#singleType2(). => val method singleType2: p.x.type
  p => types.Test.C#p().
  x => types.P#x().
types.Test.C#superType1(). => val method superType1: Int
  Int => scala.Int#
types.Test.C#superType2(). => val method superType2: Int
  Int => scala.Int#
types.Test.C#superType3(). => val method superType3: Int
  Int => scala.Int#
types.Test.C#thisType1(). => val method thisType1: C.this.type
  C => types.Test.C#
types.Test.C#thisType2(). => val method thisType2: C.this.type
  C => types.Test.C#
types.Test.C#typeLambda1(). => method typeLambda1[M[unknown _]]: Nothing
  M => types.Test.C#typeLambda1().[M]
  _ => types.Test.C#typeLambda1().[M][_]
  Nothing => scala.Nothing#
types.Test.C#typeLambda1().[M] => typeparam M[unknown _]
  _ => types.Test.C#typeLambda1().[M][_]
types.Test.C#typeRef1(). => val method typeRef1: C
  C => types.Test.C#
types.Test.C#typeRef2(). => val method typeRef2: p.C
  p => types.Test.C#p().
  C => types.P#C#
types.Test.C#typeRef3(). => val method typeRef3: T#C
  T => types.T#
  C => types.T#C#
types.Test.C#typeRef4(). => val method typeRef4: List[Int]
  List => scala.package.List#
  Int => scala.Int#
types.Test.C#x(). => val method x: p.X
  p => types.Test.C#p().
  X => types.P#X#
types.Test.Literal. => final object Literal extends AnyRef { +11 decls }
  AnyRef => scala.AnyRef#
types.Test.Literal.bool(). => final val method bool: true
types.Test.Literal.char(). => final val method char: 'a'
types.Test.Literal.clazzOf(). => final val method clazzOf: Class[Option[Int]]
  Class => java.lang.Class#
  Option => scala.Option#
  Int => scala.Int#
types.Test.Literal.double(). => final val method double: 2.0
types.Test.Literal.float(). => final val method float: 1.0f
types.Test.Literal.int(). => final val method int: 1
types.Test.Literal.javaEnum(). => final val method javaEnum: NOFOLLOW_LINKS.type
  NOFOLLOW_LINKS => java.nio.file.LinkOption#NOFOLLOW_LINKS.
types.Test.Literal.long(). => final val method long: 1L
types.Test.Literal.nil(). => final val method nil: null
types.Test.Literal.string(). => final val method string: "a"
types.Test.Literal.unit(). => final val method unit: Unit
  Unit => scala.Unit#
types.Test.M# => class M extends AnyRef { +2 decls }
  AnyRef => scala.AnyRef#
types.Test.M#`<init>`(). => primary ctor <init>()
types.Test.M#m(). => method m: Int
  Int => scala.Int#
types.Test.N# => trait N extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
types.Test.N#n(). => method n: Int
  Int => scala.Int#
types.ann# => class ann[T] extends Annotation with StaticAnnotation { +2 decls }
  T => types.ann#[T]
  Annotation => scala.annotation.Annotation#
  StaticAnnotation => scala.annotation.StaticAnnotation#
types.ann#[T] => typeparam T
types.ann#`<init>`(). => primary ctor <init>(x: T)
  x => types.ann#`<init>`().(x)
  T => types.ann#[T]
types.ann#`<init>`().(x) => param x: T
  T => types.ann#[T]
types.ann#x(). => private[this] val method x: T
  T => types.ann#[T]
types.ann1# => class ann1 extends Annotation with StaticAnnotation { +1 decls }
  Annotation => scala.annotation.Annotation#
  StaticAnnotation => scala.annotation.StaticAnnotation#
types.ann1#`<init>`(). => primary ctor <init>()
types.ann2# => class ann2 extends Annotation with StaticAnnotation { +1 decls }
  Annotation => scala.annotation.Annotation#
  StaticAnnotation => scala.annotation.StaticAnnotation#
types.ann2#`<init>`(). => primary ctor <init>()

Occurrences:
[0:8..0:13): types <= types.
[2:7..2:12): scala => scala.
[2:13..2:21): language => scala.language.
[2:22..2:34): existentials => scala.language.existentials().
[3:7..3:12): scala => scala.
[3:13..3:21): language => scala.language.
[3:22..3:33): higherKinds => scala.language.higherKinds().
[5:6..5:9): ann <= types.ann#
[5:10..5:11): T <= types.ann#[T]
[5:12..5:12):  <= types.ann#`<init>`().
[5:13..5:14): x <= types.ann#x().
[5:16..5:17): T => types.ann#[T]
[5:27..5:32): scala => scala.
[5:33..5:43): annotation => scala.annotation.
[5:44..5:60): StaticAnnotation => scala.annotation.StaticAnnotation#
[6:6..6:10): ann1 <= types.ann1#
[6:11..6:11):  <= types.ann1#`<init>`().
[6:19..6:24): scala => scala.
[6:25..6:35): annotation => scala.annotation.
[6:36..6:52): StaticAnnotation => scala.annotation.StaticAnnotation#
[7:6..7:10): ann2 <= types.ann2#
[7:11..7:11):  <= types.ann2#`<init>`().
[7:19..7:24): scala => scala.
[7:25..7:35): annotation => scala.annotation.
[7:36..7:52): StaticAnnotation => scala.annotation.StaticAnnotation#
[9:6..9:7): B <= types.B#
[11:6..11:7): C <= types.C#
[13:6..13:7): P <= types.P#
[13:8..13:8):  <= types.P#`<init>`().
[14:8..14:9): C <= types.P#C#
[14:9..14:9):  <= types.P#C#`<init>`().
[15:8..15:9): X <= types.P#X#
[15:9..15:9):  <= types.P#X#`<init>`().
[16:6..16:7): x <= types.P#x().
[16:14..16:15): X => types.P#X#
[17:0..17:0):  => types.P#X#`<init>`().
[19:6..19:7): T <= types.T#
[19:8..19:8):  <= types.T#`<init>`().
[20:8..20:9): C <= types.T#C#
[20:9..20:9):  <= types.T#C#`<init>`().
[21:8..21:9): X <= types.T#X#
[21:9..21:9):  <= types.T#X#`<init>`().
[22:6..22:7): x <= types.T#x().
[22:14..22:15): X => types.T#X#
[23:0..23:0):  => types.T#X#`<init>`().
[25:7..25:11): Test <= types.Test.
[26:8..26:9): M <= types.Test.M#
[26:10..26:10):  <= types.Test.M#`<init>`().
[27:8..27:9): m <= types.Test.M#m().
[27:11..27:14): Int => scala.Int#
[27:17..27:20): ??? => scala.Predef.`???`().
[30:8..30:9): N <= types.Test.N#
[31:8..31:9): n <= types.Test.N#n().
[31:11..31:14): Int => scala.Int#
[31:17..31:20): ??? => scala.Predef.`???`().
[34:8..34:9): C <= types.Test.C#
[34:10..34:10):  <= types.Test.C#`<init>`().
[34:18..34:19): M => types.Test.M#
[34:20..34:20):  => types.Test.M#`<init>`().
[35:8..35:9): p <= types.Test.C#p().
[35:16..35:17): P => types.P#
[35:17..35:17):  => types.P#`<init>`().
[36:8..36:9): x <= types.Test.C#x().
[36:12..36:13): p => types.Test.C#p().
[36:14..36:15): x => types.P#x().
[38:8..38:16): typeRef1 <= types.Test.C#typeRef1().
[38:18..38:19): C => types.Test.C#
[38:22..38:25): ??? => scala.Predef.`???`().
[39:8..39:16): typeRef2 <= types.Test.C#typeRef2().
[39:18..39:19): p => types.Test.C#p().
[39:20..39:21): C => types.P#C#
[39:24..39:27): ??? => scala.Predef.`???`().
[40:8..40:16): typeRef3 <= types.Test.C#typeRef3().
[40:18..40:19): T => types.T#
[40:20..40:21): C => types.T#C#
[40:24..40:27): ??? => scala.Predef.`???`().
[41:8..41:16): typeRef4 <= types.Test.C#typeRef4().
[41:18..41:22): List => scala.package.List#
[41:23..41:26): Int => scala.Int#
[41:30..41:33): ??? => scala.Predef.`???`().
[43:8..43:19): singleType1 <= types.Test.C#singleType1().
[43:21..43:22): x => types.Test.C#x().
[43:30..43:33): ??? => scala.Predef.`???`().
[44:8..44:19): singleType2 <= types.Test.C#singleType2().
[44:21..44:22): p => types.Test.C#p().
[44:23..44:24): x => types.P#x().
[44:32..44:35): ??? => scala.Predef.`???`().
[45:8..45:14): Either <= types.Test.C#Either().
[45:17..45:22): scala => scala.
[45:23..45:27): util => scala.util.
[45:28..45:34): Either => scala.util.Either.
[47:8..47:17): thisType1 <= types.Test.C#thisType1().
[47:31..47:34): ??? => scala.Predef.`???`().
[48:8..48:17): thisType2 <= types.Test.C#thisType2().
[48:19..48:20): C => types.Test.C#
[48:33..48:36): ??? => scala.Predef.`???`().
[50:8..50:18): superType1 <= types.Test.C#superType1().
[50:27..50:28): m => types.Test.M#m().
[51:8..51:18): superType2 <= types.Test.C#superType2().
[51:27..51:28): M => types.Test.C#
[51:30..51:31): m => types.Test.M#m().
[52:8..52:18): superType3 <= types.Test.C#superType3().
[52:21..52:22): C => types.Test.C#
[52:29..52:30): M => types.Test.C#
[52:32..52:33): m => types.Test.M#m().
[54:8..54:21): compoundType1 <= types.Test.C#compoundType1().
[54:29..54:30): k <= local0
[54:32..54:35): Int => scala.Int#
[54:40..54:43): ??? => scala.Predef.`???`().
[55:8..55:21): compoundType2 <= types.Test.C#compoundType2().
[55:23..55:24): M => types.Test.M#
[55:30..55:31): N => types.Test.N#
[55:34..55:37): ??? => scala.Predef.`???`().
[56:8..56:21): compoundType3 <= types.Test.C#compoundType3().
[56:23..56:24): M => types.Test.M#
[56:30..56:31): N => types.Test.N#
[56:38..56:39): k <= local1
[56:41..56:44): Int => scala.Int#
[56:49..56:52): ??? => scala.Predef.`???`().
[57:8..57:21): compoundType4 <= types.Test.C#compoundType4().
[57:34..57:35): k <= local2
[57:37..57:40): Int => scala.Int#
[57:43..57:46): ??? => scala.Predef.`???`().
[58:8..58:21): compoundType5 <= types.Test.C#compoundType5().
[58:28..58:29): M => types.Test.M#
[58:30..58:30):  => types.Test.M#`<init>`().
[58:35..58:36): N => types.Test.N#
[59:8..59:21): compoundType6 <= types.Test.C#compoundType6().
[59:28..59:29): M => types.Test.M#
[59:30..59:30):  => types.Test.M#`<init>`().
[59:35..59:36): N => types.Test.N#
[59:43..59:44): k <= local4
[59:46..59:49): Int => scala.Int#
[59:52..59:55): ??? => scala.Predef.`???`().
[61:8..61:16): annType1 <= types.Test.C#annType1().
[61:18..61:19): T => types.T#
[61:21..61:24): ann => types.ann#
[61:24..61:24):  => types.ann#`<init>`().
[61:31..61:34): ??? => scala.Predef.`???`().
[62:8..62:16): annType2 <= types.Test.C#annType2().
[62:18..62:19): T => types.T#
[62:21..62:25): ann1 => types.ann1#
[62:26..62:26):  => types.ann1#`<init>`().
[62:27..62:31): ann2 => types.ann2#
[62:32..62:32):  => types.ann2#`<init>`().
[62:34..62:37): ??? => scala.Predef.`???`().
[64:8..64:24): existentialType1 <= types.Test.C#existentialType1().
[64:26..64:27): T => local6
[64:43..64:44): T <= local6
[64:49..64:52): ??? => scala.Predef.`???`().
[65:8..65:24): existentialType2 <= types.Test.C#existentialType2().
[65:26..65:30): List => scala.package.List#
[65:36..65:39): ??? => scala.Predef.`???`().
[67:8..67:19): typeLambda1 <= types.Test.C#typeLambda1().
[67:20..67:21): M <= types.Test.C#typeLambda1().[M]
[67:28..67:31): ??? => scala.Predef.`???`().
[68:4..68:15): typeLambda1 => types.Test.C#typeLambda1().
[68:24..68:25): L <= local9
[68:26..68:27): T <= local10
[68:31..68:35): List => scala.package.List#
[68:36..68:37): T => local10
[70:11..70:25): ClassInfoType1 <= types.Test.C#ClassInfoType1.
[71:10..71:24): ClassInfoType2 <= types.Test.C#ClassInfoType2#
[71:25..71:25):  <= types.Test.C#ClassInfoType2#`<init>`().
[71:33..71:34): B => types.B#
[71:35..71:35):  => types.B#`<init>`().
[71:41..71:42): x <= types.Test.C#ClassInfoType2#x().
[72:10..72:24): ClassInfoType3 <= types.Test.C#ClassInfoType3#
[72:25..72:26): T <= types.Test.C#ClassInfoType3#[T]
[74:11..74:21): MethodType <= types.Test.C#MethodType.
[75:10..75:12): x1 <= types.Test.C#MethodType.x1().
[75:14..75:17): Int => scala.Int#
[75:20..75:23): ??? => scala.Predef.`???`().
[76:10..76:12): x2 <= types.Test.C#MethodType.x2().
[76:14..76:17): Int => scala.Int#
[76:20..76:23): ??? => scala.Predef.`???`().
[77:10..77:12): m3 <= types.Test.C#MethodType.m3().
[77:14..77:17): Int => scala.Int#
[77:20..77:23): ??? => scala.Predef.`???`().
[78:10..78:12): m4 <= types.Test.C#MethodType.m4().
[78:16..78:19): Int => scala.Int#
[78:22..78:25): ??? => scala.Predef.`???`().
[79:10..79:12): m5 <= types.Test.C#MethodType.m5().
[79:13..79:14): x <= types.Test.C#MethodType.m5().(x)
[79:16..79:19): Int => scala.Int#
[79:22..79:25): Int => scala.Int#
[79:28..79:31): ??? => scala.Predef.`???`().
[80:10..80:12): m6 <= types.Test.C#MethodType.m6().
[80:13..80:14): T <= types.Test.C#MethodType.m6().[T]
[80:16..80:17): x <= types.Test.C#MethodType.m6().(x)
[80:19..80:20): T => types.Test.C#MethodType.m6().[T]
[80:23..80:24): T => types.Test.C#MethodType.m6().[T]
[80:27..80:30): ??? => scala.Predef.`???`().
[83:11..83:21): ByNameType <= types.Test.C#ByNameType.
[84:10..84:12): m1 <= types.Test.C#ByNameType.m1().
[84:13..84:14): x <= types.Test.C#ByNameType.m1().(x)
[84:19..84:22): Int => scala.Int#
[84:25..84:28): Int => scala.Int#
[84:31..84:34): ??? => scala.Predef.`???`().
[87:15..87:27): RepeatedType <= types.Test.C#RepeatedType#
[87:27..87:27):  <= types.Test.C#RepeatedType#`<init>`().
[87:28..87:29): s <= types.Test.C#RepeatedType#s().
[87:31..87:37): String => scala.`<repeated>`#
[88:10..88:12): m1 <= types.Test.C#RepeatedType#m1().
[88:13..88:14): x <= types.Test.C#RepeatedType#m1().(x)
[88:16..88:19): Int => scala.`<repeated>`#
[88:23..88:26): Int => scala.Int#
[88:29..88:30): s => types.Test.C#RepeatedType#s().
[88:31..88:37): length => scala.collection.SeqLike#length().
[91:11..91:19): TypeType <= types.Test.C#TypeType.
[92:11..92:13): T1 <= types.Test.C#TypeType.T1#
[93:10..93:12): m2 <= types.Test.C#TypeType.m2().
[93:13..93:15): T2 <= types.Test.C#TypeType.m2().[T2]
[93:19..93:20): C => types.Test.C#
[93:24..93:25): C => types.Test.C#
[93:29..93:32): ??? => scala.Predef.`???`().
[94:10..94:12): m3 <= types.Test.C#TypeType.m3().
[94:13..94:15): M3 <= types.Test.C#TypeType.m3().[M3]
[94:22..94:25): ??? => scala.Predef.`???`().
[95:11..95:13): T4 <= types.Test.C#TypeType.T4#
[95:16..95:17): C => types.Test.C#
[96:11..96:13): T5 <= types.Test.C#TypeType.T5#
[96:14..96:15): U <= types.Test.C#TypeType.T5#[U]
[96:19..96:20): U => types.Test.C#TypeType.T5#[U]
[100:9..100:16): Literal <= types.Test.Literal.
[101:14..101:17): int <= types.Test.Literal.int().
[102:14..102:18): long <= types.Test.Literal.long().
[103:14..103:19): float <= types.Test.Literal.float().
[104:14..104:20): double <= types.Test.Literal.double().
[105:14..105:17): nil <= types.Test.Literal.nil().
[106:14..106:18): char <= types.Test.Literal.char().
[107:14..107:20): string <= types.Test.Literal.string().
[108:14..108:18): bool <= types.Test.Literal.bool().
[109:14..109:18): unit <= types.Test.Literal.unit().
[110:14..110:22): javaEnum <= types.Test.Literal.javaEnum().
[110:25..110:29): java => java.
[110:30..110:33): nio => java.nio.
[110:34..110:38): file => java.nio.file.
[110:39..110:49): LinkOption => java.nio.file.LinkOption#
[110:50..110:64): NOFOLLOW_LINKS => java.nio.file.LinkOption#NOFOLLOW_LINKS.
[111:14..111:21): clazzOf <= types.Test.Literal.clazzOf().
[111:24..111:31): classOf => scala.Predef.classOf().
[111:32..111:38): Option => scala.Option#
[111:39..111:42): Int => scala.Int#

semanticdb/integration/src/main/scala/example/Vals.scala
--------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Vals.scala
Text => non-empty
Language => Scala
Symbols => 41 entries
Occurrences => 117 entries

Symbols:
example. => package example
example.ValUsages. => final object ValUsages extends AnyRef { +1 decls }
  AnyRef => scala.AnyRef#
example.ValUsages.v(). => val method v: Vals
  Vals => example.Vals#
example.Vals# => abstract class Vals extends AnyRef { +23 decls }
  AnyRef => scala.AnyRef#
example.Vals#`<init>`(). => primary ctor <init>(p: Int, val xp: Int, var yp: Int)
  p => example.Vals#`<init>`().(p)
  Int => scala.Int#
  xp => example.Vals#`<init>`().(xp)
  yp => example.Vals#`<init>`().(yp)
example.Vals#`<init>`().(p) => param p: Int
  Int => scala.Int#
example.Vals#`<init>`().(xp) => val param xp: Int
  Int => scala.Int#
example.Vals#`<init>`().(yp) => var param yp: Int
  Int => scala.Int#
example.Vals#`yam_=`(). => abstract var method yam_=(x$1: Int): Unit
  x$1 => example.Vals#`yam_=`().(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
example.Vals#`yam_=`().(x$1) => param x$1: Int
  Int => scala.Int#
example.Vals#`yfm_=`(). => final var method yfm_=(x$1: Int): Unit
  x$1 => example.Vals#`yfm_=`().(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
example.Vals#`yfm_=`().(x$1) => param x$1: Int
  Int => scala.Int#
example.Vals#`yim_=`(). => var method yim_=(x$1: Int): Unit
  x$1 => example.Vals#`yim_=`().(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
example.Vals#`yim_=`().(x$1) => param x$1: Int
  Int => scala.Int#
example.Vals#`ylm_=`(). => private[this] var method ylm_=(x$1: Int): Unit
  x$1 => example.Vals#`ylm_=`().(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
example.Vals#`ylm_=`().(x$1) => param x$1: Int
  Int => scala.Int#
example.Vals#`ym_=`(). => var method ym_=(x$1: Int): Unit
  x$1 => example.Vals#`ym_=`().(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
example.Vals#`ym_=`().(x$1) => param x$1: Int
  Int => scala.Int#
example.Vals#`yp_=`(). => var method yp_=(x$1: Int): Unit
  x$1 => example.Vals#`yp_=`().(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
example.Vals#`yp_=`().(x$1) => param x$1: Int
  Int => scala.Int#
example.Vals#m(). => method m: Unit
  Unit => scala.Unit#
example.Vals#p(). => private[this] val method p: Int
  Int => scala.Int#
example.Vals#xam(). => abstract val method xam: Int
  Int => scala.Int#
example.Vals#xfm(). => final val method xfm: Int
  Int => scala.Int#
example.Vals#xim(). => implicit val method xim: Int
  Int => scala.Int#
example.Vals#xlm(). => private[this] val method xlm: Int
  Int => scala.Int#
example.Vals#xm(). => val method xm: Int
  Int => scala.Int#
example.Vals#xp(). => val method xp: Int
  Int => scala.Int#
example.Vals#xzlm(). => private[this] lazy val method xzlm: Int
  Int => scala.Int#
example.Vals#xzm(). => lazy val method xzm: Int
  Int => scala.Int#
example.Vals#yam(). => abstract var method yam: Int
  Int => scala.Int#
example.Vals#yfm(). => final var method yfm: Int
  Int => scala.Int#
example.Vals#yim(). => implicit var method yim: Int
  Int => scala.Int#
example.Vals#ylm(). => private[this] var method ylm: Int
  Int => scala.Int#
example.Vals#ym(). => var method ym: Int
  Int => scala.Int#
example.Vals#yp(). => var method yp: Int
  Int => scala.Int#
local0 => val local xl: Int
  Int => scala.Int#
local1 => lazy val local xzl: : Int
  Int => scala.Int#
local2 => implicit val local xil: Int
  Int => scala.Int#
local3 => var local yl: Int
  Int => scala.Int#
local4 => implicit var local yil: Int
  Int => scala.Int#

Occurrences:
[0:8..0:15): example <= example.
[2:15..2:19): Vals <= example.Vals#
[2:19..2:19):  <= example.Vals#`<init>`().
[2:20..2:21): p <= example.Vals#p().
[2:23..2:26): Int => scala.Int#
[2:32..2:34): xp <= example.Vals#xp().
[2:36..2:39): Int => scala.Int#
[2:45..2:47): yp <= example.Vals#yp().
[2:49..2:52): Int => scala.Int#
[3:6..3:8): xm <= example.Vals#xm().
[3:10..3:13): Int => scala.Int#
[3:16..3:19): ??? => scala.Predef.`???`().
[4:6..4:9): xam <= example.Vals#xam().
[4:11..4:14): Int => scala.Int#
[5:20..5:23): xlm <= example.Vals#xlm().
[5:25..5:28): Int => scala.Int#
[5:31..5:34): ??? => scala.Predef.`???`().
[6:11..6:14): xzm <= example.Vals#xzm().
[6:16..6:19): Int => scala.Int#
[6:22..6:25): ??? => scala.Predef.`???`().
[7:25..7:29): xzlm <= example.Vals#xzlm().
[7:31..7:34): Int => scala.Int#
[7:37..7:40): ??? => scala.Predef.`???`().
[8:12..8:15): xfm <= example.Vals#xfm().
[8:17..8:20): Int => scala.Int#
[8:23..8:26): ??? => scala.Predef.`???`().
[9:15..9:18): xim <= example.Vals#xim().
[9:20..9:23): Int => scala.Int#
[9:26..9:29): ??? => scala.Predef.`???`().
[10:6..10:8): ym <= example.Vals#ym().
[10:10..10:13): Int => scala.Int#
[10:16..10:19): ??? => scala.Predef.`???`().
[11:6..11:9): yam <= example.Vals#yam().
[11:11..11:14): Int => scala.Int#
[12:20..12:23): ylm <= example.Vals#ylm().
[12:25..12:28): Int => scala.Int#
[12:31..12:34): ??? => scala.Predef.`???`().
[16:12..16:15): yfm <= example.Vals#yfm().
[16:17..16:20): Int => scala.Int#
[16:23..16:26): ??? => scala.Predef.`???`().
[17:15..17:18): yim <= example.Vals#yim().
[17:20..17:23): Int => scala.Int#
[17:26..17:29): ??? => scala.Predef.`???`().
[18:6..18:7): m <= example.Vals#m().
[19:8..19:10): xl <= local0
[19:12..19:15): Int => scala.Int#
[19:18..19:21): ??? => scala.Predef.`???`().
[20:13..20:16): xzl <= local1
[20:18..20:21): Int => scala.Int#
[20:24..20:27): ??? => scala.Predef.`???`().
[23:17..23:20): xil <= local2
[23:22..23:25): Int => scala.Int#
[23:28..23:31): ??? => scala.Predef.`???`().
[24:8..24:10): yl <= local3
[24:12..24:15): Int => scala.Int#
[24:18..24:21): ??? => scala.Predef.`???`().
[29:17..29:20): yil <= local4
[29:22..29:25): Int => scala.Int#
[29:28..29:31): ??? => scala.Predef.`???`().
[30:4..30:6): yl => local3
[30:9..30:11): xl => local0
[30:12..30:13): + => scala.Int#`+`(+4).
[30:14..30:16): yl => local3
[31:4..31:11): println => scala.Predef.println(+1).
[31:12..31:15): xzl => local1
[32:4..32:7): yil => local4
[32:10..32:13): xil => local2
[32:14..32:15): + => scala.Int#`+`(+4).
[32:16..32:19): yil => local4
[34:2..34:9): println => scala.Predef.println(+1).
[34:10..34:14): xzlm => example.Vals#xzlm().
[35:2..35:5): ylm => example.Vals#ylm().
[35:8..35:11): xlm => example.Vals#xlm().
[35:12..35:13): + => scala.Int#`+`(+4).
[35:14..35:17): ylm => example.Vals#ylm().
[38:7..38:16): ValUsages <= example.ValUsages.
[39:6..39:7): v <= example.ValUsages.v().
[39:9..39:13): Vals => example.Vals#
[39:16..39:19): ??? => scala.Predef.`???`().
[40:2..40:3): v => example.ValUsages.v().
[40:4..40:6): yp => example.Vals#`yp_=`().
[40:9..40:10): v => example.ValUsages.v().
[40:11..40:13): xp => example.Vals#xp().
[40:14..40:15): + => scala.Int#`+`(+4).
[40:16..40:17): v => example.ValUsages.v().
[40:18..40:20): yp => example.Vals#yp().
[41:2..41:3): v => example.ValUsages.v().
[41:4..41:6): ym => example.Vals#`ym_=`().
[41:9..41:10): v => example.ValUsages.v().
[41:11..41:13): xm => example.Vals#xm().
[41:14..41:15): + => scala.Int#`+`(+4).
[41:16..41:17): v => example.ValUsages.v().
[41:18..41:20): ym => example.Vals#ym().
[42:2..42:3): v => example.ValUsages.v().
[42:4..42:7): yam => example.Vals#`yam_=`().
[42:10..42:11): v => example.ValUsages.v().
[42:12..42:15): xam => example.Vals#xam().
[42:16..42:17): + => scala.Int#`+`(+4).
[42:18..42:19): v => example.ValUsages.v().
[42:20..42:23): yam => example.Vals#yam().
[43:2..43:9): println => scala.Predef.println(+1).
[43:10..43:11): v => example.ValUsages.v().
[43:12..43:15): xzm => example.Vals#xzm().
[44:2..44:3): v => example.ValUsages.v().
[44:4..44:7): yfm => example.Vals#`yfm_=`().
[44:10..44:11): v => example.ValUsages.v().
[44:12..44:15): xfm => example.Vals#xfm().
[44:16..44:17): + => scala.Int#`+`(+4).
[44:18..44:19): v => example.ValUsages.v().
[44:20..44:23): yfm => example.Vals#yfm().
[45:2..45:3): v => example.ValUsages.v().
[45:4..45:7): yim => example.Vals#`yim_=`().
[45:10..45:11): v => example.ValUsages.v().
[45:12..45:15): xim => example.Vals#xim().
[45:16..45:17): + => scala.Int#`+`(+4).
[45:18..45:19): v => example.ValUsages.v().
[45:20..45:23): yim => example.Vals#yim().
