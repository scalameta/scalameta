semanticdb/integration/src/main/scala-2.13/example/LeadingInfix.scala
---------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala-2.13/example/LeadingInfix.scala
Text => non-empty
Language => Scala
Symbols => 11 entries
Occurrences => 28 entries

Symbols:
example/LeadingInfixTest# => trait LeadingInfixTest extends AnyRef { +9 decls }
  AnyRef => scala/AnyRef#
example/LeadingInfixTest#`?=`(). => abstract method ?=(right: Any): Unit
  right => example/LeadingInfixTest#`?=`().(right)
  Any => scala/Any#
  Unit => scala/Unit#
example/LeadingInfixTest#`?=`().(right) => param right: Any
  Any => scala/Any#
example/LeadingInfixTest#arg(). => method arg: Int
  Int => scala/Int#
example/LeadingInfixTest#testAttachedMlcDetachedSlcOp(). => method testAttachedMlcDetachedSlcOp: Unit
  Unit => scala/Unit#
example/LeadingInfixTest#testAttachedSlcMlcAttachedOp(). => method testAttachedSlcMlcAttachedOp: Unit
  Unit => scala/Unit#
example/LeadingInfixTest#testDetachedMlcDetachedSlcOp(). => method testDetachedMlcDetachedSlcOp: Unit
  Unit => scala/Unit#
example/LeadingInfixTest#testDetachedSlcMlcAttachedOp(). => method testDetachedSlcMlcAttachedOp: Unit
  Unit => scala/Unit#
example/LeadingInfixTest#testDetachedSlcMlcDetachedOp(). => method testDetachedSlcMlcDetachedOp: Unit
  Unit => scala/Unit#
example/LeadingInfixTest#testNoComments(). => method testNoComments: Unit
  Unit => scala/Unit#
example/LeadingInfixTest#testNoLeadingInfix(). => method testNoLeadingInfix: Unit
  Unit => scala/Unit#

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:22): LeadingInfixTest <= example/LeadingInfixTest#
[3:6..3:8): ?= <= example/LeadingInfixTest#`?=`().
[3:9..3:14): right <= example/LeadingInfixTest#`?=`().(right)
[3:16..3:19): Any => scala/Any#
[3:22..3:26): Unit => scala/Unit#
[4:6..4:9): arg <= example/LeadingInfixTest#arg().
[6:6..6:24): testNoLeadingInfix <= example/LeadingInfixTest#testNoLeadingInfix().
[7:9..7:11): ?= => example/LeadingInfixTest#`?=`().
[7:13..7:16): arg => example/LeadingInfixTest#arg().
[10:6..10:20): testNoComments <= example/LeadingInfixTest#testNoComments().
[12:4..12:6): ?= => example/LeadingInfixTest#`?=`().
[12:8..12:11): arg => example/LeadingInfixTest#arg().
[15:6..15:34): testAttachedSlcMlcAttachedOp <= example/LeadingInfixTest#testAttachedSlcMlcAttachedOp().
[20:4..20:6): ?= => example/LeadingInfixTest#`?=`().
[20:8..20:11): arg => example/LeadingInfixTest#arg().
[23:6..23:34): testDetachedSlcMlcAttachedOp <= example/LeadingInfixTest#testDetachedSlcMlcAttachedOp().
[29:4..29:6): ?= => example/LeadingInfixTest#`?=`().
[29:8..29:11): arg => example/LeadingInfixTest#arg().
[32:6..32:34): testDetachedSlcMlcDetachedOp <= example/LeadingInfixTest#testDetachedSlcMlcDetachedOp().
[38:4..38:6): ?= => example/LeadingInfixTest#`?=`().
[38:8..38:11): arg => example/LeadingInfixTest#arg().
[41:6..41:34): testAttachedMlcDetachedSlcOp <= example/LeadingInfixTest#testAttachedMlcDetachedSlcOp().
[46:4..46:6): ?= => example/LeadingInfixTest#`?=`().
[46:8..46:11): arg => example/LeadingInfixTest#arg().
[49:6..49:34): testDetachedMlcDetachedSlcOp <= example/LeadingInfixTest#testDetachedMlcDetachedSlcOp().
[55:4..55:6): ?= => example/LeadingInfixTest#`?=`().
[55:8..55:11): arg => example/LeadingInfixTest#arg().
semanticdb/integration/src/main/scala-2.13/example/LeadingInfix.scala
---------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala-2.13/example/LeadingInfix.scala
Text => empty
Language => Scala
Diagnostics => 6 entries

Diagnostics:
[11:4..11:8) [warning] a pure expression does nothing in statement position; multiline expressions might require enclosing parentheses
[16:4..16:8) [warning] a pure expression does nothing in statement position; multiline expressions might require enclosing parentheses
[24:4..24:8) [warning] a pure expression does nothing in statement position; multiline expressions might require enclosing parentheses
[33:4..33:8) [warning] a pure expression does nothing in statement position; multiline expressions might require enclosing parentheses
[42:4..42:8) [warning] a pure expression does nothing in statement position; multiline expressions might require enclosing parentheses
[50:4..50:8) [warning] a pure expression does nothing in statement position; multiline expressions might require enclosing parentheses

semanticdb/integration/src/main/scala/example/Access.scala
----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Access.scala
Text => non-empty
Language => Scala
Symbols => 9 entries
Occurrences => 19 entries

Symbols:
example/Access# => class Access extends AnyRef { +8 decls }
  AnyRef => scala/AnyRef#
example/Access#`<init>`(). => primary ctor <init>()
example/Access#m1(). => private method m1: Nothing
  Nothing => scala/Nothing#
example/Access#m2(). => private[this] method m2: Nothing
  Nothing => scala/Nothing#
example/Access#m3(). => private[Access] method m3: Nothing
  Access => example/Access#
  Nothing => scala/Nothing#
example/Access#m4(). => protected method m4: Nothing
  Nothing => scala/Nothing#
example/Access#m5(). => protected[this] method m5: Nothing
  Nothing => scala/Nothing#
example/Access#m6(). => protected[example] method m6: Nothing
  example => example/
  Nothing => scala/Nothing#
example/Access#m7(). => method m7: Nothing
  Nothing => scala/Nothing#

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:12): Access <= example/Access#
[2:13..2:13):  <= example/Access#`<init>`().
[3:14..3:16): m1 <= example/Access#m1().
[3:19..3:22): ??? => scala/Predef.`???`().
[4:20..4:22): m2 <= example/Access#m2().
[4:25..4:28): ??? => scala/Predef.`???`().
[5:10..5:16): Access => example/Access#
[5:22..5:24): m3 <= example/Access#m3().
[5:27..5:30): ??? => scala/Predef.`???`().
[6:16..6:18): m4 <= example/Access#m4().
[6:21..6:24): ??? => scala/Predef.`???`().
[7:22..7:24): m5 <= example/Access#m5().
[7:27..7:30): ??? => scala/Predef.`???`().
[8:12..8:19): example => example/
[8:25..8:27): m6 <= example/Access#m6().
[8:30..8:33): ??? => scala/Predef.`???`().
[9:6..9:8): m7 <= example/Access#m7().
[9:11..9:14): ??? => scala/Predef.`???`().

semanticdb/integration/src/main/scala/example/Advanced.scala
------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Advanced.scala
Text => non-empty
Language => Scala
Symbols => 44 entries
Occurrences => 113 entries
Diagnostics => 1 entries
Synthetics => 1 entries

Symbols:
advanced/C# => class C[T] extends AnyRef { +2 decls }
  T => advanced/C#[T]
  AnyRef => scala/AnyRef#
advanced/C#[T] => typeparam T
advanced/C#`<init>`(). => primary ctor <init>()
advanced/C#t(). => method t: T
  T => advanced/C#[T]
advanced/D# => class D[CC[_]] extends C[CC[_] forSome { type _ }] { +1 decls }
  CC => advanced/D#[CC]
  _ => advanced/D#[CC][_$$1]
  C => advanced/C#
  _ => local10
advanced/D#[CC] => typeparam CC[_]
  _ => advanced/D#[CC][_$$1]
advanced/D#[CC][_$$1] => typeparam _
advanced/D#`<init>`(). => primary ctor <init>()
advanced/Existential# => class Existential extends AnyRef { +4 decls }
  AnyRef => scala/AnyRef#
advanced/Existential#`<init>`(). => primary ctor <init>()
advanced/Existential#e1(). => method e1: List[_] forSome { type _ }
  List => scala/package.List#
  _ => local6
advanced/Existential#e2(). => method e2: C[List[T] forSome { type T }]
  C => advanced/C#
  List => scala/package.List#
  T => local7
advanced/Existential#e4(). => method e4: U[Int] forSome { type U[T <: Int] }
  U => local8
  Int => scala/Int#
  T => local9
advanced/Structural# => class Structural extends AnyRef { +4 decls }
  AnyRef => scala/AnyRef#
advanced/Structural#`<init>`(). => primary ctor <init>()
advanced/Structural#s1(). => method s1: AnyRef { val def x: Int }
  AnyRef => scala/AnyRef#
  x => local0
  Int => scala/Int#
advanced/Structural#s2(). => method s2: AnyRef { val def x: Int }
  AnyRef => scala/AnyRef#
  x => local1
  Int => scala/Int#
advanced/Structural#s3(). => method s3: AnyRef { def m(x: Int): Int }
  AnyRef => scala/AnyRef#
  m => local3
  x => local4
  Int => scala/Int#
advanced/Test. => final object Test extends AnyRef { +13 decls }
  AnyRef => scala/AnyRef#
advanced/Test.e. => val method e: Existential
  Existential => advanced/Existential#
advanced/Test.e1. => val method e1: List[Any]
  List => scala/collection/immutable/List#
  Any => scala/Any#
advanced/Test.e1x. => val method e1x: Any
  Any => scala/Any#
advanced/Test.e2. => val method e2: C[List[T] forSome { type T }]
  C => advanced/C#
  List => scala/package.List#
  T => local7
advanced/Test.e2x. => val method e2x: List[Any]
  List => scala/collection/immutable/List#
  Any => scala/Any#
advanced/Test.e2xx. => val method e2xx: Any
  Any => scala/Any#
advanced/Test.s. => val method s: Structural
  Structural => advanced/Structural#
advanced/Test.s1. => val method s1: AnyRef { val def x: Int }
  AnyRef => scala/AnyRef#
  x => local0
  Int => scala/Int#
advanced/Test.s1x. => val method s1x: Int
  Int => scala/Int#
advanced/Test.s2. => val method s2: AnyRef { val def x: Int }
  AnyRef => scala/AnyRef#
  x => local1
  Int => scala/Int#
advanced/Test.s2x. => val method s2x: Int
  Int => scala/Int#
advanced/Test.s3. => val method s3: AnyRef { def m(x: Int): Int }
  AnyRef => scala/AnyRef#
  m => local3
  x => local4
  Int => scala/Int#
advanced/Test.s3x. => val method s3x: Int
  Int => scala/Int#
local0 => abstract val method x: Int
  Int => scala/Int#
local1 => val method x: Int
  Int => scala/Int#
local2 => final class $anon extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
local3 => method m(x: Int): Int
  x => local4
  Int => scala/Int#
local4 => param x: Int
  Int => scala/Int#
local5 => final class $anon extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
local7 => abstract type T
local8 => abstract type U[T <: Int]
  T => local9
  Int => scala/Int#
local9 => typeparam T <: Int
  Int => scala/Int#
local11 => val local e3: List[_]
  List => scala/package.List#
  _ => local12
local12 => abstract type _
local13 => val local e3x: _
  _ => local12

Occurrences:
[0:8..0:16): advanced <= advanced/
[2:7..2:12): scala => scala/
[2:13..2:21): language => scala/language.
[2:22..2:34): existentials => scala/language.existentials.
[3:7..3:12): scala => scala/
[3:13..3:21): language => scala/language.
[3:22..3:33): higherKinds => scala/language.higherKinds.
[4:7..4:12): scala => scala/
[4:13..4:21): language => scala/language.
[4:22..4:37): reflectiveCalls => scala/language.reflectiveCalls.
[6:6..6:7): C <= advanced/C#
[6:8..6:9): T <= advanced/C#[T]
[6:11..6:11):  <= advanced/C#`<init>`().
[7:6..7:7): t <= advanced/C#t().
[7:9..7:10): T => advanced/C#[T]
[7:13..7:16): ??? => scala/Predef.`???`().
[10:6..10:16): Structural <= advanced/Structural#
[10:17..10:17):  <= advanced/Structural#`<init>`().
[11:6..11:8): s1 <= advanced/Structural#s1().
[11:16..11:17): x <= local0
[11:19..11:22): Int => scala/Int#
[11:27..11:30): ??? => scala/Predef.`???`().
[12:6..12:8): s2 <= advanced/Structural#s2().
[12:15..12:15):  <= local2
[12:21..12:22): x <= local1
[12:24..12:27): Int => scala/Int#
[12:30..12:33): ??? => scala/Predef.`???`().
[13:6..13:8): s3 <= advanced/Structural#s3().
[13:15..13:15):  <= local5
[13:21..13:22): m <= local3
[13:23..13:24): x <= local4
[13:26..13:29): Int => scala/Int#
[13:32..13:35): Int => scala/Int#
[13:38..13:41): ??? => scala/Predef.`???`().
[16:6..16:17): Existential <= advanced/Existential#
[16:18..16:18):  <= advanced/Existential#`<init>`().
[17:6..17:8): e1 <= advanced/Existential#e1().
[17:10..17:14): List => scala/package.List#
[17:20..17:23): ??? => scala/Predef.`???`().
[18:6..18:8): e2 <= advanced/Existential#e2().
[18:10..18:11): C => advanced/C#
[18:12..18:16): List => scala/package.List#
[18:17..18:18): T => local7
[18:35..18:36): T <= local7
[18:42..18:45): ??? => scala/Predef.`???`().
[19:6..19:8): e4 <= advanced/Existential#e4().
[19:10..19:11): U => local8
[19:12..19:15): Int => scala/Int#
[19:32..19:33): U <= local8
[19:34..19:35): T <= local9
[19:48..19:51): ??? => scala/Predef.`???`().
[22:6..22:7): D <= advanced/D#
[22:8..22:10): CC <= advanced/D#[CC]
[22:15..22:15):  <= advanced/D#`<init>`().
[22:23..22:24): C => advanced/C#
[22:25..22:27): CC => advanced/D#[CC]
[22:31..22:31):  => advanced/C#`<init>`().
[24:7..24:11): Test <= advanced/Test.
[25:6..25:7): s <= advanced/Test.s.
[25:14..25:24): Structural => advanced/Structural#
[25:24..25:24):  => advanced/Structural#`<init>`().
[26:6..26:8): s1 <= advanced/Test.s1.
[26:11..26:12): s => advanced/Test.s.
[26:13..26:15): s1 => advanced/Structural#s1().
[27:6..27:9): s1x <= advanced/Test.s1x.
[27:12..27:13): s => advanced/Test.s.
[27:14..27:16): s1 => advanced/Structural#s1().
[27:17..27:18): x => local0
[28:6..28:8): s2 <= advanced/Test.s2.
[28:11..28:12): s => advanced/Test.s.
[28:13..28:15): s2 => advanced/Structural#s2().
[29:6..29:9): s2x <= advanced/Test.s2x.
[29:12..29:13): s => advanced/Test.s.
[29:14..29:16): s2 => advanced/Structural#s2().
[29:17..29:18): x => local1
[30:6..30:8): s3 <= advanced/Test.s3.
[30:11..30:12): s => advanced/Test.s.
[30:13..30:15): s3 => advanced/Structural#s3().
[31:6..31:9): s3x <= advanced/Test.s3x.
[31:12..31:13): s => advanced/Test.s.
[31:14..31:16): s3 => advanced/Structural#s3().
[31:17..31:18): m => local3
[31:19..31:22): ??? => scala/Predef.`???`().
[33:6..33:7): e <= advanced/Test.e.
[33:14..33:25): Existential => advanced/Existential#
[33:25..33:25):  => advanced/Existential#`<init>`().
[34:6..34:8): e1 <= advanced/Test.e1.
[34:11..34:12): e => advanced/Test.e.
[34:13..34:15): e1 => advanced/Existential#e1().
[35:6..35:9): e1x <= advanced/Test.e1x.
[35:12..35:13): e => advanced/Test.e.
[35:14..35:16): e1 => advanced/Existential#e1().
[35:17..35:21): head => scala/collection/IterableOps#head().
[36:6..36:8): e2 <= advanced/Test.e2.
[36:11..36:12): e => advanced/Test.e.
[36:13..36:15): e2 => advanced/Existential#e2().
[37:6..37:9): e2x <= advanced/Test.e2x.
[37:12..37:13): e => advanced/Test.e.
[37:14..37:16): e2 => advanced/Existential#e2().
[37:17..37:18): t => advanced/C#t().
[38:6..38:10): e2xx <= advanced/Test.e2xx.
[38:13..38:14): e => advanced/Test.e.
[38:15..38:17): e2 => advanced/Existential#e2().
[38:18..38:19): t => advanced/C#t().
[38:20..38:24): head => scala/collection/IterableOps#head().
[39:2..39:9): locally => scala/Predef.locally().
[40:5..40:8): ??? => scala/Predef.`???`().
[40:11..40:14): Any => scala/Any#
[41:11..41:13): e3 <= local11
[41:15..41:19): List => scala/package.List#
[42:12..42:15): e3x <= local13
[42:18..42:20): e3 => local11
[42:21..42:25): head => scala/collection/IterableOps#head().

Diagnostics:
[3:0..3:33) [warning] Unused import of deprecated lazy value higherKinds: higherKinds no longer needs to be imported explicitly

Synthetics:
[39:2..39:9): locally => *[Unit]
  Unit => scala/Unit#

semanticdb/integration/src/main/scala/example/Annotations.scala
---------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Annotations.scala
Text => non-empty
Language => Scala
Symbols => 21 entries
Occurrences => 48 entries

Symbols:
annot/Alias. => final object Alias extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
annot/Alias.A# => type A = ClassAnnotation @param
  ClassAnnotation => com/javacp/annot/ClassAnnotation#
  param => scala/annotation/meta/param#
annot/Annotations# => @ClassAnnotation class Annotations[@TypeParameterAnnotation T] extends AnyRef { self: AnyRef => +5 decls }
  ClassAnnotation => com/javacp/annot/ClassAnnotation#
  T => annot/Annotations#[T]
  TypeParameterAnnotation => com/javacp/annot/TypeParameterAnnotation#
  AnyRef => scala/AnyRef#
annot/Annotations#T# => @TypeAnnotation abstract type T
  TypeAnnotation => com/javacp/annot/TypeAnnotation#
annot/Annotations#[T] => @TypeParameterAnnotation typeparam T
  TypeParameterAnnotation => com/javacp/annot/TypeParameterAnnotation#
annot/Annotations#`<init>`(). => primary ctor <init>(@ParameterAnnotation x: T)
  x => annot/Annotations#`<init>`().(x)
  ParameterAnnotation => com/javacp/annot/ParameterAnnotation#
  T => annot/Annotations#[T]
annot/Annotations#`<init>`().(x) => @ParameterAnnotation param x: T
  ParameterAnnotation => com/javacp/annot/ParameterAnnotation#
  T => annot/Annotations#[T]
annot/Annotations#field. => val method field: Int
  Int => scala/Int#
annot/Annotations#method(). => @MethodAnnotation method method: Int
  MethodAnnotation => com/javacp/annot/MethodAnnotation#
  Int => scala/Int#
annot/Annotations#x. => @ParameterAnnotation private[this] val method x: T
  ParameterAnnotation => com/javacp/annot/ParameterAnnotation#
  T => annot/Annotations#[T]
annot/B# => class B extends AnyRef { +3 decls }
  AnyRef => scala/AnyRef#
annot/B#`<init>`(). => @ConstructorAnnotation primary ctor <init>(x: Int)
  ConstructorAnnotation => com/javacp/annot/ConstructorAnnotation#
  x => annot/B#`<init>`().(x)
  Int => scala/Int#
annot/B#`<init>`().(x) => param x: Int
  Int => scala/Int#
annot/B#`<init>`(+1). => @ConstructorAnnotation ctor <init>()
  ConstructorAnnotation => com/javacp/annot/ConstructorAnnotation#
annot/B#x. => private[this] val method x: Int
  Int => scala/Int#
annot/M. => @ObjectAnnotation final object M extends AnyRef { +1 decls }
  ObjectAnnotation => com/javacp/annot/ObjectAnnotation#
  AnyRef => scala/AnyRef#
annot/M.m(). => @MacroAnnotation macro m[TT]: Int
  MacroAnnotation => com/javacp/annot/MacroAnnotation#
  TT => annot/M.m().[TT]
  Int => scala/Int#
annot/M.m().[TT] => typeparam TT
annot/T# => @TraitAnnotation trait T extends AnyRef
  TraitAnnotation => com/javacp/annot/TraitAnnotation#
  AnyRef => scala/AnyRef#
local0 => selfparam self: AnyRef
  AnyRef => scala/AnyRef#
local1 => @LocalAnnotation val local local: Int
  LocalAnnotation => com/javacp/annot/LocalAnnotation#
  Int => scala/Int#

Occurrences:
[0:8..0:13): annot <= annot/
[2:7..2:10): com => com/
[2:11..2:17): javacp => com/javacp/
[2:18..2:23): annot => com/javacp/annot/
[3:7..3:12): scala => scala/
[3:13..3:23): annotation => scala/annotation/
[3:24..3:28): meta => scala/annotation/meta/
[4:7..4:12): scala => scala/
[4:13..4:21): language => scala/language.
[4:22..4:34): experimental => scala/language.experimental.
[4:35..4:41): macros => scala/language.experimental.macros.
[6:1..6:16): ClassAnnotation => com/javacp/annot/ClassAnnotation#
[7:6..7:17): Annotations <= annot/Annotations#
[7:19..7:42): TypeParameterAnnotation => com/javacp/annot/TypeParameterAnnotation#
[7:43..7:44): T <= annot/Annotations#[T]
[7:45..7:45):  <= annot/Annotations#`<init>`().
[7:47..7:66): ParameterAnnotation => com/javacp/annot/ParameterAnnotation#
[7:67..7:68): x <= annot/Annotations#x.
[7:70..7:71): T => annot/Annotations#[T]
[7:75..7:79): self <= local0
[8:3..8:18): FieldAnnotation => com/javacp/annot/FieldAnnotation#
[9:6..9:11): field <= annot/Annotations#field.
[11:3..11:19): MethodAnnotation => com/javacp/annot/MethodAnnotation#
[12:6..12:12): method <= annot/Annotations#method().
[13:5..13:20): LocalAnnotation => com/javacp/annot/LocalAnnotation#
[14:8..14:13): local <= local1
[15:4..15:9): local => local1
[17:3..17:17): TypeAnnotation => com/javacp/annot/TypeAnnotation#
[18:7..18:8): T <= annot/Annotations#T#
[21:6..21:7): B <= annot/B#
[21:9..21:30): ConstructorAnnotation => com/javacp/annot/ConstructorAnnotation#
[21:33..21:33):  <= annot/B#`<init>`().
[21:34..21:35): x <= annot/B#x.
[21:37..21:40): Int => scala/Int#
[22:3..22:24): ConstructorAnnotation => com/javacp/annot/ConstructorAnnotation#
[23:19..23:19):  => annot/B#`<init>`().
[26:1..26:17): ObjectAnnotation => com/javacp/annot/ObjectAnnotation#
[27:7..27:8): M <= annot/M.
[28:3..28:18): MacroAnnotation => com/javacp/annot/MacroAnnotation#
[29:6..29:7): m <= annot/M.m().
[29:8..29:10): TT <= annot/M.m().[TT]
[29:13..29:16): Int => scala/Int#
[29:25..29:28): ??? => scala/Predef.`???`().
[32:1..32:16): TraitAnnotation => com/javacp/annot/TraitAnnotation#
[33:6..33:7): T <= annot/T#
[35:7..35:12): Alias <= annot/Alias.
[36:7..36:8): A <= annot/Alias.A#
[36:11..36:26): ClassAnnotation => com/javacp/annot/ClassAnnotation#

semanticdb/integration/src/main/scala/example/Anonymous.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Anonymous.scala
Text => non-empty
Language => Scala
Symbols => 11 entries
Occurrences => 26 entries
Diagnostics => 2 entries
Synthetics => 2 entries

Symbols:
example/Anonymous# => class Anonymous extends AnyRef { +4 decls }
  AnyRef => scala/AnyRef#
example/Anonymous#Foo# => trait Foo extends AnyRef
  AnyRef => scala/AnyRef#
example/Anonymous#`<init>`(). => primary ctor <init>()
example/Anonymous#m1(). => method m1[T[_], _]: Nothing
  T => example/Anonymous#m1().[T]
  _ => example/Anonymous#m1().[T][_$$1]
  _ => example/Anonymous#m1().[_$$2]
  Nothing => scala/Nothing#
example/Anonymous#m1().[T] => typeparam T[_]
  _ => example/Anonymous#m1().[T][_$$1]
example/Anonymous#m1().[T][_$$1] => typeparam _
example/Anonymous#m1().[_$$2] => typeparam _
example/Anonymous#m2(). => method m2: Map[_, List[_] forSome { type _ }] forSome { type _ }
  Map => scala/Predef.Map#
  _ => local0
  List => scala/package.List#
  _ => local1
local2 => abstract type _
local3 => val local x: Function1[Int, Int]
  Function1 => scala/Function1#
  Int => scala/Int#
local4 => final class $anon extends AnyRef with Foo
  AnyRef => scala/AnyRef#
  Foo => example/Anonymous#Foo#

Occurrences:
[0:8..0:15): example <= example/
[1:7..1:12): scala => scala/
[1:13..1:21): language => scala/language.
[1:22..1:33): higherKinds => scala/language.higherKinds.
[3:6..3:15): Anonymous <= example/Anonymous#
[3:16..3:16):  <= example/Anonymous#`<init>`().
[4:8..4:17): Anonymous => example/Anonymous#
[6:6..6:8): m1 <= example/Anonymous#m1().
[6:9..6:10): T <= example/Anonymous#m1().[T]
[6:20..6:23): ??? => scala/Predef.`???`().
[7:6..7:8): m2 <= example/Anonymous#m2().
[7:10..7:13): Map => scala/Predef.Map#
[7:17..7:21): List => scala/package.List#
[7:28..7:31): ??? => scala/Predef.`???`().
[8:2..8:9): locally => scala/Predef.locally().
[9:4..9:7): ??? => scala/Predef.`???`().
[9:24..9:28): List => scala/package.List#
[11:2..11:9): locally => scala/Predef.locally().
[12:8..12:9): x <= local3
[12:11..12:14): Int => scala/Int#
[12:18..12:21): Int => scala/Int#
[12:29..12:32): ??? => scala/Predef.`???`().
[15:8..15:11): Foo <= example/Anonymous#Foo#
[16:6..16:6):  <= local4
[16:6..16:9): Foo => example/Anonymous#Foo#
[16:10..16:10):  => java/lang/Object#`<init>`().

Diagnostics:
[1:0..1:33) [warning] Unused import of deprecated lazy value higherKinds: higherKinds no longer needs to be imported explicitly
[6:15..6:15) [warning] Top-level wildcard is not allowed

Synthetics:
[8:2..8:9): locally => *[Unit]
  Unit => scala/Unit#
[11:2..11:9): locally => *[Unit]
  Unit => scala/Unit#

semanticdb/integration/src/main/scala/example/Classes.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Classes.scala
Text => non-empty
Language => Scala
Symbols => 149 entries
Occurrences => 126 entries
Synthetics => 2 entries

Symbols:
classes/C1# => final class C1 extends AnyVal { +4 decls }
  AnyVal => scala/AnyVal#
classes/C1#`<init>`(). => primary ctor <init>(val x1: Int)
  x1 => classes/C1#`<init>`().(x1)
  Int => scala/Int#
classes/C1#`<init>`().(x1) => val param x1: Int
  Int => scala/Int#
classes/C1#equals(). => method equals(x$1: Any): Boolean <: scala/Any#equals().
  x$1 => classes/C1#equals().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
classes/C1#equals().(x$1) => param x$1: Any
  Any => scala/Any#
classes/C1#hashCode(). => method hashCode(): Int <: scala/Any#hashCode().
  Int => scala/Int#
classes/C1#x1. => val method x1: Int
  Int => scala/Int#
classes/C2# => final class C2 extends AnyVal { +4 decls }
  AnyVal => scala/AnyVal#
classes/C2#`<init>`(). => primary ctor <init>(val x2: Int)
  x2 => classes/C2#`<init>`().(x2)
  Int => scala/Int#
classes/C2#`<init>`().(x2) => val param x2: Int
  Int => scala/Int#
classes/C2#equals(). => method equals(x$1: Any): Boolean <: scala/Any#equals().
  x$1 => classes/C2#equals().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
classes/C2#equals().(x$1) => param x$1: Any
  Any => scala/Any#
classes/C2#hashCode(). => method hashCode(): Int <: scala/Any#hashCode().
  Int => scala/Int#
classes/C2#x2. => val method x2: Int
  Int => scala/Int#
classes/C2. => final object C2 extends AnyRef
  AnyRef => scala/AnyRef#
classes/C3# => case class C3 extends AnyRef with Product with Serializable { +13 decls }
  AnyRef => scala/AnyRef#
  Product => scala/Product#
  Serializable => scala/package.Serializable#
classes/C3#`<init>`(). => primary ctor <init>(val x: Int)
  x => classes/C3#`<init>`().(x)
  Int => scala/Int#
classes/C3#`<init>`().(x) => val param x: Int
  Int => scala/Int#
classes/C3#canEqual(). => method canEqual(x$1: Any): Boolean <: scala/Equals#canEqual().
  x$1 => classes/C3#canEqual().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
classes/C3#canEqual().(x$1) => param x$1: Any
  Any => scala/Any#
classes/C3#copy$default$1(). => method copy$default$1: Int @uncheckedVariance
  Int => scala/Int#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
classes/C3#copy(). => method copy(x: Int): C3
  x => classes/C3#copy().(x)
  Int => scala/Int#
  C3 => classes/C3#
classes/C3#copy().(x) => default param x: Int
  Int => scala/Int#
classes/C3#equals(). => method equals(x$1: Any): Boolean <: scala/Equals#equals()., java/lang/Object#equals()., scala/Any#equals().
  x$1 => classes/C3#equals().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
classes/C3#equals().(x$1) => param x$1: Any
  Any => scala/Any#
classes/C3#hashCode(). => method hashCode(): Int <: java/lang/Object#hashCode()., scala/Any#hashCode().
  Int => scala/Int#
classes/C3#productArity(). => method productArity: Int <: scala/Product#productArity().
  Int => scala/Int#
classes/C3#productElement(). => method productElement(x$1: Int): Any <: scala/Product#productElement().
  x$1 => classes/C3#productElement().(x$1)
  Int => scala/Int#
  Any => scala/Any#
classes/C3#productElement().(x$1) => param x$1: Int
  Int => scala/Int#
classes/C3#productElementName(). => method productElementName(x$1: Int): String <: scala/Product#productElementName().
  x$1 => classes/C3#productElementName().(x$1)
  Int => scala/Int#
  String => java/lang/String#
classes/C3#productElementName().(x$1) => param x$1: Int
  Int => scala/Int#
classes/C3#productIterator(). => method productIterator: Iterator[Any] <: scala/Product#productIterator().
  Iterator => scala/collection/Iterator#
  Any => scala/Any#
classes/C3#productPrefix(). => method productPrefix: String <: scala/Product#productPrefix().
  String => java/lang/String#
classes/C3#toString(). => method toString(): String <: java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
classes/C3#x. => val method x: Int
  Int => scala/Int#
classes/C3. => final object C3 extends AbstractFunction1[Int, C3] with Serializable { +4 decls }
  AbstractFunction1 => scala/runtime/AbstractFunction1#
  Int => scala/Int#
  C3 => classes/C3#
  Serializable => java/io/Serializable#
classes/C3.apply(). => method apply(x: Int): C3 <: scala/Function1#apply().
  x => classes/C3.apply().(x)
  Int => scala/Int#
  C3 => classes/C3#
classes/C3.apply().(x) => param x: Int
  Int => scala/Int#
classes/C3.toString(). => final method toString(): String <: scala/Function1#toString()., java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
classes/C3.unapply(). => method unapply(x$0: C3): Option[Int]
  x$0 => classes/C3.unapply().(x$0)
  C3 => classes/C3#
  Option => scala/Option#
  Int => scala/Int#
classes/C3.unapply().(x$0) => param x$0: C3
  C3 => classes/C3#
classes/C3.writeReplace(). => private method writeReplace(): Object
  Object => java/lang/Object#
classes/C4# => case class C4 extends AnyRef with Product with Serializable { +13 decls }
  AnyRef => scala/AnyRef#
  Product => scala/Product#
  Serializable => scala/package.Serializable#
classes/C4#`<init>`(). => primary ctor <init>(val x: Int)
  x => classes/C4#`<init>`().(x)
  Int => scala/Int#
classes/C4#`<init>`().(x) => val param x: Int
  Int => scala/Int#
classes/C4#canEqual(). => method canEqual(x$1: Any): Boolean <: scala/Equals#canEqual().
  x$1 => classes/C4#canEqual().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
classes/C4#canEqual().(x$1) => param x$1: Any
  Any => scala/Any#
classes/C4#copy$default$1(). => method copy$default$1: Int @uncheckedVariance
  Int => scala/Int#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
classes/C4#copy(). => method copy(x: Int): C4
  x => classes/C4#copy().(x)
  Int => scala/Int#
  C4 => classes/C4#
classes/C4#copy().(x) => default param x: Int
  Int => scala/Int#
classes/C4#equals(). => method equals(x$1: Any): Boolean <: scala/Equals#equals()., java/lang/Object#equals()., scala/Any#equals().
  x$1 => classes/C4#equals().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
classes/C4#equals().(x$1) => param x$1: Any
  Any => scala/Any#
classes/C4#hashCode(). => method hashCode(): Int <: java/lang/Object#hashCode()., scala/Any#hashCode().
  Int => scala/Int#
classes/C4#productArity(). => method productArity: Int <: scala/Product#productArity().
  Int => scala/Int#
classes/C4#productElement(). => method productElement(x$1: Int): Any <: scala/Product#productElement().
  x$1 => classes/C4#productElement().(x$1)
  Int => scala/Int#
  Any => scala/Any#
classes/C4#productElement().(x$1) => param x$1: Int
  Int => scala/Int#
classes/C4#productElementName(). => method productElementName(x$1: Int): String <: scala/Product#productElementName().
  x$1 => classes/C4#productElementName().(x$1)
  Int => scala/Int#
  String => java/lang/String#
classes/C4#productElementName().(x$1) => param x$1: Int
  Int => scala/Int#
classes/C4#productIterator(). => method productIterator: Iterator[Any] <: scala/Product#productIterator().
  Iterator => scala/collection/Iterator#
  Any => scala/Any#
classes/C4#productPrefix(). => method productPrefix: String <: scala/Product#productPrefix().
  String => java/lang/String#
classes/C4#toString(). => method toString(): String <: java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
classes/C4#x. => val method x: Int
  Int => scala/Int#
classes/C4. => final object C4 extends AnyRef with Serializable { +3 decls }
  AnyRef => scala/AnyRef#
  Serializable => java/io/Serializable#
classes/C4.apply(). => method apply(x: Int): C4
  x => classes/C4.apply().(x)
  Int => scala/Int#
  C4 => classes/C4#
classes/C4.apply().(x) => param x: Int
  Int => scala/Int#
classes/C4.unapply(). => method unapply(x$0: C4): Option[Int]
  x$0 => classes/C4.unapply().(x$0)
  C4 => classes/C4#
  Option => scala/Option#
  Int => scala/Int#
classes/C4.unapply().(x$0) => param x$0: C4
  C4 => classes/C4#
classes/C4.writeReplace(). => private method writeReplace(): Object
  Object => java/lang/Object#
classes/C6# => case class C6 extends AnyRef with Product with Serializable { +13 decls }
  AnyRef => scala/AnyRef#
  Product => scala/Product#
  Serializable => scala/package.Serializable#
classes/C6#`<init>`(). => primary ctor <init>(val x: Int)
  x => classes/C6#`<init>`().(x)
  Int => scala/Int#
classes/C6#`<init>`().(x) => val param x: Int
  Int => scala/Int#
classes/C6#canEqual(). => method canEqual(x$1: Any): Boolean <: scala/Equals#canEqual().
  x$1 => classes/C6#canEqual().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
classes/C6#canEqual().(x$1) => param x$1: Any
  Any => scala/Any#
classes/C6#copy$default$1(). => method copy$default$1: Int @uncheckedVariance
  Int => scala/Int#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
classes/C6#copy(). => method copy(x: Int): C6
  x => classes/C6#copy().(x)
  Int => scala/Int#
  C6 => classes/C6#
classes/C6#copy().(x) => default param x: Int
  Int => scala/Int#
classes/C6#equals(). => method equals(x$1: Any): Boolean <: scala/Equals#equals()., java/lang/Object#equals()., scala/Any#equals().
  x$1 => classes/C6#equals().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
classes/C6#equals().(x$1) => param x$1: Any
  Any => scala/Any#
classes/C6#hashCode(). => method hashCode(): Int <: java/lang/Object#hashCode()., scala/Any#hashCode().
  Int => scala/Int#
classes/C6#productArity(). => method productArity: Int <: scala/Product#productArity().
  Int => scala/Int#
classes/C6#productElement(). => method productElement(x$1: Int): Any <: scala/Product#productElement().
  x$1 => classes/C6#productElement().(x$1)
  Int => scala/Int#
  Any => scala/Any#
classes/C6#productElement().(x$1) => param x$1: Int
  Int => scala/Int#
classes/C6#productElementName(). => method productElementName(x$1: Int): String <: scala/Product#productElementName().
  x$1 => classes/C6#productElementName().(x$1)
  Int => scala/Int#
  String => java/lang/String#
classes/C6#productElementName().(x$1) => param x$1: Int
  Int => scala/Int#
classes/C6#productIterator(). => method productIterator: Iterator[Any] <: scala/Product#productIterator().
  Iterator => scala/collection/Iterator#
  Any => scala/Any#
classes/C6#productPrefix(). => method productPrefix: String <: scala/Product#productPrefix().
  String => java/lang/String#
classes/C6#toString(). => method toString(): String <: java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
classes/C6#x. => private val method x: Int
  Int => scala/Int#
classes/C6. => final object C6 extends AbstractFunction1[Int, C6] with Serializable { +4 decls }
  AbstractFunction1 => scala/runtime/AbstractFunction1#
  Int => scala/Int#
  C6 => classes/C6#
  Serializable => java/io/Serializable#
classes/C6.apply(). => method apply(x: Int): C6 <: scala/Function1#apply().
  x => classes/C6.apply().(x)
  Int => scala/Int#
  C6 => classes/C6#
classes/C6.apply().(x) => param x: Int
  Int => scala/Int#
classes/C6.toString(). => final method toString(): String <: scala/Function1#toString()., java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
classes/C6.unapply(). => method unapply(x$0: C6): Option[Int]
  x$0 => classes/C6.unapply().(x$0)
  C6 => classes/C6#
  Option => scala/Option#
  Int => scala/Int#
classes/C6.unapply().(x$0) => param x$0: C6
  C6 => classes/C6#
classes/C6.writeReplace(). => private method writeReplace(): Object
  Object => java/lang/Object#
classes/C7# => class C7 extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
classes/C7#`<init>`(). => primary ctor <init>(x: Int)
  x => classes/C7#`<init>`().(x)
  Int => scala/Int#
classes/C7#`<init>`().(x) => param x: Int
  Int => scala/Int#
classes/C7#x. => private[this] val method x: Int
  Int => scala/Int#
classes/C8# => class C8 extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
classes/C8#`<init>`(). => primary ctor <init>(x: Int)
  x => classes/C8#`<init>`().(x)
  Int => scala/Int#
classes/C8#`<init>`().(x) => param x: Int
  Int => scala/Int#
classes/C8#x. => private[this] val method x: Int
  Int => scala/Int#
classes/C9# => class C9 extends AnyRef { +3 decls }
  AnyRef => scala/AnyRef#
classes/C9#`<init>`(). => primary ctor <init>(var x: Int)
  x => classes/C9#`<init>`().(x)
  Int => scala/Int#
classes/C9#`<init>`().(x) => var param x: Int
  Int => scala/Int#
classes/C9#`x_=`(). => private[this] var method x_=(x$1: Int): Unit
  x$1 => classes/C9#`x_=`().(x$1)
  Int => scala/Int#
  Unit => scala/Unit#
classes/C9#`x_=`().(x$1) => param x$1: Int
  Int => scala/Int#
classes/C9#x(). => private[this] var method x: Int
  Int => scala/Int#
classes/Chain. => final object Chain extends AnyRef { +4 decls }
  AnyRef => scala/AnyRef#
classes/Chain.A# => class A extends AnyRef { +5 decls }
  AnyRef => scala/AnyRef#
classes/Chain.A#`<init>`(). => primary ctor <init>()
classes/Chain.A#tst1(). => method tst1(i: Int): A
  i => classes/Chain.A#tst1().(i)
  Int => scala/Int#
  A => classes/Chain.A#
classes/Chain.A#tst1().(i) => param i: Int
  Int => scala/Int#
classes/Chain.A#tst2(). => method tst2(i: Int): A
  i => classes/Chain.A#tst2().(i)
  Int => scala/Int#
  A => classes/Chain.A#
classes/Chain.A#tst2().(i) => param i: Int
  Int => scala/Int#
classes/Chain.A#tst3(). => method tst3(i: Int, j: Int): A
  i => classes/Chain.A#tst3().(i)
  Int => scala/Int#
  j => classes/Chain.A#tst3().(j)
  A => classes/Chain.A#
classes/Chain.A#tst3().(i) => param i: Int
  Int => scala/Int#
classes/Chain.A#tst3().(j) => param j: Int
  Int => scala/Int#
classes/Chain.A#tst4(). => method tst4(i: Int, j: A): A
  i => classes/Chain.A#tst4().(i)
  Int => scala/Int#
  j => classes/Chain.A#tst4().(j)
  A => classes/Chain.A#
classes/Chain.A#tst4().(i) => param i: Int
  Int => scala/Int#
classes/Chain.A#tst4().(j) => param j: A
  A => classes/Chain.A#
classes/Chain.a. => val method a: A
  A => classes/Chain.A#
classes/Chain.tst$default$2(). => method tst$default$2: A @uncheckedVariance
  A => classes/Chain.A#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
classes/Chain.tst(). => method tst(i: Int, j: A): A
  i => classes/Chain.tst().(i)
  Int => scala/Int#
  j => classes/Chain.tst().(j)
  A => classes/Chain.A#
classes/Chain.tst().(i) => param i: Int
  Int => scala/Int#
classes/Chain.tst().(j) => default param j: A
  A => classes/Chain.A#
classes/M. => final object M extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
classes/M.C5# => implicit class C5 extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
classes/M.C5#`<init>`(). => primary ctor <init>(x: Int)
  x => classes/M.C5#`<init>`().(x)
  Int => scala/Int#
classes/M.C5#`<init>`().(x) => param x: Int
  Int => scala/Int#
classes/M.C5#x. => private[this] val method x: Int
  Int => scala/Int#
classes/M.C5(). => implicit method C5(x: Int): C5
  x => classes/M.C5().(x)
  Int => scala/Int#
  C5 => classes/M.C5#
classes/M.C5().(x) => param x: Int
  Int => scala/Int#
classes/N. => final object N extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
classes/N.anonClass. => val method anonClass: C7 { val def local: Nothing }
  C7 => classes/C7#
  local => local9
  Nothing => scala/Nothing#
classes/N.anonFun. => val method anonFun: List[Int]
  List => scala/collection/immutable/List#
  Int => scala/Int#
local0 => val local C1$1: C1
  C1 => classes/C1#
local1 => val local C2$1: C2
  C2 => classes/C2#
local2 => var local acc: Int
  Int => scala/Int#
local3 => val local C3$1: C3
  C3 => classes/C3#
local4 => var local acc: Int
  Int => scala/Int#
local5 => val local C4$1: C4
  C4 => classes/C4#
local6 => var local acc: Int
  Int => scala/Int#
local7 => val local C6$1: C6
  C6 => classes/C6#
local8 => final class $anon extends C7 { +1 decls }
  C7 => classes/C7#
local9 => val method local: Nothing
  Nothing => scala/Nothing#
local10 => param i: Int
  Int => scala/Int#
local11 => val local local: Int
  Int => scala/Int#

Occurrences:
[0:8..0:15): classes <= classes/
[2:6..2:8): C1 <= classes/C1#
[2:8..2:8):  <= classes/C1#`<init>`().
[2:13..2:15): x1 <= classes/C1#x1.
[2:17..2:20): Int => scala/Int#
[2:30..2:36): AnyVal => scala/AnyVal#
[2:36..2:36):  => scala/AnyVal#`<init>`().
[4:6..4:8): C2 <= classes/C2#
[4:8..4:8):  <= classes/C2#`<init>`().
[4:13..4:15): x2 <= classes/C2#x2.
[4:17..4:20): Int => scala/Int#
[4:30..4:36): AnyVal => scala/AnyVal#
[4:36..4:36):  => scala/AnyVal#`<init>`().
[5:7..5:9): C2 <= classes/C2.
[7:11..7:13): C3 <= classes/C3#
[7:13..7:13):  <= classes/C3#`<init>`().
[7:14..7:15): x <= classes/C3#x.
[7:17..7:20): Int => scala/Int#
[9:11..9:13): C4 <= classes/C4#
[9:13..9:13):  <= classes/C4#`<init>`().
[9:14..9:15): x <= classes/C4#x.
[9:17..9:20): Int => scala/Int#
[10:7..10:9): C4 <= classes/C4.
[12:7..12:8): M <= classes/M.
[13:17..13:19): C5 <= classes/M.C5#
[13:19..13:19):  <= classes/M.C5#`<init>`().
[13:20..13:21): x <= classes/M.C5#x.
[13:23..13:26): Int => scala/Int#
[16:11..16:13): C6 <= classes/C6#
[16:13..16:13):  <= classes/C6#`<init>`().
[16:26..16:27): x <= classes/C6#x.
[16:29..16:32): Int => scala/Int#
[18:6..18:8): C7 <= classes/C7#
[18:8..18:8):  <= classes/C7#`<init>`().
[18:9..18:10): x <= classes/C7#x.
[18:12..18:15): Int => scala/Int#
[20:6..20:8): C8 <= classes/C8#
[20:8..20:8):  <= classes/C8#`<init>`().
[20:27..20:28): x <= classes/C8#x.
[20:30..20:33): Int => scala/Int#
[22:6..22:8): C9 <= classes/C9#
[22:8..22:8):  <= classes/C9#`<init>`().
[22:27..22:28): x <= classes/C9#x().
[22:30..22:33): Int => scala/Int#
[24:7..24:8): N <= classes/N.
[25:6..25:15): anonClass <= classes/N.anonClass.
[25:22..25:22):  <= local8
[25:22..25:24): C7 => classes/C7#
[25:24..25:24):  => classes/C7#`<init>`().
[26:8..26:13): local <= local9
[26:16..26:19): ??? => scala/Predef.`???`().
[28:6..28:13): anonFun <= classes/N.anonFun.
[28:16..28:20): List => scala/package.List.
[28:24..28:27): map => scala/collection/immutable/List#map().
[28:30..28:31): i <= local10
[29:8..29:13): local <= local11
[30:4..30:9): local => local11
[30:10..30:11): + => scala/Int#`+`(+4).
[34:7..34:12): Chain <= classes/Chain.
[35:8..35:9): A <= classes/Chain.A#
[35:10..35:10):  <= classes/Chain.A#`<init>`().
[36:8..36:12): tst1 <= classes/Chain.A#tst1().
[36:13..36:14): i <= classes/Chain.A#tst1().(i)
[36:16..36:19): Int => scala/Int#
[36:22..36:23): A => classes/Chain.A#
[37:8..37:12): tst2 <= classes/Chain.A#tst2().
[37:13..37:14): i <= classes/Chain.A#tst2().(i)
[37:16..37:19): Int => scala/Int#
[37:22..37:23): A => classes/Chain.A#
[38:8..38:12): tst3 <= classes/Chain.A#tst3().
[38:13..38:14): i <= classes/Chain.A#tst3().(i)
[38:16..38:19): Int => scala/Int#
[38:21..38:22): j <= classes/Chain.A#tst3().(j)
[38:24..38:27): Int => scala/Int#
[38:30..38:31): A => classes/Chain.A#
[39:8..39:12): tst4 <= classes/Chain.A#tst4().
[39:13..39:14): i <= classes/Chain.A#tst4().(i)
[39:16..39:19): Int => scala/Int#
[39:21..39:22): j <= classes/Chain.A#tst4().(j)
[39:24..39:25): A => classes/Chain.A#
[39:28..39:29): A => classes/Chain.A#
[39:32..39:33): j => classes/Chain.A#tst4().(j)
[42:6..42:9): tst <= classes/Chain.tst().
[42:10..42:11): i <= classes/Chain.tst().(i)
[42:13..42:16): Int => scala/Int#
[42:18..42:19): j <= classes/Chain.tst().(j)
[42:21..42:22): A => classes/Chain.A#
[42:29..42:30): A => classes/Chain.A#
[42:30..42:30):  => classes/Chain.A#`<init>`().
[42:36..42:37): j => classes/Chain.tst().(j)
[44:6..44:7): a <= classes/Chain.a.
[44:14..44:15): A => classes/Chain.A#
[44:15..44:15):  => classes/Chain.A#`<init>`().
[45:2..45:3): a => classes/Chain.a.
[45:4..45:8): tst1 => classes/Chain.A#tst1().
[45:9..45:10): i => classes/Chain.A#tst1().(i)
[46:5..46:9): tst2 => classes/Chain.A#tst2().
[46:10..46:11): i => classes/Chain.A#tst2().(i)
[48:2..48:3): a => classes/Chain.a.
[48:4..48:8): tst2 => classes/Chain.A#tst2().
[48:9..48:10): i => classes/Chain.A#tst2().(i)
[49:5..49:9): tst3 => classes/Chain.A#tst3().
[49:10..49:11): i => classes/Chain.A#tst3().(i)
[50:5..50:9): tst1 => classes/Chain.A#tst1().
[50:10..50:11): i => classes/Chain.A#tst1().(i)
[52:2..52:3): a => classes/Chain.a.
[52:4..52:8): tst2 => classes/Chain.A#tst2().
[52:9..52:10): i => classes/Chain.A#tst2().(i)
[53:5..53:9): tst3 => classes/Chain.A#tst3().
[53:10..53:11): i => classes/Chain.A#tst3().(i)
[53:17..53:18): j => classes/Chain.A#tst3().(j)
[54:5..54:9): tst1 => classes/Chain.A#tst1().
[54:10..54:11): i => classes/Chain.A#tst1().(i)
[56:2..56:3): a => classes/Chain.a.
[56:4..56:8): tst2 => classes/Chain.A#tst2().
[56:9..56:10): i => classes/Chain.A#tst2().(i)
[57:5..57:9): tst4 => classes/Chain.A#tst4().
[57:10..57:11): i => classes/Chain.A#tst4().(i)
[57:17..57:18): j => classes/Chain.A#tst4().(j)
[57:21..57:24): tst => classes/Chain.tst().
[57:25..57:26): i => classes/Chain.tst().(i)
[57:32..57:33): j => classes/Chain.tst().(j)
[57:40..57:41): A => classes/Chain.A#
[57:41..57:41):  => classes/Chain.A#`<init>`().
[58:5..58:9): tst1 => classes/Chain.A#tst1().
[58:10..58:11): i => classes/Chain.A#tst1().(i)

Synthetics:
[28:16..28:20): List => *.apply[Int]
  apply => scala/collection/IterableFactory#apply().
  Int => scala/Int#
[28:16..28:27): List(1).map => *[Int]
  Int => scala/Int#

semanticdb/integration/src/main/scala/example/Empty.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Empty.scala
Text => non-empty
Language => Scala
Symbols => 6 entries
Occurrences => 10 entries

Symbols:
_empty_/A# => class A extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
_empty_/A#`<init>`(). => primary ctor <init>()
_empty_/A#b(). => method b: B
  B => _empty_/B#
_empty_/B# => class B extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
_empty_/B#`<init>`(). => primary ctor <init>()
_empty_/B#a(). => method a: A
  A => _empty_/A#

Occurrences:
[0:6..0:7): A <= _empty_/A#
[0:8..0:8):  <= _empty_/A#`<init>`().
[1:6..1:7): b <= _empty_/A#b().
[1:9..1:10): B => _empty_/B#
[1:13..1:16): ??? => scala/Predef.`???`().
[4:6..4:7): B <= _empty_/B#
[4:8..4:8):  <= _empty_/B#`<init>`().
[5:6..5:7): a <= _empty_/B#a().
[5:9..5:10): A => _empty_/A#
[5:13..5:16): ??? => scala/Predef.`???`().

semanticdb/integration/src/main/scala/example/EmptyObject.scala
---------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/EmptyObject.scala
Text => non-empty
Language => Scala
Symbols => 1 entries
Occurrences => 2 entries

Symbols:
example/EmptyObject. => final object EmptyObject extends AnyRef
  AnyRef => scala/AnyRef#

Occurrences:
[0:8..0:15): example <= example/
[2:7..2:18): EmptyObject <= example/EmptyObject.

semanticdb/integration/src/main/scala/example/EtaExpansion.scala
----------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/EtaExpansion.scala
Text => non-empty
Language => Scala
Symbols => 5 entries
Occurrences => 13 entries
Diagnostics => 1 entries
Synthetics => 5 entries

Symbols:
example/EtaExpansion# => class EtaExpansion extends AnyRef { +3 decls }
  AnyRef => scala/AnyRef#
example/EtaExpansion#`<init>`(). => primary ctor <init>()
example/EtaExpansion#meth(). => method meth(): String
  String => java/lang/String#
example/EtaExpansion#prop(). => method prop: String
  String => java/lang/String#
local0 => param x: Int
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:18): EtaExpansion <= example/EtaExpansion#
[2:19..2:19):  <= example/EtaExpansion#`<init>`().
[3:2..3:6): Some => scala/Some.
[3:10..3:13): map => scala/Option#map().
[3:14..3:22): identity => scala/Predef.identity().
[4:2..4:6): List => scala/package.List.
[4:10..4:18): foldLeft => scala/collection/LinearSeqOps#foldLeft().
[4:25..4:26): + => java/lang/String#`+`().
[6:6..6:10): prop <= example/EtaExpansion#prop().
[7:6..7:10): meth <= example/EtaExpansion#meth().
[9:2..9:6): prop => example/EtaExpansion#prop().
[10:2..10:6): meth => example/EtaExpansion#meth().

Diagnostics:
[9:2..9:6) [warning] Methods without a parameter list and by-name params can no longer be converted to functions as `m _`, write a function literal `() => m` instead [quickfixable]

Synthetics:
[3:2..3:6): Some => *.apply[Int]
  apply => scala/Some.apply().
  Int => scala/Int#
[3:2..3:13): Some(1).map => *[Int]
  Int => scala/Int#
[3:14..3:22): identity => *[Int]
  Int => scala/Int#
[4:2..4:6): List => *.apply[Int]
  apply => scala/collection/IterableFactory#apply().
  Int => scala/Int#
[4:2..4:18): List(1).foldLeft => *[String]
  String => java/lang/String#
semanticdb/integration/src/main/scala/example/EtaExpansion.scala
----------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/EtaExpansion.scala
Text => empty
Language => Scala
Diagnostics => 2 entries

Diagnostics:
[9:2..9:6) [warning] a pure expression does nothing in statement position; multiline expressions may require enclosing parentheses
[10:2..10:6) [warning] a pure expression does nothing in statement position; multiline expressions may require enclosing parentheses

semanticdb/integration/src/main/scala/example/Example.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Example.scala
Text => non-empty
Language => Scala
Symbols => 5 entries
Occurrences => 24 entries
Diagnostics => 1 entries
Synthetics => 1 entries

Symbols:
example/Example. => final object Example extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
example/Example.main(). => method main(args: Array[String]): Unit
  args => example/Example.main().(args)
  Array => scala/Array#
  String => scala/Predef.String#
  Unit => scala/Unit#
example/Example.main().(args) => param args: Array[String]
  Array => scala/Array#
  String => scala/Predef.String#
example/Example.x. => val method x: ClassTag[Int]
  ClassTag => scala/reflect/ClassTag#
  Int => scala/Int#
local0 => selfparam self

Occurrences:
[0:8..0:15): example <= example/
[2:7..2:12): scala => scala/
[2:13..2:23): concurrent => scala/concurrent/
[2:24..2:30): Future => scala/concurrent/Future#
[2:24..2:30): Future => scala/concurrent/Future.
[4:7..4:14): Example <= example/Example.
[4:17..4:21): self <= local0
[5:6..5:11): scala => scala/
[5:12..5:22): collection => scala/collection/
[5:23..5:30): mutable => scala/collection/mutable/
[5:31..5:36): Stack => scala/collection/mutable/Stack#
[5:37..5:40): Int => scala/Int#
[5:41..5:41):  => scala/collection/mutable/Stack#`<init>`(+1).
[6:6..6:10): main <= example/Example.main().
[6:11..6:15): args <= example/Example.main().(args)
[6:17..6:22): Array => scala/Array#
[6:23..6:29): String => scala/Predef.String#
[6:33..6:37): Unit => scala/Unit#
[7:4..7:11): println => scala/Predef.println(+1).
[9:6..9:7): x <= example/Example.x.
[9:10..9:15): scala => scala/
[9:16..9:23): reflect => scala/reflect/
[9:24..9:32): classTag => scala/reflect/package.classTag().
[9:33..9:36): Int => scala/Int#

Diagnostics:
[2:24..2:30) [warning] Unused import

Synthetics:
[9:10..9:37): scala.reflect.classTag[Int] => *((`macro-expandee` : ClassTag[Int]))
  ClassTag => scala/reflect/ClassTag#
  Int => scala/Int#

semanticdb/integration/src/main/scala/example/filename%20with%20spaces.scala
----------------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/filename%20with%20spaces.scala
Text => non-empty
Language => Scala
Symbols => 2 entries
Occurrences => 2 entries

Symbols:
example/FilenameWithSpaces# => class FilenameWithSpaces extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/FilenameWithSpaces#`<init>`(). => primary ctor <init>()

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:24): FilenameWithSpaces <= example/FilenameWithSpaces#

semanticdb/integration/src/main/scala/example/Flags.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Flags.scala
Text => non-empty
Language => Scala
Symbols => 58 entries
Occurrences => 72 entries
Synthetics => 2 entries

Symbols:
flags/p/package. => final package object p extends AnyRef { +16 decls }
  AnyRef => scala/AnyRef#
flags/p/package.AA# => class AA extends AnyRef { +5 decls }
  AnyRef => scala/AnyRef#
flags/p/package.AA#`<init>`(). => primary ctor <init>(x: Int, val y: Int, var z: Int)
  x => flags/p/package.AA#`<init>`().(x)
  Int => scala/Int#
  y => flags/p/package.AA#`<init>`().(y)
  z => flags/p/package.AA#`<init>`().(z)
flags/p/package.AA#`<init>`().(x) => param x: Int
  Int => scala/Int#
flags/p/package.AA#`<init>`().(y) => val param y: Int
  Int => scala/Int#
flags/p/package.AA#`<init>`().(z) => var param z: Int
  Int => scala/Int#
flags/p/package.AA#`z_=`(). => var method z_=(x$1: Int): Unit
  x$1 => flags/p/package.AA#`z_=`().(x$1)
  Int => scala/Int#
  Unit => scala/Unit#
flags/p/package.AA#`z_=`().(x$1) => param x$1: Int
  Int => scala/Int#
flags/p/package.AA#x. => private[this] val method x: Int
  Int => scala/Int#
flags/p/package.AA#y. => val method y: Int
  Int => scala/Int#
flags/p/package.AA#z(). => var method z: Int
  Int => scala/Int#
flags/p/package.C# => abstract class C[+T, -U, V] extends AnyRef { +6 decls }
  T => flags/p/package.C#[T]
  U => flags/p/package.C#[U]
  V => flags/p/package.C#[V]
  AnyRef => scala/AnyRef#
flags/p/package.C#[T] => covariant typeparam T
flags/p/package.C#[U] => contravariant typeparam U
flags/p/package.C#[V] => typeparam V
flags/p/package.C#`<init>`(). => primary ctor <init>(x: T, y: U, z: V)
  x => flags/p/package.C#`<init>`().(x)
  T => flags/p/package.C#[T]
  y => flags/p/package.C#`<init>`().(y)
  U => flags/p/package.C#[U]
  z => flags/p/package.C#`<init>`().(z)
  V => flags/p/package.C#[V]
flags/p/package.C#`<init>`().(x) => param x: T
  T => flags/p/package.C#[T]
flags/p/package.C#`<init>`().(y) => param y: U
  U => flags/p/package.C#[U]
flags/p/package.C#`<init>`().(z) => param z: V
  V => flags/p/package.C#[V]
flags/p/package.C#`<init>`(+1). => ctor <init>()
flags/p/package.C#w(). => abstract method w: Int
  Int => scala/Int#
flags/p/package.C#x. => private[this] val method x: T
  T => flags/p/package.C#[T]
flags/p/package.C#y. => private[this] val method y: U
  U => flags/p/package.C#[U]
flags/p/package.C#z. => private[this] val method z: V
  V => flags/p/package.C#[V]
flags/p/package.S# => class S[@specialized T] extends AnyRef { +1 decls }
  T => flags/p/package.S#[T]
  specialized => scala/specialized#
  AnyRef => scala/AnyRef#
flags/p/package.S#[T] => @specialized typeparam T
  specialized => scala/specialized#
flags/p/package.S#`<init>`(). => primary ctor <init>()
flags/p/package.T1# => type T1 = Int
  Int => scala/Int#
flags/p/package.T2# => type T2[T] = S[T]
  T => flags/p/package.T2#[T]
  S => flags/p/package.S#
flags/p/package.T2#[T] => typeparam T
flags/p/package.U# => abstract type U <: Int
  Int => scala/Int#
flags/p/package.V# => abstract type V >: Int
  Int => scala/Int#
flags/p/package.X. => final case object X extends AnyRef with Product with Serializable { +8 decls }
  AnyRef => scala/AnyRef#
  Product => scala/Product#
  Serializable => scala/package.Serializable#
flags/p/package.X.canEqual(). => method canEqual(x$1: Any): Boolean <: scala/Equals#canEqual().
  x$1 => flags/p/package.X.canEqual().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
flags/p/package.X.canEqual().(x$1) => param x$1: Any
  Any => scala/Any#
flags/p/package.X.hashCode(). => method hashCode(): Int <: java/lang/Object#hashCode()., scala/Any#hashCode().
  Int => scala/Int#
flags/p/package.X.productArity(). => method productArity: Int <: scala/Product#productArity().
  Int => scala/Int#
flags/p/package.X.productElement(). => method productElement(x$1: Int): Any <: scala/Product#productElement().
  x$1 => flags/p/package.X.productElement().(x$1)
  Int => scala/Int#
  Any => scala/Any#
flags/p/package.X.productElement().(x$1) => param x$1: Int
  Int => scala/Int#
flags/p/package.X.productIterator(). => method productIterator: Iterator[Any] <: scala/Product#productIterator().
  Iterator => scala/collection/Iterator#
  Any => scala/Any#
flags/p/package.X.productPrefix(). => method productPrefix: String <: scala/Product#productPrefix().
  String => java/lang/String#
flags/p/package.X.toString(). => method toString(): String <: java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
flags/p/package.X.writeReplace(). => private method writeReplace(): Object
  Object => java/lang/Object#
flags/p/package.Y# => final class Y extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
flags/p/package.Y#`<init>`(). => primary ctor <init>()
flags/p/package.Z# => sealed trait Z extends AnyRef
  AnyRef => scala/AnyRef#
flags/p/package.`y_=`(). => protected var method y_=(x$1: Int): Unit
  x$1 => flags/p/package.`y_=`().(x$1)
  Int => scala/Int#
  Unit => scala/Unit#
flags/p/package.`y_=`().(x$1) => param x$1: Int
  Int => scala/Int#
flags/p/package.m(). => macro m[TT]: Int
  TT => flags/p/package.m().[TT]
  Int => scala/Int#
flags/p/package.m().[TT] => typeparam TT
flags/p/package.x. => private lazy val method x: Int
  Int => scala/Int#
flags/p/package.xs1. => val method xs1: Nothing
  Nothing => scala/Nothing#
flags/p/package.y(). => protected implicit var method y: Int
  Int => scala/Int#
flags/p/package.z(). => method z(pp: Int): Int
  pp => flags/p/package.z().(pp)
  Int => scala/Int#
flags/p/package.z().(pp) => param pp: Int
  Int => scala/Int#
local0 => val local xs1: Nothing
  Nothing => scala/Nothing#
local1 => val local xs2: Nothing
  Nothing => scala/Nothing#
local2 => abstract type t

Occurrences:
[0:8..0:13): flags <= flags/
[2:7..2:12): scala => scala/
[2:13..2:21): language => scala/language.
[2:22..2:34): experimental => scala/language.experimental.
[2:35..2:41): macros => scala/language.experimental.macros.
[4:15..4:16): p <= flags/p/package.
[5:19..5:20): x <= flags/p/package.x.
[6:25..6:26): y <= flags/p/package.y().
[6:28..6:31): Int => scala/Int#
[7:6..7:7): z <= flags/p/package.z().
[7:8..7:10): pp <= flags/p/package.z().(pp)
[7:12..7:15): Int => scala/Int#
[8:6..8:7): m <= flags/p/package.m().
[8:8..8:10): TT <= flags/p/package.m().[TT]
[8:13..8:16): Int => scala/Int#
[8:25..8:28): ??? => scala/Predef.`???`().
[9:17..9:18): C <= flags/p/package.C#
[9:20..9:21): T <= flags/p/package.C#[T]
[9:24..9:25): U <= flags/p/package.C#[U]
[9:27..9:28): V <= flags/p/package.C#[V]
[9:29..9:29):  <= flags/p/package.C#`<init>`().
[9:30..9:31): x <= flags/p/package.C#x.
[9:33..9:34): T => flags/p/package.C#[T]
[9:36..9:37): y <= flags/p/package.C#y.
[9:39..9:40): U => flags/p/package.C#[U]
[9:42..9:43): z <= flags/p/package.C#z.
[9:45..9:46): V => flags/p/package.C#[V]
[10:8..10:12): this <= flags/p/package.C#`<init>`(+1).
[10:21..10:21):  => flags/p/package.C#`<init>`().
[10:22..10:25): ??? => scala/Predef.`???`().
[10:27..10:30): ??? => scala/Predef.`???`().
[10:32..10:35): ??? => scala/Predef.`???`().
[11:8..11:9): w <= flags/p/package.C#w().
[11:11..11:14): Int => scala/Int#
[13:7..13:9): T1 <= flags/p/package.T1#
[13:12..13:15): Int => scala/Int#
[14:7..14:9): T2 <= flags/p/package.T2#
[14:10..14:11): T <= flags/p/package.T2#[T]
[14:15..14:16): S => flags/p/package.S#
[14:17..14:18): T => flags/p/package.T2#[T]
[15:7..15:8): U <= flags/p/package.U#
[15:12..15:15): Int => scala/Int#
[16:7..16:8): V <= flags/p/package.V#
[16:12..16:15): Int => scala/Int#
[17:14..17:15): X <= flags/p/package.X.
[18:14..18:15): Y <= flags/p/package.Y#
[18:15..18:15):  <= flags/p/package.Y#`<init>`().
[19:15..19:16): Z <= flags/p/package.Z#
[20:8..20:10): AA <= flags/p/package.AA#
[20:10..20:10):  <= flags/p/package.AA#`<init>`().
[20:11..20:12): x <= flags/p/package.AA#x.
[20:14..20:17): Int => scala/Int#
[20:23..20:24): y <= flags/p/package.AA#y.
[20:26..20:29): Int => scala/Int#
[20:35..20:36): z <= flags/p/package.AA#z().
[20:38..20:41): Int => scala/Int#
[21:8..21:9): S <= flags/p/package.S#
[21:11..21:22): specialized => scala/specialized#
[21:23..21:23):  => scala/specialized#`<init>`(+2).
[21:23..21:24): T <= flags/p/package.S#[T]
[21:25..21:25):  <= flags/p/package.S#`<init>`().
[22:6..22:10): List => scala/package.List.
[22:11..22:14): xs1 <= flags/p/package.xs1.
[22:18..22:21): ??? => scala/Predef.`???`().
[23:2..23:5): ??? => scala/Predef.`???`().
[23:19..23:23): List => scala/package.List.
[23:24..23:27): xs2 <= local1
[23:32..23:35): ??? => scala/Predef.`???`().
[24:2..24:5): ??? => scala/Predef.`???`().
[24:22..24:26): List => scala/package.List#
[24:27..24:28): t <= local2
[24:33..24:36): ??? => scala/Predef.`???`().

Synthetics:
[22:6..22:10): List => *.unapplySeq[Nothing]
  unapplySeq => scala/collection/SeqFactory#unapplySeq().
  Nothing => scala/Nothing#
[23:19..23:23): List => *.unapplySeq[Nothing]
  unapplySeq => scala/collection/SeqFactory#unapplySeq().
  Nothing => scala/Nothing#

semanticdb/integration/src/main/scala/example/ForComprehension.scala
--------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/ForComprehension.scala
Text => non-empty
Language => Scala
Symbols => 15 entries
Occurrences => 56 entries
Synthetics => 13 entries

Symbols:
example/ForComprehension# => class ForComprehension extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
example/ForComprehension#`<init>`(). => primary ctor <init>()
example/ForComprehension#x. => val method x: Option[Tuple2[Int, Int]]
  Option => scala/Option#
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
local0 => param a: Int
  Int => scala/Int#
local1 => val local b: Int
  Int => scala/Int#
local3 => val local c: Int
  Int => scala/Int#
local4 => param a: Int
  Int => scala/Int#
local5 => param b: Int
  Int => scala/Int#
local6 => param check$ifrefutable$1: Tuple2[Int, Int]
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
local11 => val local c: Int
  Int => scala/Int#
local12 => val local d: Int
  Int => scala/Int#
local13 => val local x$3: Tuple2[Int, Int]
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
local14 => val local e: Tuple4[Int, Int, Int, Int]
  Tuple4 => scala/Tuple4#
  Int => scala/Int#
local15 => param f: Tuple4[Int, Int, Int, Int]
  Tuple4 => scala/Tuple4#
  Int => scala/Int#
local16 => param check$ifrefutable$2: Tuple2[Int, Int]
  Tuple2 => scala/Tuple2#
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:22): ForComprehension <= example/ForComprehension#
[2:23..2:23):  <= example/ForComprehension#`<init>`().
[4:4..4:5): a <= local0
[4:9..4:13): List => scala/package.List.
[5:4..5:5): b <= local1
[5:9..5:13): List => scala/package.List.
[6:7..6:8): b => local1
[6:9..6:10): > => scala/Int#`>`(+3).
[7:4..7:5): c <= local3
[7:8..7:9): a => local0
[7:10..7:11): + => scala/Int#`+`(+4).
[7:12..7:13): b => local1
[8:11..8:12): a => local0
[8:14..8:15): b => local1
[8:17..8:18): c => local3
[10:4..10:5): a <= local4
[10:9..10:13): List => scala/package.List.
[11:4..11:5): b <= local5
[11:9..11:13): List => scala/package.List.
[11:14..11:15): a => local4
[13:6..13:7): a => local4
[14:6..14:7): b => local5
[15:6..15:8): == => java/lang/Object#`==`().
[17:6..17:7): c <= local11
[18:6..18:7): d <= local12
[19:9..19:13): List => scala/package.List.
[19:15..19:16): a => local4
[19:18..19:19): b => local5
[21:6..21:7): a => local4
[22:6..22:7): b => local5
[23:6..23:7): c => local11
[24:6..24:7): d => local12
[25:6..25:8): == => java/lang/Object#`==`().
[26:4..26:5): e <= local14
[27:6..27:7): a => local4
[28:6..28:7): b => local5
[29:6..29:7): c => local11
[30:6..30:7): d => local12
[32:7..32:8): e => local14
[32:9..32:11): == => java/lang/Object#`==`().
[33:4..33:5): f <= local15
[33:9..33:13): List => scala/package.List.
[33:14..33:15): e => local14
[36:6..36:7): a => local4
[37:6..37:7): b => local5
[38:6..38:7): c => local11
[39:6..39:7): d => local12
[40:6..40:7): e => local14
[41:6..41:7): f => local15
[44:6..44:7): x <= example/ForComprehension#x.
[44:9..44:15): Option => scala/Option#
[44:17..44:20): Int => scala/Int#
[44:22..44:25): Int => scala/Int#
[44:30..44:34): None => scala/None.
[46:14..46:15): x => example/ForComprehension#x.

Synthetics:
[3:2..8:19): for {
    a <- List(1)
    b <- List(1)
    if b > 1
    c = a + b
  } yield (a, b, c) => orig(List(1)).flatMap[Tuple3[Int, Int, Int]]({(a) => orig(List(1)).withFilter({(b) => orig(b > 1)}).map[Tuple2[Int, Int]]({(b) => orig(c = a + b)}).map[Tuple3[Int, Int, Int]]({(local2) => orig((a, b, c))})})
  flatMap => scala/collection/immutable/List#flatMap().
  Tuple3 => scala/Tuple3#
  Int => scala/Int#
  a => local0
  withFilter => scala/collection/IterableOps#withFilter().
  b => local1
  map => scala/collection/WithFilter#map().
  Tuple2 => scala/Tuple2#
  map => scala/collection/immutable/List#map().
  local2 => local2
[4:9..4:13): List => *.apply[Int]
  apply => scala/collection/IterableFactory#apply().
  Int => scala/Int#
[5:9..5:13): List => *.apply[Int]
  apply => scala/collection/IterableFactory#apply().
  Int => scala/Int#
[9:2..42:5): for {
    a <- List(1)
    b <- List(a)
    if (
      a,
      b
    ) == (1, 2)
    (
      c,
      d
    ) <- List((a, b))
    if (
      a,
      b,
      c,
      d
    ) == (1, 2, 3, 4)
    e = (
      a,
      b,
      c,
      d
    )
    if e == (1, 2, 3, 4)
    f <- List(e)
  } yield {
    (
      a,
      b,
      c,
      d,
      e,
      f
    ) => orig(List(1)).flatMap[Tuple6[Int, Int, Int, Int, Tuple4[Int, Int, Int, Int], Tuple4[Int, Int, Int, Int]]]({(a) => orig(List(a)).withFilter({(b) => orig((
      a,
      b
    ) == (1, 2))}).flatMap[Tuple6[Int, Int, Int, Int, Tuple4[Int, Int, Int, Int], Tuple4[Int, Int, Int, Int]]]({(b) => orig(List((a, b))).withFilter({(check$ifrefutable$1) => orig()}).withFilter({(local7) => orig((
      c,
      d
    ) <- List((a, b))
    if (
      a,
      b,
      c,
      d
    ) == (1, 2, 3, 4))}).map[Tuple2[Tuple2[Int, Int], Tuple4[Int, Int, Int, Int]]]({(local8) => orig(e = (
      a,
      b,
      c,
      d
    ))}).withFilter({(local9) => orig(e == (1, 2, 3, 4))}).flatMap[Tuple6[Int, Int, Int, Int, Tuple4[Int, Int, Int, Int], Tuple4[Int, Int, Int, Int]]]({(local10) => orig(f <- List(e)
  } yield {
    (
      a,
      b,
      c,
      d,
      e,
      f
    ))})})})
  flatMap => scala/collection/immutable/List#flatMap().
  Tuple6 => scala/Tuple6#
  Int => scala/Int#
  Tuple4 => scala/Tuple4#
  a => local4
  withFilter => scala/collection/IterableOps#withFilter().
  b => local5
  flatMap => scala/collection/WithFilter#flatMap().
  check$ifrefutable$1 => local6
  withFilter => scala/collection/WithFilter#withFilter().
  local7 => local7
  map => scala/collection/WithFilter#map().
  Tuple2 => scala/Tuple2#
  local8 => local8
  local9 => local9
  local10 => local10
[10:9..10:13): List => *.apply[Int]
  apply => scala/collection/IterableFactory#apply().
  Int => scala/Int#
[11:9..11:13): List => *.apply[Int]
  apply => scala/collection/IterableFactory#apply().
  Int => scala/Int#
[12:7..15:15): (
      a,
      b
    ) == (1, 2) => *.apply[Int, Int]
  apply => scala/Tuple2.apply().
  Int => scala/Int#
[19:9..19:13): List => *.apply[Tuple2[Int, Int]]
  apply => scala/collection/IterableFactory#apply().
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
[20:7..25:21): (
      a,
      b,
      c,
      d
    ) == (1, 2, 3, 4) => *.apply[Int, Int, Int, Int]
  apply => scala/Tuple4.apply().
  Int => scala/Int#
[32:7..32:24): e == (1, 2, 3, 4) => *.apply[Int, Int, Int, Int]
  apply => scala/Tuple4.apply().
  Int => scala/Int#
[33:4..42:5): f <- List(e)
  } yield {
    (
      a,
      b,
      c,
      d,
      e,
      f
    ) => orig(List(e)).map[Tuple6[Int, Int, Int, Int, Tuple4[Int, Int, Int, Int], Tuple4[Int, Int, Int, Int]]]({(f) => orig((
      a,
      b,
      c,
      d,
      e,
      f
    ))})
  map => scala/collection/immutable/List#map().
  Tuple6 => scala/Tuple6#
  Int => scala/Int#
  Tuple4 => scala/Tuple4#
  f => local15
[33:9..33:13): List => *.apply[Tuple4[Int, Int, Int, Int]]
  apply => scala/collection/IterableFactory#apply().
  Tuple4 => scala/Tuple4#
  Int => scala/Int#
[45:2..47:12): for {
    (_, _) <- x
  } yield () => orig(x).withFilter({(check$ifrefutable$2) => orig()}).map[Unit]({(local17) => orig((_, _) <- x
  } yield ())})
  withFilter => scala/Option#withFilter().
  check$ifrefutable$2 => local16
  map => scala/Option#WithFilter#map().
  Unit => scala/Unit#
  local17 => local17

semanticdb/integration/src/main/scala/example/ImplicitConversion.scala
----------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/ImplicitConversion.scala
Text => non-empty
Language => Scala
Symbols => 13 entries
Occurrences => 40 entries
Synthetics => 5 entries

Symbols:
example/ImplicitConversion# => class ImplicitConversion extends AnyRef { +11 decls }
  AnyRef => scala/AnyRef#
example/ImplicitConversion#`<init>`(). => primary ctor <init>()
example/ImplicitConversion#a. => val method a: Int
  Int => scala/Int#
example/ImplicitConversion#b. => val method b: Long
  Long => scala/Long#
example/ImplicitConversion#c. => val method c: Long
  Long => scala/Long#
example/ImplicitConversion#char. => val method char: Char
  Char => scala/Char#
example/ImplicitConversion#message. => val method message: String
  String => java/lang/String#
example/ImplicitConversion#number. => val method number: Int
  Int => scala/Int#
example/ImplicitConversion#string2Number(). => implicit method string2Number(string: String): Int
  string => example/ImplicitConversion#string2Number().(string)
  String => scala/Predef.String#
  Int => scala/Int#
example/ImplicitConversion#string2Number().(string) => param string: String
  String => scala/Predef.String#
example/ImplicitConversion#toLong. => val method toLong: Int
  Int => scala/Int#
example/ImplicitConversion#tuple. => val method tuple: Tuple2[Int, Int]
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
example/ImplicitConversion#x. => val method x: Int
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:7..2:12): scala => scala/
[2:13..2:21): language => scala/language.
[2:22..2:41): implicitConversions => scala/language.implicitConversions.
[4:6..4:24): ImplicitConversion <= example/ImplicitConversion#
[4:25..4:25):  <= example/ImplicitConversion#`<init>`().
[5:15..5:28): string2Number <= example/ImplicitConversion#string2Number().
[6:6..6:12): string <= example/ImplicitConversion#string2Number().(string)
[6:14..6:20): String => scala/Predef.String#
[7:5..7:8): Int => scala/Int#
[8:6..8:13): message <= example/ImplicitConversion#message.
[9:6..9:12): number <= example/ImplicitConversion#number.
[10:6..10:11): tuple <= example/ImplicitConversion#tuple.
[11:6..11:10): char <= example/ImplicitConversion#char.
[11:12..11:16): Char => scala/Char#
[14:2..14:9): message => example/ImplicitConversion#message.
[15:5..15:16): stripSuffix => scala/collection/StringOps#stripSuffix().
[16:2..16:7): tuple => example/ImplicitConversion#tuple.
[16:8..16:9): + => scala/Predef.any2stringadd#`+`().
[19:6..19:7): x <= example/ImplicitConversion#x.
[19:9..19:12): Int => scala/Int#
[19:15..19:22): message => example/ImplicitConversion#message.
[22:2..22:3): s => scala/StringContext#s().
[22:11..22:18): message => example/ImplicitConversion#message.
[22:20..22:26): number => example/ImplicitConversion#number.
[23:2..23:3): s => scala/StringContext#s().
[24:7..24:14): message => example/ImplicitConversion#message.
[25:7..25:13): number => example/ImplicitConversion#number.
[25:17..25:28): stripMargin => scala/collection/StringOps#stripMargin(+1).
[27:6..27:7): a <= example/ImplicitConversion#a.
[27:9..27:12): Int => scala/Int#
[27:15..27:19): char => example/ImplicitConversion#char.
[28:6..28:7): b <= example/ImplicitConversion#b.
[28:9..28:13): Long => scala/Long#
[28:16..28:20): char => example/ImplicitConversion#char.
[29:6..29:12): toLong <= example/ImplicitConversion#toLong.
[29:14..29:17): Int => scala/Int#
[35:6..35:7): c <= example/ImplicitConversion#c.
[35:9..35:13): Long => scala/Long#
[35:16..35:22): toLong => scala/Int#toLong().

Synthetics:
[14:2..14:9): message => augmentString(*)
  augmentString => scala/Predef.augmentString().
[16:2..16:7): tuple => Predef.any2stringadd[Tuple2[Int, Int]](*)
  Predef => scala/Predef.
  any2stringadd => scala/Predef.any2stringadd().
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
[19:15..19:22): message => string2Number(*)
  string2Number => example/ImplicitConversion#string2Number().
[22:2..22:2):  => *.apply
  apply => scala/StringContext.apply().
[23:2..23:2):  => *.apply
  apply => scala/StringContext.apply().
semanticdb/integration/src/main/scala/example/ImplicitConversion.scala
----------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/ImplicitConversion.scala
Text => empty
Language => Scala
Diagnostics => 1 entries

Diagnostics:
[16:2..16:2) [warning] method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +

semanticdb/integration/src/main/scala/example/Imports.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Imports.scala
Text => non-empty
Language => Scala
Symbols => 2 entries
Occurrences => 5 entries
Diagnostics => 1 entries

Symbols:
_empty_/Imports# => class Imports extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
_empty_/Imports#`<init>`(). => primary ctor <init>()

Occurrences:
[0:7..0:12): scala => scala/
[0:13..0:17): util => scala/util/
[0:18..0:25): control => scala/util/control/
[0:26..0:34): NonFatal => scala/util/control/NonFatal.
[2:6..2:13): Imports <= _empty_/Imports#

Diagnostics:
[0:26..0:34) [warning] Unused import

semanticdb/integration/src/main/scala/example/Infix.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Infix.scala
Text => non-empty
Language => Scala
Symbols => 4 entries
Occurrences => 9 entries

Symbols:
example/SymbolTest# => trait SymbolTest extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
example/SymbolTest#arg(). => method arg: Int
  Int => scala/Int#
example/SymbolTest#shouldBe(). => abstract method shouldBe(right: Any): Unit
  right => example/SymbolTest#shouldBe().(right)
  Any => scala/Any#
  Unit => scala/Unit#
example/SymbolTest#shouldBe().(right) => param right: Any
  Any => scala/Any#

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:16): SymbolTest <= example/SymbolTest#
[3:6..3:14): shouldBe <= example/SymbolTest#shouldBe().
[3:15..3:20): right <= example/SymbolTest#shouldBe().(right)
[3:22..3:25): Any => scala/Any#
[3:28..3:32): Unit => scala/Unit#
[4:6..4:9): arg <= example/SymbolTest#arg().
[5:7..5:15): shouldBe => example/SymbolTest#shouldBe().
[5:17..5:20): arg => example/SymbolTest#arg().

semanticdb/integration/src/main/scala/example/InstrumentTyper.scala
-------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/InstrumentTyper.scala
Text => non-empty
Language => Scala
Symbols => 11 entries
Occurrences => 57 entries
Diagnostics => 1 entries
Synthetics => 1 entries

Symbols:
example/InstrumentTyper# => class InstrumentTyper extends AnyRef { self: AnyRef => +6 decls }
  AnyRef => scala/AnyRef#
example/InstrumentTyper#AnnotatedType# => type AnnotatedType = Int @param
  Int => scala/Int#
  param => scala/annotation/meta/param#
example/InstrumentTyper#`<init>`(). => primary ctor <init>()
example/InstrumentTyper#all(). => method all: List[Any]
  List => scala/collection/immutable/List#
  Any => scala/Any#
example/InstrumentTyper#clazzOf. => final val method clazzOf: Class[Option[Int]]
  Class => java/lang/Class#
  Option => scala/Option#
  Int => scala/Int#
example/InstrumentTyper#existential(). => method existential: U[Int] forSome { type U[T <: Int] }
  U => local1
  Int => scala/Int#
  T => local2
example/InstrumentTyper#singletonType(). => method singletonType(x: Predef.type): Nothing
  x => example/InstrumentTyper#singletonType().(x)
  Predef => scala/Predef.
  Nothing => scala/Nothing#
example/InstrumentTyper#singletonType().(x) => param x: Predef.type
  Predef => scala/Predef.
local0 => selfparam self: AnyRef
  AnyRef => scala/AnyRef#
local1 => abstract type U[T <: Int]
  T => local2
  Int => scala/Int#
local2 => typeparam T <: Int
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:7..2:12): scala => scala/
[2:13..2:23): annotation => scala/annotation/
[2:24..2:28): meta => scala/annotation/meta/
[2:29..2:34): param => scala/annotation/meta/param#
[3:7..3:12): scala => scala/
[3:13..3:21): language => scala/language.
[3:22..3:34): existentials => scala/language.existentials.
[4:7..4:12): scala => scala/
[4:13..4:21): language => scala/language.
[4:22..4:33): higherKinds => scala/language.higherKinds.
[5:7..5:12): types => types/
[5:13..5:17): Test => types/Test.
[7:6..7:21): InstrumentTyper <= example/InstrumentTyper#
[7:22..7:22):  <= example/InstrumentTyper#`<init>`().
[7:24..7:28): self <= local0
[8:6..8:9): all <= example/InstrumentTyper#all().
[8:12..8:16): List => scala/package.List.
[9:4..9:11): Literal => types/Test.Literal.
[9:12..9:15): int => types/Test.Literal.int.
[10:4..10:11): Literal => types/Test.Literal.
[10:12..10:16): long => types/Test.Literal.long.
[11:4..11:11): Literal => types/Test.Literal.
[11:12..11:17): float => types/Test.Literal.float.
[12:4..12:11): Literal => types/Test.Literal.
[12:12..12:18): double => types/Test.Literal.double.
[13:4..13:11): Literal => types/Test.Literal.
[13:12..13:15): nil => types/Test.Literal.nil.
[14:4..14:11): Literal => types/Test.Literal.
[14:12..14:16): char => types/Test.Literal.char.
[15:4..15:11): Literal => types/Test.Literal.
[15:12..15:18): string => types/Test.Literal.string.
[16:4..16:11): Literal => types/Test.Literal.
[16:12..16:16): bool => types/Test.Literal.bool.
[17:4..17:11): Literal => types/Test.Literal.
[17:12..17:16): unit => types/Test.Literal.unit.
[18:4..18:11): Literal => types/Test.Literal.
[18:12..18:20): javaEnum => types/Test.Literal.javaEnum.
[19:4..19:11): Literal => types/Test.Literal.
[19:12..19:22): clazzOfInt => types/Test.Literal.clazzOfInt.
[20:4..20:11): Literal => types/Test.Literal.
[20:12..20:25): clazzOfOption => types/Test.Literal.clazzOfOption.
[21:4..21:8): List => scala/collection/immutable/Nil.
[23:6..23:17): existential <= example/InstrumentTyper#existential().
[23:19..23:20): U => local1
[23:21..23:24): Int => scala/Int#
[23:41..23:42): U <= local1
[23:43..23:44): T <= local2
[23:57..23:60): ??? => scala/Predef.`???`().
[24:7..24:20): AnnotatedType <= example/InstrumentTyper#AnnotatedType#
[24:23..24:26): Int => scala/Int#
[25:6..25:19): singletonType <= example/InstrumentTyper#singletonType().
[25:20..25:21): x <= example/InstrumentTyper#singletonType().(x)
[25:23..25:29): Predef => scala/Predef.
[25:38..25:41): ??? => scala/Predef.`???`().
[26:12..26:19): clazzOf <= example/InstrumentTyper#clazzOf.
[26:22..26:29): classOf => scala/Predef.classOf().

Diagnostics:
[4:0..4:33) [warning] Unused import of deprecated lazy value higherKinds: higherKinds no longer needs to be imported explicitly

Synthetics:
[8:12..8:16): List => *.apply[Any]
  apply => scala/collection/IterableFactory#apply().
  Any => scala/Any#

semanticdb/integration/src/main/scala/example/Issue1749.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Issue1749.scala
Text => non-empty
Language => Scala
Symbols => 7 entries
Occurrences => 24 entries
Synthetics => 2 entries

Symbols:
example/Issue1749# => class Issue1749 extends AnyRef { +3 decls }
  AnyRef => scala/AnyRef#
example/Issue1749#`<init>`(). => primary ctor <init>()
example/Issue1749#x1. => val method x1: Int
  Int => scala/Int#
example/Issue1749#x2. => val method x2: Int
  Int => scala/Int#
example/Issue1854# => class Issue1854 extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
example/Issue1854#`<init>`(). => primary ctor <init>()
example/Issue1854#map. => val method map: Map[String, String]
  Map => scala/collection/mutable/Map#
  String => scala/Predef.String#

Occurrences:
[1:8..1:15): example <= example/
[3:7..3:12): scala => scala/
[3:13..3:17): math => scala/math/
[3:18..3:25): Ordered => scala/math/Ordered.
[3:26..3:43): orderingToOrdered => scala/math/Ordered.orderingToOrdered().
[5:6..5:15): Issue1749 <= example/Issue1749#
[5:16..5:16):  <= example/Issue1749#`<init>`().
[6:6..6:8): x1 <= example/Issue1749#x1.
[7:6..7:8): x2 <= example/Issue1749#x2.
[8:3..8:5): x1 => example/Issue1749#x1.
[8:7..8:9): x1 => example/Issue1749#x1.
[9:5..9:12): compare => scala/math/Ordered#compare().
[9:14..9:16): x2 => example/Issue1749#x2.
[9:18..9:20): x2 => example/Issue1749#x2.
[12:6..12:15): Issue1854 <= example/Issue1854#
[12:16..12:16):  <= example/Issue1854#`<init>`().
[13:6..13:9): map <= example/Issue1854#map.
[13:12..13:22): collection => scala/collection/
[13:23..13:30): mutable => scala/collection/mutable/
[13:31..13:34): Map => scala/collection/mutable/Map.
[13:35..13:40): empty => scala/collection/MapFactory.Delegate#empty().
[13:41..13:47): String => scala/Predef.String#
[13:49..13:55): String => scala/Predef.String#
[14:2..14:5): map => example/Issue1854#map.

Synthetics:
[8:2..8:10): (x1, x1) => Ordered.orderingToOrdered[Tuple2[Int, Int]](*)(Tuple2(Int, Int))
  Ordered => scala/math/Ordered.
  orderingToOrdered => scala/math/Ordered.orderingToOrdered().
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
  Tuple2 => scala/math/Ordering.Tuple2().
  Int => scala/math/Ordering.Int.
[14:2..14:5): map => *.update
  update => scala/collection/mutable/MapOps#update().

semanticdb/integration/src/main/scala/example/Issue2040.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Issue2040.scala
Text => non-empty
Language => Scala
Symbols => 16 entries
Occurrences => 35 entries
Diagnostics => 2 entries
Synthetics => 2 entries

Symbols:
example/Issue2040. => final object Issue2040 extends AnyRef { +6 decls }
  AnyRef => scala/AnyRef#
example/Issue2040.AnyShouldWrapper# => trait AnyShouldWrapper extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/Issue2040.AnyShouldWrapper#shouldBe(). => abstract method shouldBe(right: Any): Boolean
  right => example/Issue2040.AnyShouldWrapper#shouldBe().(right)
  Any => scala/Any#
  Boolean => scala/Boolean#
example/Issue2040.AnyShouldWrapper#shouldBe().(right) => param right: Any
  Any => scala/Any#
example/Issue2040.BarSpec# => trait BarSpec extends AnyRef with Base { +1 decls }
  AnyRef => scala/AnyRef#
  Base => example/Issue2040.Base#
example/Issue2040.BarSpec#convertToAnyShouldWrapper(). => abstract implicit method convertToAnyShouldWrapper(o: Any)(implicit prettifier: Prettifier): AnyShouldWrapper
  o => example/Issue2040.BarSpec#convertToAnyShouldWrapper().(o)
  Any => scala/Any#
  prettifier => example/Issue2040.BarSpec#convertToAnyShouldWrapper().(prettifier)
  Prettifier => example/Issue2040.Prettifier#
  AnyShouldWrapper => example/Issue2040.AnyShouldWrapper#
example/Issue2040.BarSpec#convertToAnyShouldWrapper().(o) => param o: Any
  Any => scala/Any#
example/Issue2040.BarSpec#convertToAnyShouldWrapper().(prettifier) => implicit param prettifier: Prettifier
  Prettifier => example/Issue2040.Prettifier#
example/Issue2040.Base# => trait Base extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/Issue2040.Base#i(). => method i(): Int
  Int => scala/Int#
example/Issue2040.FooSpec# => trait FooSpec extends AnyRef with Base { +1 decls }
  AnyRef => scala/AnyRef#
  Base => example/Issue2040.Base#
example/Issue2040.FooSpec#convertToAnyShouldWrapper(). => abstract implicit method convertToAnyShouldWrapper(o: Any): AnyShouldWrapper
  o => example/Issue2040.FooSpec#convertToAnyShouldWrapper().(o)
  Any => scala/Any#
  AnyShouldWrapper => example/Issue2040.AnyShouldWrapper#
example/Issue2040.FooSpec#convertToAnyShouldWrapper().(o) => param o: Any
  Any => scala/Any#
example/Issue2040.Prettifier# => trait Prettifier extends AnyRef
  AnyRef => scala/AnyRef#
example/Issue2040.Prettifier. => final object Prettifier extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/Issue2040.Prettifier.default. => implicit val method default: Prettifier
  Prettifier => example/Issue2040.Prettifier#

Occurrences:
[1:8..1:15): example <= example/
[3:7..3:12): scala => scala/
[3:13..3:21): language => scala/language.
[3:22..3:41): implicitConversions => scala/language.implicitConversions.
[5:7..5:16): Issue2040 <= example/Issue2040.
[6:8..6:18): Prettifier <= example/Issue2040.Prettifier#
[7:9..7:19): Prettifier <= example/Issue2040.Prettifier.
[8:17..8:24): default <= example/Issue2040.Prettifier.default.
[8:26..8:36): Prettifier => example/Issue2040.Prettifier#
[8:39..8:42): ??? => scala/Predef.`???`().
[11:8..11:24): AnyShouldWrapper <= example/Issue2040.AnyShouldWrapper#
[12:8..12:16): shouldBe <= example/Issue2040.AnyShouldWrapper#shouldBe().
[12:17..12:22): right <= example/Issue2040.AnyShouldWrapper#shouldBe().(right)
[12:24..12:27): Any => scala/Any#
[12:30..12:37): Boolean => scala/Boolean#
[15:8..15:12): Base <= example/Issue2040.Base#
[16:8..16:9): i <= example/Issue2040.Base#i().
[19:8..19:15): FooSpec <= example/Issue2040.FooSpec#
[19:24..19:28): Base => example/Issue2040.Base#
[20:17..20:42): convertToAnyShouldWrapper <= example/Issue2040.FooSpec#convertToAnyShouldWrapper().
[20:43..20:44): o <= example/Issue2040.FooSpec#convertToAnyShouldWrapper().(o)
[20:46..20:49): Any => scala/Any#
[20:52..20:68): AnyShouldWrapper => example/Issue2040.AnyShouldWrapper#
[22:4..22:5): i => example/Issue2040.Base#i().
[22:6..22:14): shouldBe => example/Issue2040.AnyShouldWrapper#shouldBe().
[25:8..25:15): BarSpec <= example/Issue2040.BarSpec#
[25:24..25:28): Base => example/Issue2040.Base#
[26:17..26:42): convertToAnyShouldWrapper <= example/Issue2040.BarSpec#convertToAnyShouldWrapper().
[26:43..26:44): o <= example/Issue2040.BarSpec#convertToAnyShouldWrapper().(o)
[26:46..26:49): Any => scala/Any#
[27:17..27:27): prettifier <= example/Issue2040.BarSpec#convertToAnyShouldWrapper().(prettifier)
[27:29..27:39): Prettifier => example/Issue2040.Prettifier#
[28:7..28:23): AnyShouldWrapper => example/Issue2040.AnyShouldWrapper#
[30:4..30:5): i => example/Issue2040.Base#i().
[30:6..30:14): shouldBe => example/Issue2040.AnyShouldWrapper#shouldBe().

Diagnostics:
[22:4..22:5) [warning] Auto-application to `()` is deprecated. Supply the empty argument list `()` explicitly to invoke method i,
or remove the empty argument list from its definition (Java-defined methods are exempt).
In Scala 3, an unapplied method like this will be eta-expanded into a function. [quickfixable]
[30:4..30:5) [warning] Auto-application to `()` is deprecated. Supply the empty argument list `()` explicitly to invoke method i,
or remove the empty argument list from its definition (Java-defined methods are exempt).
In Scala 3, an unapplied method like this will be eta-expanded into a function. [quickfixable]

Synthetics:
[22:4..22:5): i => convertToAnyShouldWrapper(*)
  convertToAnyShouldWrapper => example/Issue2040.FooSpec#convertToAnyShouldWrapper().
[30:4..30:5): i => convertToAnyShouldWrapper(*)(default)
  convertToAnyShouldWrapper => example/Issue2040.BarSpec#convertToAnyShouldWrapper().
  default => example/Issue2040.Prettifier.default.

semanticdb/integration/src/main/scala/example/Issue2116.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Issue2116.scala
Text => non-empty
Language => Scala
Symbols => 13 entries
Occurrences => 26 entries
Diagnostics => 1 entries
Synthetics => 1 entries

Symbols:
example/Issue2116# => abstract class Issue2116 extends AnyRef { +4 decls }
  AnyRef => scala/AnyRef#
example/Issue2116#`<init>`(). => primary ctor <init>()
example/Issue2116#check$default$1(). => method check$default$1: Boolean @uncheckedVariance
  Boolean => scala/Boolean#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/Issue2116#check$default$2(). => method check$default$2: Boolean @uncheckedVariance
  Boolean => scala/Boolean#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/Issue2116#check(). => method check(includeDocs: Boolean, includeCommitCharacter: Boolean)(implicit loc: ExecutionContext): Unit
  includeDocs => example/Issue2116#check().(includeDocs)
  Boolean => scala/Boolean#
  includeCommitCharacter => example/Issue2116#check().(includeCommitCharacter)
  loc => example/Issue2116#check().(loc)
  ExecutionContext => scala/concurrent/ExecutionContext#
  Unit => scala/Unit#
example/Issue2116#check().(includeCommitCharacter) => default param includeCommitCharacter: Boolean
  Boolean => scala/Boolean#
example/Issue2116#check().(includeDocs) => default param includeDocs: Boolean
  Boolean => scala/Boolean#
example/Issue2116#check().(loc) => implicit param loc: ExecutionContext
  ExecutionContext => scala/concurrent/ExecutionContext#
example/Issue2116_2# => class Issue2116_2 extends Issue2116 { +2 decls }
  Issue2116 => example/Issue2116#
example/Issue2116_2#`<init>`(). => primary ctor <init>()
example/Issue2116_2#ec. => implicit val method ec: ExecutionContextExecutor
  ExecutionContextExecutor => scala/concurrent/ExecutionContextExecutor#
local0 => val local x$1: true
local1 => val local x$2: Boolean
  Boolean => scala/Boolean#

Occurrences:
[1:8..1:15): example <= example/
[3:7..3:12): scala => scala/
[3:13..3:23): concurrent => scala/concurrent/
[3:24..3:40): ExecutionContext => scala/concurrent/ExecutionContext#
[3:24..3:40): ExecutionContext => scala/concurrent/ExecutionContext.
[5:15..5:24): Issue2116 <= example/Issue2116#
[5:25..5:25):  <= example/Issue2116#`<init>`().
[7:6..7:11): check <= example/Issue2116#check().
[8:6..8:17): includeDocs <= example/Issue2116#check().(includeDocs)
[8:19..8:26): Boolean => scala/Boolean#
[9:6..9:28): includeCommitCharacter <= example/Issue2116#check().(includeCommitCharacter)
[9:30..9:37): Boolean => scala/Boolean#
[10:13..10:16): loc <= example/Issue2116#check().(loc)
[10:18..10:34): ExecutionContext => scala/concurrent/ExecutionContext#
[10:37..10:41): Unit => scala/Unit#
[13:6..13:17): Issue2116_2 <= example/Issue2116_2#
[13:18..13:18):  <= example/Issue2116_2#`<init>`().
[13:26..13:35): Issue2116 => example/Issue2116#
[13:36..13:36):  => example/Issue2116#`<init>`().
[15:15..15:17): ec <= example/Issue2116_2#ec.
[15:20..15:25): scala => scala/
[15:26..15:36): concurrent => scala/concurrent/
[15:37..15:53): ExecutionContext => scala/concurrent/ExecutionContext.
[15:54..15:60): global => scala/concurrent/ExecutionContext.global.
[17:2..17:7): check => example/Issue2116#check().
[18:4..18:26): includeCommitCharacter => example/Issue2116#check().(includeCommitCharacter)

Diagnostics:
[15:15..15:15) [warning] Implicit definition should have explicit type (inferred scala.concurrent.ExecutionContextExecutor) [quickfixable]

Synthetics:
[17:2..19:3): check(
    includeCommitCharacter = true
  ) => *(ec)
  ec => example/Issue2116_2#ec.

semanticdb/integration/src/main/scala/example/Issue2144.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Issue2144.scala
Text => non-empty
Language => Scala
Symbols => 16 entries
Occurrences => 15 entries

Symbols:
example/Issue2144. => final object Issue2144 extends AnyRef { +3 decls }
  AnyRef => scala/AnyRef#
example/Issue2144.Test# => class Test extends AnyRef { +4 decls }
  AnyRef => scala/AnyRef#
example/Issue2144.Test#`<init>`(). => primary ctor <init>(a: Boolean, b: Int, c: Int)
  a => example/Issue2144.Test#`<init>`().(a)
  Boolean => scala/Boolean#
  b => example/Issue2144.Test#`<init>`().(b)
  Int => scala/Int#
  c => example/Issue2144.Test#`<init>`().(c)
example/Issue2144.Test#`<init>`().(a) => param a: Boolean
  Boolean => scala/Boolean#
example/Issue2144.Test#`<init>`().(b) => default param b: Int
  Int => scala/Int#
example/Issue2144.Test#`<init>`().(c) => default param c: Int
  Int => scala/Int#
example/Issue2144.Test#a. => private[this] val method a: Boolean
  Boolean => scala/Boolean#
example/Issue2144.Test#b. => private[this] val method b: Int
  Int => scala/Int#
example/Issue2144.Test#c. => private[this] val method c: Int
  Int => scala/Int#
example/Issue2144.Test. => final object Test extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
example/Issue2144.Test.`<init>$default$2`(). => method <init>$default$2: Int @uncheckedVariance
  Int => scala/Int#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/Issue2144.Test.`<init>$default$3`(). => method <init>$default$3: Int @uncheckedVariance
  Int => scala/Int#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/Issue2144.x. => val method x: Test
  Test => example/Issue2144.Test#
local0 => val local x$1: true
local1 => val local x$2: 1
local2 => val local x$3: Int
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[1:7..1:16): Issue2144 <= example/Issue2144.
[2:8..2:12): Test <= example/Issue2144.Test#
[2:12..2:12):  <= example/Issue2144.Test#`<init>`().
[2:13..2:14): a <= example/Issue2144.Test#a.
[2:16..2:23): Boolean => scala/Boolean#
[2:25..2:26): b <= example/Issue2144.Test#b.
[2:28..2:31): Int => scala/Int#
[2:37..2:38): c <= example/Issue2144.Test#c.
[2:40..2:43): Int => scala/Int#
[3:6..3:7): x <= example/Issue2144.x.
[3:14..3:18): Test => example/Issue2144.Test#
[3:18..3:18):  => example/Issue2144.Test#`<init>`().
[3:19..3:20): a => example/Issue2144.Test#`<init>`().(a)
[3:29..3:30): c => example/Issue2144.Test#`<init>`().(c)

semanticdb/integration/src/main/scala/example/Issue5939Metals.scala
-------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Issue5939Metals.scala
Text => non-empty
Language => Scala
Symbols => 9 entries
Occurrences => 23 entries
Synthetics => 2 entries

Symbols:
example/AA# => class AA extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
example/AA#`<init>`(). => primary ctor <init>(val f: Function1[Int, Int])
  f => example/AA#`<init>`().(f)
  Function1 => scala/Function1#
  Int => scala/Int#
example/AA#`<init>`().(f) => val param f: Function1[Int, Int]
  Function1 => scala/Function1#
  Int => scala/Int#
example/AA#f. => val method f: Function1[Int, Int]
  Function1 => scala/Function1#
  Int => scala/Int#
example/AA. => final object AA extends AnyRef { +3 decls }
  AnyRef => scala/AnyRef#
example/AA.a. => val method a: AA
  AA => example/AA#
example/AA.result. => val method result: Int
  Int => scala/Int#
example/AA.toF(). => implicit method toF(a: AA): Function1[Int, Int]
  a => example/AA.toF().(a)
  AA => example/AA#
  Function1 => scala/Function1#
  Int => scala/Int#
example/AA.toF().(a) => param a: AA
  AA => example/AA#

Occurrences:
[1:8..1:15): example <= example/
[2:7..2:12): scala => scala/
[2:13..2:21): language => scala/language.
[2:22..2:41): implicitConversions => scala/language.implicitConversions.
[4:6..4:8): AA <= example/AA#
[4:8..4:8):  <= example/AA#`<init>`().
[4:13..4:14): f <= example/AA#f.
[4:16..4:19): Int => scala/Int#
[4:23..4:26): Int => scala/Int#
[6:7..6:9): AA <= example/AA.
[7:15..7:18): toF <= example/AA.toF().
[7:19..7:20): a <= example/AA.toF().(a)
[7:22..7:24): AA => example/AA#
[7:27..7:30): Int => scala/Int#
[7:34..7:37): Int => scala/Int#
[7:40..7:41): a => example/AA.toF().(a)
[7:42..7:43): f => example/AA#f.
[8:6..8:7): a <= example/AA.a.
[8:14..8:16): AA => example/AA#
[8:16..8:16):  => example/AA#`<init>`().
[8:19..8:20): + => scala/Int#`+`(+4).
[9:6..9:12): result <= example/AA.result.
[9:15..9:16): a => example/AA.a.

Synthetics:
[9:15..9:16): a => *.apply
  apply => scala/Function1#apply().
[9:15..9:16): a => toF(*)
  toF => example/AA.toF().

semanticdb/integration/src/main/scala/example/local-file.scala
--------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/local-file.scala
Text => non-empty
Language => Scala
Symbols => 3 entries
Occurrences => 7 entries
Synthetics => 1 entries

Symbols:
example/`local-file`# => class local-file extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/`local-file`#`<init>`(). => primary ctor <init>()
local0 => val local local: Int
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:18): `local-file` <= example/`local-file`#
[2:19..2:19):  <= example/`local-file`#`<init>`().
[3:2..3:9): locally => scala/Predef.locally().
[4:8..4:13): local <= local0
[5:4..5:9): local => local0
[5:10..5:11): + => scala/Int#`+`(+4).

Synthetics:
[3:2..3:9): locally => *[Int]
  Int => scala/Int#

semanticdb/integration/src/main/scala/example/Local.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Local.scala
Text => non-empty
Language => Scala
Symbols => 6 entries
Occurrences => 11 entries
Synthetics => 1 entries

Symbols:
example/Local# => class Local extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
example/Local#`<init>`(). => primary ctor <init>()
example/Local#a(). => method a(): Int
  Int => scala/Int#
local0 => method id[A](a: A): A
  A => local2
  a => local1
local1 => param a: A
  A => local2
local2 => typeparam A

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:11): Local <= example/Local#
[2:12..2:12):  <= example/Local#`<init>`().
[3:6..3:7): a <= example/Local#a().
[4:8..4:10): id <= local0
[4:11..4:12): A <= local2
[4:14..4:15): a <= local1
[4:17..4:18): A => local2
[4:21..4:22): A => local2
[4:25..4:26): a => local1
[5:4..5:6): id => local0

Synthetics:
[5:4..5:6): id => *[Int]
  Int => scala/Int#

semanticdb/integration/src/main/scala/example/Locals.scala
----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Locals.scala
Text => non-empty
Language => Scala
Symbols => 3 entries
Occurrences => 6 entries
Synthetics => 1 entries

Symbols:
local0 => val local x: Int
  Int => scala/Int#
locals/Test. => final object Test extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
locals/Test.xs. => val method xs: List[Int]
  List => scala/collection/immutable/List#
  Int => scala/Int#

Occurrences:
[0:8..0:14): locals <= locals/
[2:7..2:11): Test <= locals/Test.
[3:6..3:8): xs <= locals/Test.xs.
[4:8..4:9): x <= local0
[5:4..5:8): List => scala/package.List.
[5:9..5:10): x => local0

Synthetics:
[5:4..5:8): List => *.apply[Int]
  apply => scala/collection/IterableFactory#apply().
  Int => scala/Int#

semanticdb/integration/src/main/scala/example/MacroAnnotations.scala
--------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/MacroAnnotations.scala
Text => non-empty
Language => Scala
Symbols => 5 entries
Occurrences => 3 entries

Symbols:
example/MacroAnnotations# => class MacroAnnotations extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
example/MacroAnnotations#`<init>`(). => primary ctor <init>()
example/MacroAnnotations#classNumber(). => method classNumber: Int
  Int => scala/Int#
example/MacroAnnotations. => final object MacroAnnotations extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/MacroAnnotations.objectNumber(). => method objectNumber: Int
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:1..2:16): MacroAnnotation => example/MacroAnnotations#
[3:22..3:22):  <= example/MacroAnnotations#`<init>`().

semanticdb/integration/src/main/scala/example/MetacJava.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/MetacJava.scala
Text => non-empty
Language => Scala
Symbols => 10 entries
Occurrences => 62 entries

Symbols:
example/MetacJava# => class MetacJava extends AnyRef { +9 decls }
  AnyRef => scala/AnyRef#
example/MetacJava#`<init>`(). => primary ctor <init>()
example/MetacJava#coin. => val method coin: Coin
  Coin => com/javacp/Coin#
example/MetacJava#entry. => val method entry: Entry[Int, Int]
  Entry => java/util/Map#Entry#
  Int => scala/Int#
example/MetacJava#inner. => val method inner: MetacJava
  MetacJava => com/javacp/MetacJava#
example/MetacJava#interface. => val method interface: Interface
  Interface => com/javacp/Interface#
example/MetacJava#nonStatic. => val method nonStatic: staticInner.NonStatic
  staticInner => example/MetacJava#staticInner.
  NonStatic => com/javacp/MetacJava#StaticInner#NonStatic#
example/MetacJava#overload1. => val method overload1: inner.Overload1
  inner => example/MetacJava#inner.
  Overload1 => com/javacp/MetacJava#Overload1#
example/MetacJava#overload2. => val method overload2: inner.Overload2
  inner => example/MetacJava#inner.
  Overload2 => com/javacp/MetacJava#Overload2#
example/MetacJava#staticInner. => val method staticInner: StaticInner
  StaticInner => com/javacp/MetacJava#StaticInner#

Occurrences:
[0:8..0:15): example <= example/
[2:7..2:10): com => com/
[2:11..2:17): javacp => com/javacp/
[4:6..4:15): MetacJava <= example/MetacJava#
[4:16..4:16):  <= example/MetacJava#`<init>`().
[5:2..5:8): javacp => com/javacp/
[5:9..5:18): MetacJava => com/javacp/MetacJava#
[5:19..5:30): StaticInner => com/javacp/MetacJava#StaticInner#
[5:31..5:39): isStatic => com/javacp/MetacJava#StaticInner#isStatic().
[6:6..6:12): javacp => com/javacp/
[6:13..6:22): MetacJava => com/javacp/MetacJava#
[6:23..6:34): StaticInner => com/javacp/MetacJava#StaticInner#
[6:34..6:34):  => com/javacp/MetacJava#StaticInner#`<init>`().
[6:37..6:48): isNotStatic => com/javacp/MetacJava#StaticInner#isNotStatic().
[7:6..7:11): inner <= example/MetacJava#inner.
[7:18..7:24): javacp => com/javacp/
[7:25..7:34): MetacJava => com/javacp/MetacJava#
[7:34..7:34):  => com/javacp/MetacJava#`<init>`().
[8:6..8:15): overload1 <= example/MetacJava#overload1.
[8:22..8:27): inner => example/MetacJava#inner.
[8:28..8:37): Overload1 => com/javacp/MetacJava#Overload1#
[8:37..8:37):  => com/javacp/MetacJava#Overload1#`<init>`().
[9:6..9:15): overload2 <= example/MetacJava#overload2.
[9:22..9:27): inner => example/MetacJava#inner.
[9:28..9:37): Overload2 => com/javacp/MetacJava#Overload2#
[9:37..9:37):  => com/javacp/MetacJava#Overload2#`<init>`().
[13:6..13:17): staticInner <= example/MetacJava#staticInner.
[13:24..13:30): javacp => com/javacp/
[13:31..13:40): MetacJava => com/javacp/MetacJava#
[13:41..13:52): StaticInner => com/javacp/MetacJava#StaticInner#
[13:52..13:52):  => com/javacp/MetacJava#StaticInner#`<init>`().
[14:6..14:15): nonStatic <= example/MetacJava#nonStatic.
[14:22..14:33): staticInner => example/MetacJava#staticInner.
[14:34..14:43): NonStatic => com/javacp/MetacJava#StaticInner#NonStatic#
[14:43..14:43):  => com/javacp/MetacJava#StaticInner#NonStatic#`<init>`().
[15:2..15:11): nonStatic => example/MetacJava#nonStatic.
[15:12..15:18): method => com/javacp/MetacJava#StaticInner#NonStatic#method().
[15:19..15:28): nonStatic => example/MetacJava#nonStatic.
[16:2..16:8): javacp => com/javacp/
[16:9..16:18): MetacJava => com/javacp/MetacJava#
[16:19..16:27): overload => com/javacp/MetacJava#overload(+2).
[16:32..16:38): javacp => com/javacp/
[16:39..16:48): MetacJava => com/javacp/MetacJava#
[16:49..16:58): Overload3 => com/javacp/MetacJava#Overload3#
[16:59..16:60): A => com/javacp/MetacJava#Overload3#A#
[16:60..16:60):  => com/javacp/MetacJava#Overload3#A#`<init>`().
[17:6..17:15): interface <= example/MetacJava#interface.
[17:17..17:23): javacp => com/javacp/
[17:24..17:33): Interface => com/javacp/Interface#
[18:6..18:10): coin <= example/MetacJava#coin.
[18:12..18:18): javacp => com/javacp/
[18:19..18:23): Coin => com/javacp/Coin#
[18:26..18:32): javacp => com/javacp/
[18:33..18:37): Coin => com/javacp/Coin#
[18:38..18:43): PENNY => com/javacp/Coin#PENNY.
[19:6..19:11): entry <= example/MetacJava#entry.
[19:13..19:17): java => java/
[19:18..19:22): util => java/util/
[19:23..19:26): Map => java/util/Map#
[19:27..19:32): Entry => java/util/Map#Entry#
[19:33..19:36): Int => scala/Int#
[19:38..19:41): Int => scala/Int#

semanticdb/integration/src/main/scala/example/Methods.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Methods.scala
Text => non-empty
Language => Scala
Symbols => 78 entries
Occurrences => 147 entries
Diagnostics => 1 entries

Symbols:
example/Methods# => class Methods[T] extends AnyRef { +35 decls }
  T => example/Methods#[T]
  AnyRef => scala/AnyRef#
example/Methods#AList# => type AList[T] = List[T]
  T => example/Methods#AList#[T]
  List => example/Methods#List#
example/Methods#AList#[T] => typeparam T
example/Methods#List# => class List[T] extends AnyRef { +1 decls }
  T => example/Methods#List#[T]
  AnyRef => scala/AnyRef#
example/Methods#List#[T] => typeparam T
example/Methods#List#`<init>`(). => primary ctor <init>()
example/Methods#[T] => typeparam T
example/Methods#`<init>`(). => primary ctor <init>()
example/Methods#`m8().`(). => method m8().(): Nothing
  Nothing => scala/Nothing#
example/Methods#`m9().`# => class m9(). extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/Methods#`m9().`#`<init>`(). => primary ctor <init>()
example/Methods#m1(). => method m1: Nothing
  Nothing => scala/Nothing#
example/Methods#m2(). => method m2(): Nothing
  Nothing => scala/Nothing#
example/Methods#m3(). => method m3(x: Int): Nothing
  x => example/Methods#m3().(x)
  Int => scala/Int#
  Nothing => scala/Nothing#
example/Methods#m3().(x) => param x: Int
  Int => scala/Int#
example/Methods#m4(). => method m4(x: Int)(y: Int): Nothing
  x => example/Methods#m4().(x)
  Int => scala/Int#
  y => example/Methods#m4().(y)
  Nothing => scala/Nothing#
example/Methods#m4().(x) => param x: Int
  Int => scala/Int#
example/Methods#m4().(y) => param y: Int
  Int => scala/Int#
example/Methods#m5(). => method m5(x: String): Nothing
  x => example/Methods#m5().(x)
  String => scala/Predef.String#
  Nothing => scala/Nothing#
example/Methods#m5().(x) => param x: String
  String => scala/Predef.String#
example/Methods#m5(+1). => method m5(x: Int): Nothing
  x => example/Methods#m5(+1).(x)
  Int => scala/Int#
  Nothing => scala/Nothing#
example/Methods#m5(+1).(x) => param x: Int
  Int => scala/Int#
example/Methods#m6(). => method m6(x: Int): Nothing
  x => example/Methods#m6().(x)
  Int => scala/Int#
  Nothing => scala/Nothing#
example/Methods#m6().(x) => param x: Int
  Int => scala/Int#
example/Methods#m6(+1). => method m6(x: List[T]): Nothing
  x => example/Methods#m6(+1).(x)
  List => example/Methods#List#
  T => example/Methods#[T]
  Nothing => scala/Nothing#
example/Methods#m6(+1).(x) => param x: List[T]
  List => example/Methods#List#
  T => example/Methods#[T]
example/Methods#m6(+2). => method m6(x: List[T]): Nothing
  x => example/Methods#m6(+2).(x)
  List => scala/package.List#
  T => example/Methods#[T]
  Nothing => scala/Nothing#
example/Methods#m6(+2).(x) => param x: List[T]
  List => scala/package.List#
  T => example/Methods#[T]
example/Methods#m7a(). => method m7a[U](c: Methods[T], l: List[U])(implicit evidence$1: Ordering[U]): Nothing
  U => example/Methods#m7a().[U]
  c => example/Methods#m7a().(c)
  Methods => example/Methods#
  T => example/Methods#[T]
  l => example/Methods#m7a().(l)
  List => example/Methods#List#
  evidence$1 => example/Methods#m7a().(evidence$1)
  Ordering => scala/math/Ordering#
  Nothing => scala/Nothing#
example/Methods#m7a().(c) => param c: Methods[T]
  Methods => example/Methods#
  T => example/Methods#[T]
example/Methods#m7a().(evidence$1) => implicit param evidence$1: Ordering[U]
  Ordering => scala/math/Ordering#
  U => example/Methods#m7a().[U]
example/Methods#m7a().(l) => param l: List[U]
  List => example/Methods#List#
  U => example/Methods#m7a().[U]
example/Methods#m7a().[U] => typeparam U
example/Methods#m7b(). => method m7b[U](l: List[U])(implicit evidence$2: Function1[U, T]): Nothing
  U => example/Methods#m7b().[U]
  l => example/Methods#m7b().(l)
  List => example/Methods#List#
  evidence$2 => example/Methods#m7b().(evidence$2)
  Function1 => scala/Function1#
  T => example/Methods#[T]
  Nothing => scala/Nothing#
example/Methods#m7b().(evidence$2) => implicit param evidence$2: Function1[U, T]
  Function1 => scala/Function1#
  U => example/Methods#m7b().[U]
  T => example/Methods#[T]
example/Methods#m7b().(l) => param l: List[U]
  List => example/Methods#List#
  U => example/Methods#m7b().[U]
example/Methods#m7b().[U] => typeparam U
example/Methods#m9(). => method m9(x: m9().): Nothing
  x => example/Methods#m9().(x)
  m9(). => example/Methods#`m9().`#
  Nothing => scala/Nothing#
example/Methods#m9().(x) => param x: m9().
  m9(). => example/Methods#`m9().`#
example/Methods#m10(). => method m10(x: AList[T]): Nothing
  x => example/Methods#m10().(x)
  AList => example/Methods#AList#
  T => example/Methods#[T]
  Nothing => scala/Nothing#
example/Methods#m10().(x) => param x: AList[T]
  AList => example/Methods#AList#
  T => example/Methods#[T]
example/Methods#m11(). => method m11(x: Predef.type): Nothing
  x => example/Methods#m11().(x)
  Predef => scala/Predef.
  Nothing => scala/Nothing#
example/Methods#m11().(x) => param x: Predef.type
  Predef => scala/Predef.
example/Methods#m11(+1). => method m11(x: Example.type): Nothing
  x => example/Methods#m11(+1).(x)
  Example => example/Example.
  Nothing => scala/Nothing#
example/Methods#m11(+1).(x) => param x: Example.type
  Example => example/Example.
example/Methods#m12a(). => method m12a(x: AnyRef {}): Nothing
  x => example/Methods#m12a().(x)
  AnyRef => scala/AnyRef#
  Nothing => scala/Nothing#
example/Methods#m12a().(x) => param x: AnyRef {}
  AnyRef => scala/AnyRef#
example/Methods#m12b(). => method m12b(x: AnyRef { val def x: Int }): Nothing
  x => example/Methods#m12b().(x)
  AnyRef => scala/AnyRef#
  x => local0
  Int => scala/Int#
  Nothing => scala/Nothing#
example/Methods#m12b().(x) => param x: AnyRef { val def x: Int }
  AnyRef => scala/AnyRef#
  x => local0
  Int => scala/Int#
example/Methods#m13(). => method m13(x: Int @unchecked): Nothing
  x => example/Methods#m13().(x)
  Int => scala/Int#
  unchecked => scala/unchecked#
  Nothing => scala/Nothing#
example/Methods#m13().(x) => param x: Int @unchecked
  Int => scala/Int#
  unchecked => scala/unchecked#
example/Methods#m14(). => method m14(x: T forSome { type T }): Nothing
  x => example/Methods#m14().(x)
  T => local1
  Nothing => scala/Nothing#
example/Methods#m14().(x) => param x: T forSome { type T }
  T => local1
example/Methods#m15(). => method m15(x: => Int): Nothing
  x => example/Methods#m15().(x)
  Int => scala/Int#
  Nothing => scala/Nothing#
example/Methods#m15().(x) => param x: => Int
  Int => scala/Int#
example/Methods#m16(). => method m16(x: Int*): Nothing
  x => example/Methods#m16().(x)
  Int => scala/Int#
  Nothing => scala/Nothing#
example/Methods#m16().(x) => param x: Int*
  Int => scala/Int#
example/Methods#m17(). => method m17(a: Int): Nothing
  a => example/Methods#m17().(a)
  Int => scala/Int#
  Nothing => scala/Nothing#
example/Methods#m17().(a) => param a: Int
  Int => scala/Int#
example/Methods#m17(+1). => method m17(b: String): Nothing
  b => example/Methods#m17(+1).(b)
  String => scala/Predef.String#
  Nothing => scala/Nothing#
example/Methods#m17(+1).(b) => param b: String
  String => scala/Predef.String#
example/Methods#m17. => final object m17 extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/Methods#m17.m(). => method m(): Nothing
  Nothing => scala/Nothing#
example/Methods#m18(). => method m18(a: Int): Nothing
  a => example/Methods#m18().(a)
  Int => scala/Int#
  Nothing => scala/Nothing#
example/Methods#m18().(a) => param a: Int
  Int => scala/Int#
example/Methods#m18(+1). => method m18(b: String): Nothing
  b => example/Methods#m18(+1).(b)
  String => scala/Predef.String#
  Nothing => scala/Nothing#
example/Methods#m18(+1).(b) => param b: String
  String => scala/Predef.String#
example/Methods#m18. => val method m18: m17.type
  m17 => example/Methods#m17.
example/Methods#m19$default$2(). => method m19$default$2: Int @uncheckedVariance
  Int => scala/Int#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/Methods#m19$default$3(). => method m19$default$3(x: Int, y: Int): Int @uncheckedVariance
  x => example/Methods#m19$default$3().(x)
  Int => scala/Int#
  y => example/Methods#m19$default$3().(y)
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/Methods#m19$default$3().(x) => param x: Int
  Int => scala/Int#
example/Methods#m19$default$3().(y) => param y: Int
  Int => scala/Int#
example/Methods#m19(). => method m19(x: Int, y: Int)(z: Int): Nothing
  x => example/Methods#m19().(x)
  Int => scala/Int#
  y => example/Methods#m19().(y)
  z => example/Methods#m19().(z)
  Nothing => scala/Nothing#
example/Methods#m19().(x) => param x: Int
  Int => scala/Int#
example/Methods#m19().(y) => default param y: Int
  Int => scala/Int#
example/Methods#m19().(z) => default param z: Int
  Int => scala/Int#
local0 => abstract val method x: Int
  Int => scala/Int#
local1 => abstract type T

Occurrences:
[0:8..0:15): example <= example/
[2:7..2:12): scala => scala/
[2:13..2:17): math => scala/math/
[2:18..2:26): Ordering => scala/math/Ordering#
[2:18..2:26): Ordering => scala/math/Ordering.
[3:7..3:12): scala => scala/
[3:13..3:21): language => scala/language.
[3:22..3:34): existentials => scala/language.existentials.
[5:6..5:13): Methods <= example/Methods#
[5:14..5:15): T <= example/Methods#[T]
[5:17..5:17):  <= example/Methods#`<init>`().
[6:8..6:12): List <= example/Methods#List#
[6:13..6:14): T <= example/Methods#List#[T]
[6:15..6:15):  <= example/Methods#List#`<init>`().
[7:7..7:12): AList <= example/Methods#AList#
[7:13..7:14): T <= example/Methods#AList#[T]
[7:18..7:22): List => example/Methods#List#
[7:23..7:24): T => example/Methods#AList#[T]
[8:6..8:8): m1 <= example/Methods#m1().
[8:11..8:14): ??? => scala/Predef.`???`().
[9:6..9:8): m2 <= example/Methods#m2().
[9:13..9:16): ??? => scala/Predef.`???`().
[10:6..10:8): m3 <= example/Methods#m3().
[10:9..10:10): x <= example/Methods#m3().(x)
[10:12..10:15): Int => scala/Int#
[10:19..10:22): ??? => scala/Predef.`???`().
[11:6..11:8): m4 <= example/Methods#m4().
[11:9..11:10): x <= example/Methods#m4().(x)
[11:12..11:15): Int => scala/Int#
[11:17..11:18): y <= example/Methods#m4().(y)
[11:20..11:23): Int => scala/Int#
[11:27..11:30): ??? => scala/Predef.`???`().
[12:6..12:8): m5 <= example/Methods#m5().
[12:9..12:10): x <= example/Methods#m5().(x)
[12:12..12:18): String => scala/Predef.String#
[12:22..12:25): ??? => scala/Predef.`???`().
[13:6..13:8): m5 <= example/Methods#m5(+1).
[13:9..13:10): x <= example/Methods#m5(+1).(x)
[13:12..13:15): Int => scala/Int#
[13:19..13:22): ??? => scala/Predef.`???`().
[14:6..14:8): m6 <= example/Methods#m6().
[14:9..14:10): x <= example/Methods#m6().(x)
[14:12..14:15): Int => scala/Int#
[14:19..14:22): ??? => scala/Predef.`???`().
[15:6..15:8): m6 <= example/Methods#m6(+1).
[15:9..15:10): x <= example/Methods#m6(+1).(x)
[15:12..15:16): List => example/Methods#List#
[15:17..15:18): T => example/Methods#[T]
[15:23..15:26): ??? => scala/Predef.`???`().
[16:6..16:8): m6 <= example/Methods#m6(+2).
[16:9..16:10): x <= example/Methods#m6(+2).(x)
[16:12..16:17): scala => scala/
[16:18..16:22): List => scala/package.List#
[16:23..16:24): T => example/Methods#[T]
[16:29..16:32): ??? => scala/Predef.`???`().
[17:6..17:9): m7a <= example/Methods#m7a().
[17:10..17:11): U <= example/Methods#m7a().[U]
[17:13..17:21): Ordering => example/Methods#m7a().(evidence$1)
[17:23..17:24): c <= example/Methods#m7a().(c)
[17:26..17:33): Methods => example/Methods#
[17:34..17:35): T => example/Methods#[T]
[17:38..17:39): l <= example/Methods#m7a().(l)
[17:41..17:45): List => example/Methods#List#
[17:46..17:47): U => example/Methods#m7a().[U]
[17:52..17:55): ??? => scala/Predef.`???`().
[18:6..18:9): m7b <= example/Methods#m7b().
[18:10..18:11): U <= example/Methods#m7b().[U]
[18:15..18:16): T => example/Methods#[T]
[18:18..18:19): l <= example/Methods#m7b().(l)
[18:21..18:25): List => example/Methods#List#
[18:26..18:27): U => example/Methods#m7b().[U]
[18:32..18:35): ??? => scala/Predef.`???`().
[19:6..19:13): `m8().` <= example/Methods#`m8().`().
[19:18..19:21): ??? => scala/Predef.`???`().
[20:8..20:15): `m9().` <= example/Methods#`m9().`#
[20:15..20:15):  <= example/Methods#`m9().`#`<init>`().
[21:6..21:8): m9 <= example/Methods#m9().
[21:9..21:10): x <= example/Methods#m9().(x)
[21:12..21:19): `m9().` => example/Methods#`m9().`#
[21:23..21:26): ??? => scala/Predef.`???`().
[22:6..22:9): m10 <= example/Methods#m10().
[22:10..22:11): x <= example/Methods#m10().(x)
[22:13..22:18): AList => example/Methods#AList#
[22:19..22:20): T => example/Methods#[T]
[22:25..22:28): ??? => scala/Predef.`???`().
[23:6..23:9): m11 <= example/Methods#m11().
[23:10..23:11): x <= example/Methods#m11().(x)
[23:13..23:19): Predef => scala/Predef.
[23:28..23:31): ??? => scala/Predef.`???`().
[24:6..24:9): m11 <= example/Methods#m11(+1).
[24:10..24:11): x <= example/Methods#m11(+1).(x)
[24:13..24:20): Example => example/Example.
[24:29..24:32): ??? => scala/Predef.`???`().
[25:6..25:10): m12a <= example/Methods#m12a().
[25:11..25:12): x <= example/Methods#m12a().(x)
[25:20..25:23): ??? => scala/Predef.`???`().
[26:6..26:10): m12b <= example/Methods#m12b().
[26:11..26:12): x <= example/Methods#m12b().(x)
[26:20..26:21): x <= local0
[26:23..26:26): Int => scala/Int#
[26:32..26:35): ??? => scala/Predef.`???`().
[27:6..27:9): m13 <= example/Methods#m13().
[27:10..27:11): x <= example/Methods#m13().(x)
[27:13..27:16): Int => scala/Int#
[27:31..27:34): ??? => scala/Predef.`???`().
[28:6..28:9): m14 <= example/Methods#m14().
[28:10..28:11): x <= example/Methods#m14().(x)
[28:13..28:14): T => local1
[28:30..28:31): T <= local1
[28:37..28:40): ??? => scala/Predef.`???`().
[29:6..29:9): m15 <= example/Methods#m15().
[29:10..29:11): x <= example/Methods#m15().(x)
[29:16..29:19): Int => scala/Int#
[29:23..29:26): ??? => scala/Predef.`???`().
[30:6..30:9): m16 <= example/Methods#m16().
[30:10..30:11): x <= example/Methods#m16().(x)
[30:13..30:16): Int => scala/Int#
[30:21..30:24): ??? => scala/Predef.`???`().
[31:9..31:12): m17 <= example/Methods#m17.
[31:19..31:20): m <= example/Methods#m17.m().
[31:25..31:28): ??? => scala/Predef.`???`().
[32:6..32:9): m17 <= example/Methods#m17().
[32:10..32:11): a <= example/Methods#m17().(a)
[32:13..32:16): Int => scala/Int#
[32:20..32:23): ??? => scala/Predef.`???`().
[33:6..33:9): m17 <= example/Methods#m17(+1).
[33:10..33:11): b <= example/Methods#m17(+1).(b)
[33:13..33:19): String => scala/Predef.String#
[33:23..33:26): ??? => scala/Predef.`???`().
[34:6..34:9): m18 <= example/Methods#m18.
[34:12..34:15): m17 => example/Methods#m17.
[35:6..35:9): m18 <= example/Methods#m18().
[35:10..35:11): a <= example/Methods#m18().(a)
[35:13..35:16): Int => scala/Int#
[35:20..35:23): ??? => scala/Predef.`???`().
[36:6..36:9): m18 <= example/Methods#m18(+1).
[36:10..36:11): b <= example/Methods#m18(+1).(b)
[36:13..36:19): String => scala/Predef.String#
[36:23..36:26): ??? => scala/Predef.`???`().
[37:6..37:9): m19 <= example/Methods#m19().
[37:10..37:11): x <= example/Methods#m19().(x)
[37:13..37:16): Int => scala/Int#
[37:18..37:19): y <= example/Methods#m19().(y)
[37:21..37:24): Int => scala/Int#
[37:30..37:31): z <= example/Methods#m19().(z)
[37:33..37:36): Int => scala/Int#
[37:44..37:47): ??? => scala/Predef.`???`().

Diagnostics:
[18:12..18:12) [warning] view bounds are deprecated; use an implicit parameter instead.
  example: instead of `def f[A <% Int](a: A)` use `def f[A](a: A)(implicit ev: A => Int)`

semanticdb/integration/src/main/scala/example/MethodUsages.scala
----------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/MethodUsages.scala
Text => non-empty
Language => Scala
Symbols => 3 entries
Occurrences => 83 entries
Synthetics => 4 entries

Symbols:
example/MethodUsages# => class MethodUsages extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
example/MethodUsages#`<init>`(). => primary ctor <init>()
example/MethodUsages#m. => val method m: Methods[Int]
  Methods => example/Methods#
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:18): MethodUsages <= example/MethodUsages#
[2:19..2:19):  <= example/MethodUsages#`<init>`().
[3:6..3:7): m <= example/MethodUsages#m.
[3:14..3:21): Methods => example/Methods#
[3:22..3:25): Int => scala/Int#
[3:26..3:26):  => example/Methods#`<init>`().
[4:2..4:3): m => example/MethodUsages#m.
[4:4..4:6): m1 => example/Methods#m1().
[5:2..5:3): m => example/MethodUsages#m.
[5:4..5:6): m2 => example/Methods#m2().
[6:2..6:3): m => example/MethodUsages#m.
[6:4..6:6): m3 => example/Methods#m3().
[7:2..7:3): m => example/MethodUsages#m.
[7:4..7:6): m4 => example/Methods#m4().
[8:2..8:3): m => example/MethodUsages#m.
[8:4..8:6): m5 => example/Methods#m5().
[9:2..9:3): m => example/MethodUsages#m.
[9:4..9:6): m5 => example/Methods#m5(+1).
[10:2..10:3): m => example/MethodUsages#m.
[10:4..10:6): m6 => example/Methods#m6().
[11:2..11:3): m => example/MethodUsages#m.
[11:4..11:6): m6 => example/Methods#m6(+1).
[11:11..11:12): m => example/MethodUsages#m.
[11:13..11:17): List => example/Methods#List#
[11:18..11:21): Int => scala/Int#
[11:22..11:22):  => example/Methods#List#`<init>`().
[12:2..12:3): m => example/MethodUsages#m.
[12:4..12:6): m6 => example/Methods#m6(+2).
[12:7..12:10): Nil => scala/package.Nil.
[13:2..13:3): m => example/MethodUsages#m.
[13:4..13:7): m7a => example/Methods#m7a().
[13:8..13:9): m => example/MethodUsages#m.
[13:15..13:16): m => example/MethodUsages#m.
[13:17..13:21): List => example/Methods#List#
[13:22..13:25): Int => scala/Int#
[13:26..13:26):  => example/Methods#List#`<init>`().
[14:2..14:3): m => example/MethodUsages#m.
[14:4..14:7): m7b => example/Methods#m7b().
[14:12..14:13): m => example/MethodUsages#m.
[14:14..14:18): List => example/Methods#List#
[14:19..14:22): Int => scala/Int#
[14:23..14:23):  => example/Methods#List#`<init>`().
[15:2..15:3): m => example/MethodUsages#m.
[15:4..15:11): `m8().` => example/Methods#`m8().`().
[16:2..16:3): m => example/MethodUsages#m.
[16:4..16:6): m9 => example/Methods#m9().
[17:2..17:3): m => example/MethodUsages#m.
[17:4..17:7): m10 => example/Methods#m10().
[18:2..18:3): m => example/MethodUsages#m.
[18:4..18:7): m11 => example/Methods#m11().
[18:8..18:14): Predef => scala/Predef.
[19:2..19:3): m => example/MethodUsages#m.
[19:4..19:7): m11 => example/Methods#m11(+1).
[19:8..19:15): Example => example/Example.
[20:2..20:3): m => example/MethodUsages#m.
[20:4..20:8): m12a => example/Methods#m12a().
[21:2..21:3): m => example/MethodUsages#m.
[21:4..21:8): m12b => example/Methods#m12b().
[22:2..22:3): m => example/MethodUsages#m.
[22:4..22:7): m13 => example/Methods#m13().
[23:2..23:3): m => example/MethodUsages#m.
[23:4..23:7): m14 => example/Methods#m14().
[24:2..24:3): m => example/MethodUsages#m.
[24:4..24:7): m15 => example/Methods#m15().
[25:2..25:3): m => example/MethodUsages#m.
[25:4..25:7): m16 => example/Methods#m16().
[26:2..26:3): m => example/MethodUsages#m.
[26:4..26:7): m16 => example/Methods#m16().
[27:2..27:3): m => example/MethodUsages#m.
[27:4..27:7): m17 => example/Methods#m17.
[27:8..27:9): m => example/Methods#m17.m().
[28:2..28:3): m => example/MethodUsages#m.
[28:4..28:7): m17 => example/Methods#m17().
[29:2..29:3): m => example/MethodUsages#m.
[29:4..29:7): m17 => example/Methods#m17(+1).
[30:2..30:3): m => example/MethodUsages#m.
[30:4..30:7): m18 => example/Methods#m18.
[30:8..30:9): m => example/Methods#m17.m().
[31:2..31:3): m => example/MethodUsages#m.
[31:4..31:7): m18 => example/Methods#m18().
[32:2..32:3): m => example/MethodUsages#m.
[32:4..32:7): m18 => example/Methods#m18(+1).

Synthetics:
[13:2..13:7): m.m7a => *[Int]
  Int => scala/Int#
[13:2..13:27): m.m7a(m, new m.List[Int]) => *(Int)
  Int => scala/math/Ordering.Int.
[14:2..14:7): m.m7b => *[Int]
  Int => scala/Int#
[14:2..14:24): m.m7b(new m.List[Int]) => *(Predef.$conforms[Int])
  Predef => scala/Predef.
  $conforms => scala/Predef.$conforms().
  Int => scala/Int#

semanticdb/integration/src/main/scala/example/NamedApplyBlock.scala
-------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/NamedApplyBlock.scala
Text => non-empty
Language => Scala
Symbols => 66 entries
Occurrences => 41 entries
Synthetics => 1 entries

Symbols:
example/NamedApplyBlockCaseClassConstruction. => final object NamedApplyBlockCaseClassConstruction extends AnyRef { +4 decls }
  AnyRef => scala/AnyRef#
example/NamedApplyBlockCaseClassConstruction.Msg# => case class Msg extends AnyRef with Product with Serializable { +17 decls }
  AnyRef => scala/AnyRef#
  Product => scala/Product#
  Serializable => scala/package.Serializable#
example/NamedApplyBlockCaseClassConstruction.Msg#`<init>`(). => primary ctor <init>(val body: String, val head: String, val tail: String)
  body => example/NamedApplyBlockCaseClassConstruction.Msg#`<init>`().(body)
  String => scala/Predef.String#
  head => example/NamedApplyBlockCaseClassConstruction.Msg#`<init>`().(head)
  tail => example/NamedApplyBlockCaseClassConstruction.Msg#`<init>`().(tail)
example/NamedApplyBlockCaseClassConstruction.Msg#`<init>`().(body) => val param body: String
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg#`<init>`().(head) => val default param head: String
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg#`<init>`().(tail) => val param tail: String
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg#body. => val method body: String
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg#canEqual(). => method canEqual(x$1: Any): Boolean <: scala/Equals#canEqual().
  x$1 => example/NamedApplyBlockCaseClassConstruction.Msg#canEqual().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
example/NamedApplyBlockCaseClassConstruction.Msg#canEqual().(x$1) => param x$1: Any
  Any => scala/Any#
example/NamedApplyBlockCaseClassConstruction.Msg#copy$default$1(). => method copy$default$1: String @uncheckedVariance
  String => scala/Predef.String#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/NamedApplyBlockCaseClassConstruction.Msg#copy$default$2(). => method copy$default$2: String @uncheckedVariance
  String => scala/Predef.String#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/NamedApplyBlockCaseClassConstruction.Msg#copy$default$3(). => method copy$default$3: String @uncheckedVariance
  String => scala/Predef.String#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/NamedApplyBlockCaseClassConstruction.Msg#copy(). => method copy(body: String, head: String, tail: String): Msg
  body => example/NamedApplyBlockCaseClassConstruction.Msg#copy().(body)
  String => scala/Predef.String#
  head => example/NamedApplyBlockCaseClassConstruction.Msg#copy().(head)
  tail => example/NamedApplyBlockCaseClassConstruction.Msg#copy().(tail)
  Msg => example/NamedApplyBlockCaseClassConstruction.Msg#
example/NamedApplyBlockCaseClassConstruction.Msg#copy().(body) => default param body: String
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg#copy().(head) => default param head: String
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg#copy().(tail) => default param tail: String
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg#equals(). => method equals(x$1: Any): Boolean <: scala/Equals#equals()., java/lang/Object#equals()., scala/Any#equals().
  x$1 => example/NamedApplyBlockCaseClassConstruction.Msg#equals().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
example/NamedApplyBlockCaseClassConstruction.Msg#equals().(x$1) => param x$1: Any
  Any => scala/Any#
example/NamedApplyBlockCaseClassConstruction.Msg#hashCode(). => method hashCode(): Int <: java/lang/Object#hashCode()., scala/Any#hashCode().
  Int => scala/Int#
example/NamedApplyBlockCaseClassConstruction.Msg#head. => val method head: String
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg#productArity(). => method productArity: Int <: scala/Product#productArity().
  Int => scala/Int#
example/NamedApplyBlockCaseClassConstruction.Msg#productElement(). => method productElement(x$1: Int): Any <: scala/Product#productElement().
  x$1 => example/NamedApplyBlockCaseClassConstruction.Msg#productElement().(x$1)
  Int => scala/Int#
  Any => scala/Any#
example/NamedApplyBlockCaseClassConstruction.Msg#productElement().(x$1) => param x$1: Int
  Int => scala/Int#
example/NamedApplyBlockCaseClassConstruction.Msg#productElementName(). => method productElementName(x$1: Int): String <: scala/Product#productElementName().
  x$1 => example/NamedApplyBlockCaseClassConstruction.Msg#productElementName().(x$1)
  Int => scala/Int#
  String => java/lang/String#
example/NamedApplyBlockCaseClassConstruction.Msg#productElementName().(x$1) => param x$1: Int
  Int => scala/Int#
example/NamedApplyBlockCaseClassConstruction.Msg#productIterator(). => method productIterator: Iterator[Any] <: scala/Product#productIterator().
  Iterator => scala/collection/Iterator#
  Any => scala/Any#
example/NamedApplyBlockCaseClassConstruction.Msg#productPrefix(). => method productPrefix: String <: scala/Product#productPrefix().
  String => java/lang/String#
example/NamedApplyBlockCaseClassConstruction.Msg#tail. => val method tail: String
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg#toString(). => method toString(): String <: java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
example/NamedApplyBlockCaseClassConstruction.Msg. => final object Msg extends AbstractFunction3[String, String, String, Msg] with Serializable { +6 decls }
  AbstractFunction3 => scala/runtime/AbstractFunction3#
  String => scala/Predef.String#
  Msg => example/NamedApplyBlockCaseClassConstruction.Msg#
  Serializable => java/io/Serializable#
example/NamedApplyBlockCaseClassConstruction.Msg.`<init>$default$2`(). => method <init>$default$2: String @uncheckedVariance
  String => scala/Predef.String#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/NamedApplyBlockCaseClassConstruction.Msg.apply$default$2(). => method apply$default$2: String @uncheckedVariance
  String => scala/Predef.String#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/NamedApplyBlockCaseClassConstruction.Msg.apply(). => method apply(body: String, head: String, tail: String): Msg <: scala/Function3#apply().
  body => example/NamedApplyBlockCaseClassConstruction.Msg.apply().(body)
  String => scala/Predef.String#
  head => example/NamedApplyBlockCaseClassConstruction.Msg.apply().(head)
  tail => example/NamedApplyBlockCaseClassConstruction.Msg.apply().(tail)
  Msg => example/NamedApplyBlockCaseClassConstruction.Msg#
example/NamedApplyBlockCaseClassConstruction.Msg.apply().(body) => param body: String
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg.apply().(head) => default param head: String
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg.apply().(tail) => param tail: String
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg.toString(). => final method toString(): String <: scala/Function3#toString()., java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
example/NamedApplyBlockCaseClassConstruction.Msg.unapply(). => method unapply(x$0: Msg): Option[Tuple3[String, String, String]]
  x$0 => example/NamedApplyBlockCaseClassConstruction.Msg.unapply().(x$0)
  Msg => example/NamedApplyBlockCaseClassConstruction.Msg#
  Option => scala/Option#
  Tuple3 => scala/Tuple3#
  String => scala/Predef.String#
example/NamedApplyBlockCaseClassConstruction.Msg.unapply().(x$0) => param x$0: Msg
  Msg => example/NamedApplyBlockCaseClassConstruction.Msg#
example/NamedApplyBlockCaseClassConstruction.Msg.writeReplace(). => private method writeReplace(): Object
  Object => java/lang/Object#
example/NamedApplyBlockCaseClassConstruction.bodyText. => val method bodyText: String
  String => java/lang/String#
example/NamedApplyBlockCaseClassConstruction.msg. => val method msg: Msg
  Msg => example/NamedApplyBlockCaseClassConstruction.Msg#
example/NamedApplyBlockMethods. => final object NamedApplyBlockMethods extends AnyRef { +7 decls }
  AnyRef => scala/AnyRef#
example/NamedApplyBlockMethods.baseCase(). => method baseCase: Int
  Int => scala/Int#
example/NamedApplyBlockMethods.foo$default$1(). => method foo$default$1: Int @uncheckedVariance
  Int => scala/Int#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/NamedApplyBlockMethods.foo$default$2(). => method foo$default$2: Int @uncheckedVariance
  Int => scala/Int#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/NamedApplyBlockMethods.foo$default$3(). => method foo$default$3: Int @uncheckedVariance
  Int => scala/Int#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/NamedApplyBlockMethods.foo(). => method foo(a: Int, b: Int, c: Int): Int
  a => example/NamedApplyBlockMethods.foo().(a)
  Int => scala/Int#
  b => example/NamedApplyBlockMethods.foo().(b)
  c => example/NamedApplyBlockMethods.foo().(c)
example/NamedApplyBlockMethods.foo().(a) => default param a: Int
  Int => scala/Int#
example/NamedApplyBlockMethods.foo().(b) => default param b: Int
  Int => scala/Int#
example/NamedApplyBlockMethods.foo().(c) => default param c: Int
  Int => scala/Int#
example/NamedApplyBlockMethods.local. => val method local: Int
  Int => scala/Int#
example/NamedApplyBlockMethods.recursive(). => method recursive: Int
  Int => scala/Int#
local0 => val local x$1: Int
  Int => scala/Int#
local1 => val local x$2: 3
local2 => val local x$3: Int
  Int => scala/Int#
local3 => val local x$1: Int
  Int => scala/Int#
local4 => val local x$2: 3
local5 => val local x$3: Int
  Int => scala/Int#
local6 => val local x$4: Int
  Int => scala/Int#
local7 => val local x$5: Int
  Int => scala/Int#
local8 => val local x$6: Int
  Int => scala/Int#
local9 => val local Msg$1: Msg
  Msg => example/NamedApplyBlockCaseClassConstruction.Msg#
local10 => val local x$1: String
  String => java/lang/String#
local11 => val local x$2: "tail"
local12 => val local x$3: String
  String => scala/Predef.String#

Occurrences:
[0:8..0:15): example <= example/
[2:7..2:29): NamedApplyBlockMethods <= example/NamedApplyBlockMethods.
[3:6..3:11): local <= example/NamedApplyBlockMethods.local.
[4:6..4:9): foo <= example/NamedApplyBlockMethods.foo().
[4:10..4:11): a <= example/NamedApplyBlockMethods.foo().(a)
[4:13..4:16): Int => scala/Int#
[4:22..4:23): b <= example/NamedApplyBlockMethods.foo().(b)
[4:25..4:28): Int => scala/Int#
[4:34..4:35): c <= example/NamedApplyBlockMethods.foo().(c)
[4:37..4:40): Int => scala/Int#
[4:47..4:50): Int => scala/Int#
[4:53..4:54): a => example/NamedApplyBlockMethods.foo().(a)
[4:55..4:56): + => scala/Int#`+`(+4).
[4:57..4:58): b => example/NamedApplyBlockMethods.foo().(b)
[4:59..4:60): + => scala/Int#`+`(+4).
[4:61..4:62): c => example/NamedApplyBlockMethods.foo().(c)
[5:6..5:14): baseCase <= example/NamedApplyBlockMethods.baseCase().
[5:17..5:20): foo => example/NamedApplyBlockMethods.foo().
[5:21..5:26): local => example/NamedApplyBlockMethods.local.
[5:28..5:29): c => example/NamedApplyBlockMethods.foo().(c)
[6:6..6:15): recursive <= example/NamedApplyBlockMethods.recursive().
[6:18..6:21): foo => example/NamedApplyBlockMethods.foo().
[6:22..6:27): local => example/NamedApplyBlockMethods.local.
[6:29..6:30): c => example/NamedApplyBlockMethods.foo().(c)
[6:33..6:36): foo => example/NamedApplyBlockMethods.foo().
[6:37..6:42): local => example/NamedApplyBlockMethods.local.
[6:44..6:45): c => example/NamedApplyBlockMethods.foo().(c)
[9:7..9:43): NamedApplyBlockCaseClassConstruction <= example/NamedApplyBlockCaseClassConstruction.
[10:13..10:16): Msg <= example/NamedApplyBlockCaseClassConstruction.Msg#
[10:16..10:16):  <= example/NamedApplyBlockCaseClassConstruction.Msg#`<init>`().
[10:17..10:21): body <= example/NamedApplyBlockCaseClassConstruction.Msg#body.
[10:23..10:29): String => scala/Predef.String#
[10:31..10:35): head <= example/NamedApplyBlockCaseClassConstruction.Msg#head.
[10:37..10:43): String => scala/Predef.String#
[10:57..10:61): tail <= example/NamedApplyBlockCaseClassConstruction.Msg#tail.
[10:63..10:69): String => scala/Predef.String#
[11:6..11:14): bodyText <= example/NamedApplyBlockCaseClassConstruction.bodyText.
[12:6..12:9): msg <= example/NamedApplyBlockCaseClassConstruction.msg.
[12:12..12:15): Msg => example/NamedApplyBlockCaseClassConstruction.Msg.
[12:16..12:24): bodyText => example/NamedApplyBlockCaseClassConstruction.bodyText.
[12:26..12:30): tail => example/NamedApplyBlockCaseClassConstruction.Msg.apply().(tail)

Synthetics:
[12:12..12:15): Msg => *.apply
  apply => example/NamedApplyBlockCaseClassConstruction.Msg.apply().

semanticdb/integration/src/main/scala/example/NamedArguments.scala
------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/NamedArguments.scala
Text => non-empty
Language => Scala
Symbols => 29 entries
Occurrences => 12 entries
Synthetics => 1 entries

Symbols:
example/NamedArguments# => class NamedArguments extends AnyRef { +3 decls }
  AnyRef => scala/AnyRef#
example/NamedArguments#User# => case class User extends AnyRef with Product with Serializable { +13 decls }
  AnyRef => scala/AnyRef#
  Product => scala/Product#
  Serializable => scala/package.Serializable#
example/NamedArguments#User#`<init>`(). => primary ctor <init>(val name: String)
  name => example/NamedArguments#User#`<init>`().(name)
  String => scala/Predef.String#
example/NamedArguments#User#`<init>`().(name) => val param name: String
  String => scala/Predef.String#
example/NamedArguments#User#canEqual(). => method canEqual(x$1: Any): Boolean <: scala/Equals#canEqual().
  x$1 => example/NamedArguments#User#canEqual().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
example/NamedArguments#User#canEqual().(x$1) => param x$1: Any
  Any => scala/Any#
example/NamedArguments#User#copy$default$1(). => method copy$default$1: String @uncheckedVariance
  String => scala/Predef.String#
  uncheckedVariance => scala/annotation/unchecked/uncheckedVariance#
example/NamedArguments#User#copy(). => method copy(name: String): User
  name => example/NamedArguments#User#copy().(name)
  String => scala/Predef.String#
  User => example/NamedArguments#User#
example/NamedArguments#User#copy().(name) => default param name: String
  String => scala/Predef.String#
example/NamedArguments#User#equals(). => method equals(x$1: Any): Boolean <: scala/Equals#equals()., java/lang/Object#equals()., scala/Any#equals().
  x$1 => example/NamedArguments#User#equals().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
example/NamedArguments#User#equals().(x$1) => param x$1: Any
  Any => scala/Any#
example/NamedArguments#User#hashCode(). => method hashCode(): Int <: java/lang/Object#hashCode()., scala/Any#hashCode().
  Int => scala/Int#
example/NamedArguments#User#name. => val method name: String
  String => scala/Predef.String#
example/NamedArguments#User#productArity(). => method productArity: Int <: scala/Product#productArity().
  Int => scala/Int#
example/NamedArguments#User#productElement(). => method productElement(x$1: Int): Any <: scala/Product#productElement().
  x$1 => example/NamedArguments#User#productElement().(x$1)
  Int => scala/Int#
  Any => scala/Any#
example/NamedArguments#User#productElement().(x$1) => param x$1: Int
  Int => scala/Int#
example/NamedArguments#User#productElementName(). => method productElementName(x$1: Int): String <: scala/Product#productElementName().
  x$1 => example/NamedArguments#User#productElementName().(x$1)
  Int => scala/Int#
  String => java/lang/String#
example/NamedArguments#User#productElementName().(x$1) => param x$1: Int
  Int => scala/Int#
example/NamedArguments#User#productIterator(). => method productIterator: Iterator[Any] <: scala/Product#productIterator().
  Iterator => scala/collection/Iterator#
  Any => scala/Any#
example/NamedArguments#User#productPrefix(). => method productPrefix: String <: scala/Product#productPrefix().
  String => java/lang/String#
example/NamedArguments#User#toString(). => method toString(): String <: java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
example/NamedArguments#User. => final object User extends AbstractFunction1[String, User] with Serializable { +3 decls }
  AbstractFunction1 => scala/runtime/AbstractFunction1#
  String => scala/Predef.String#
  User => example/NamedArguments#User#
  Serializable => java/io/Serializable#
example/NamedArguments#User.apply(). => method apply(name: String): User <: scala/Function1#apply().
  name => example/NamedArguments#User.apply().(name)
  String => scala/Predef.String#
  User => example/NamedArguments#User#
example/NamedArguments#User.apply().(name) => param name: String
  String => scala/Predef.String#
example/NamedArguments#User.toString(). => final method toString(): String <: scala/Function1#toString()., java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
example/NamedArguments#User.unapply(). => method unapply(x$0: User): Option[String]
  x$0 => example/NamedArguments#User.unapply().(x$0)
  User => example/NamedArguments#User#
  Option => scala/Option#
  String => scala/Predef.String#
example/NamedArguments#User.unapply().(x$0) => param x$0: User
  User => example/NamedArguments#User#
example/NamedArguments#`<init>`(). => primary ctor <init>()
local0 => val local User$1: User
  User => example/NamedArguments#User#

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:20): NamedArguments <= example/NamedArguments#
[2:21..2:21):  <= example/NamedArguments#`<init>`().
[3:13..3:17): User <= example/NamedArguments#User#
[3:17..3:17):  <= example/NamedArguments#User#`<init>`().
[3:18..3:22): name <= example/NamedArguments#User#name.
[3:24..3:30): String => scala/Predef.String#
[4:2..4:6): User => example/NamedArguments#User.
[4:7..4:11): name => example/NamedArguments#User.apply().(name)
[5:2..5:6): User => example/NamedArguments#User.
[5:7..5:12): apply => example/NamedArguments#User.apply().
[5:13..5:17): name => example/NamedArguments#User.apply().(name)

Synthetics:
[4:2..4:6): User => *.apply
  apply => example/NamedArguments#User.apply().

semanticdb/integration/src/main/scala/example/Objects.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Objects.scala
Text => non-empty
Language => Scala
Symbols => 2 entries
Occurrences => 3 entries

Symbols:
objects/X. => final object X extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
objects/X.Y. => final object Y extends AnyRef
  AnyRef => scala/AnyRef#

Occurrences:
[0:8..0:15): objects <= objects/
[2:7..2:8): X <= objects/X.
[3:9..3:10): Y <= objects/X.Y.

semanticdb/integration/src/main/scala/example/Overrides.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Overrides.scala
Text => non-empty
Language => Scala
Symbols => 5 entries
Occurrences => 10 entries

Symbols:
example/A# => trait A extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/A#foo(). => abstract method foo: Int
  Int => scala/Int#
example/B# => class B extends AnyRef with A { +2 decls }
  AnyRef => scala/AnyRef#
  A => example/A#
example/B#`<init>`(). => primary ctor <init>()
example/B#foo(). => method foo: Int <: example/A#foo().
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:7): A <= example/A#
[2:14..2:17): foo <= example/A#foo().
[2:19..2:22): Int => scala/Int#
[3:6..3:7): B <= example/B#
[3:7..3:7):  <= example/B#`<init>`().
[3:18..3:19): A => example/A#
[3:20..3:20):  => java/lang/Object#`<init>`().
[3:26..3:29): foo <= example/B#foo().
[3:31..3:34): Int => scala/Int#

semanticdb/integration/src/main/scala/example/Prefixes.scala
------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Prefixes.scala
Text => non-empty
Language => Scala
Symbols => 19 entries
Occurrences => 50 entries

Symbols:
prefixes/C# => class C extends AnyRef { +5 decls }
  AnyRef => scala/AnyRef#
prefixes/C#N. => final object N extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
prefixes/C#N.U# => abstract type U
prefixes/C#T# => abstract type T
prefixes/C#`<init>`(). => primary ctor <init>()
prefixes/C#k1(). => method k1: U
  U => prefixes/C#N.U#
prefixes/C#m1(). => method m1: T
  T => prefixes/C#T#
prefixes/M. => final object M extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
prefixes/M.T# => abstract type T
prefixes/M.n1(). => method n1: T
  T => prefixes/M.T#
prefixes/O. => final object O extends C { +1 decls }
  C => prefixes/C#
prefixes/O.o1(). => method o1: O.this.T
  O => prefixes/O.
  T => prefixes/C#T#
prefixes/Test. => final object Test extends AnyRef { +6 decls }
  AnyRef => scala/AnyRef#
prefixes/Test.c. => val method c: C
  C => prefixes/C#
prefixes/Test.k2(). => method k2: c.N.U
  c => prefixes/Test.c.
  N => prefixes/C#N.
  U => prefixes/C#N.U#
prefixes/Test.k3(). => method k3: c.N.U
  c => prefixes/Test.c.
  N => prefixes/C#N.
  U => prefixes/C#N.U#
prefixes/Test.m2(). => method m2: c.T
  c => prefixes/Test.c.
  T => prefixes/C#T#
prefixes/Test.n2(). => method n2: T
  T => prefixes/M.T#
prefixes/Test.n3(). => method n3: T
  T => prefixes/M.T#

Occurrences:
[0:8..0:16): prefixes <= prefixes/
[2:6..2:7): C <= prefixes/C#
[2:8..2:8):  <= prefixes/C#`<init>`().
[3:7..3:8): T <= prefixes/C#T#
[4:6..4:8): m1 <= prefixes/C#m1().
[4:10..4:11): T => prefixes/C#T#
[4:14..4:17): ??? => scala/Predef.`???`().
[6:9..6:10): N <= prefixes/C#N.
[7:9..7:10): U <= prefixes/C#N.U#
[9:6..9:8): k1 <= prefixes/C#k1().
[9:10..9:11): N => prefixes/C#N.
[9:12..9:13): U => prefixes/C#N.U#
[9:16..9:19): ??? => scala/Predef.`???`().
[12:7..12:8): M <= prefixes/M.
[13:7..13:8): T <= prefixes/M.T#
[14:6..14:8): n1 <= prefixes/M.n1().
[14:10..14:11): T => prefixes/M.T#
[14:14..14:17): ??? => scala/Predef.`???`().
[17:7..17:8): O <= prefixes/O.
[17:17..17:18): C => prefixes/C#
[17:19..17:19):  => prefixes/C#`<init>`().
[18:6..18:8): o1 <= prefixes/O.o1().
[18:10..18:11): T => prefixes/C#T#
[18:14..18:17): ??? => scala/Predef.`???`().
[21:7..21:11): Test <= prefixes/Test.
[22:6..22:7): c <= prefixes/Test.c.
[22:9..22:10): C => prefixes/C#
[22:13..22:16): ??? => scala/Predef.`???`().
[23:6..23:8): m2 <= prefixes/Test.m2().
[23:10..23:11): c => prefixes/Test.c.
[23:12..23:13): T => prefixes/C#T#
[23:16..23:19): ??? => scala/Predef.`???`().
[24:6..24:8): k2 <= prefixes/Test.k2().
[24:10..24:11): c => prefixes/Test.c.
[24:12..24:13): N => prefixes/C#N.
[24:14..24:15): U => prefixes/C#N.U#
[24:18..24:21): ??? => scala/Predef.`???`().
[25:9..25:10): c => prefixes/Test.c.
[25:11..25:12): N => prefixes/C#N.
[26:6..26:8): k3 <= prefixes/Test.k3().
[26:10..26:11): U => prefixes/C#N.U#
[26:14..26:17): ??? => scala/Predef.`???`().
[28:6..28:8): n2 <= prefixes/Test.n2().
[28:10..28:11): M => prefixes/M.
[28:12..28:13): T => prefixes/M.T#
[28:16..28:19): ??? => scala/Predef.`???`().
[30:9..30:10): M => prefixes/M.
[31:6..31:8): n3 <= prefixes/Test.n3().
[31:10..31:11): T => prefixes/M.T#
[31:14..31:17): ??? => scala/Predef.`???`().

semanticdb/integration/src/main/scala/example/Selfs.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Selfs.scala
Text => non-empty
Language => Scala
Symbols => 19 entries
Occurrences => 38 entries

Symbols:
local0 => selfparam self
local1 => selfparam self: B
  B => selfs/B#
local2 => selfparam self: B with Int {}
  B => selfs/B#
  Int => scala/Int#
selfs/B# => class B extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
selfs/B#`<init>`(). => primary ctor <init>()
selfs/C1# => class C1 extends B { +1 decls }
  B => selfs/B#
selfs/C1#`<init>`(). => primary ctor <init>()
selfs/C2# => class C2 extends B { self: B => +1 decls }
  B => selfs/B#
selfs/C2#`<init>`(). => primary ctor <init>()
selfs/C3# => class C3 extends B { self: B with Int {} => +1 decls }
  B => selfs/B#
  Int => scala/Int#
selfs/C3#`<init>`(). => primary ctor <init>()
selfs/C4# => class C4 extends B { +1 decls }
  B => selfs/B#
selfs/C4#`<init>`(). => primary ctor <init>()
selfs/C5# => class C5 extends B { self: B => +1 decls }
  B => selfs/B#
selfs/C5#`<init>`(). => primary ctor <init>()
selfs/C6# => class C6 extends B { self: B => +1 decls }
  B => selfs/B#
selfs/C6#`<init>`(). => primary ctor <init>()
selfs/C7# => abstract class C7 extends AnyRef { self: B => +1 decls }
  AnyRef => scala/AnyRef#
  B => selfs/B#
selfs/C7#`<init>`(). => primary ctor <init>()

Occurrences:
[0:8..0:13): selfs <= selfs/
[2:6..2:7): B <= selfs/B#
[2:7..2:7):  <= selfs/B#`<init>`().
[4:6..4:8): C1 <= selfs/C1#
[4:9..4:9):  <= selfs/C1#`<init>`().
[4:17..4:18): B => selfs/B#
[4:19..4:19):  => selfs/B#`<init>`().
[4:21..4:25): self <= local0
[6:6..6:8): C2 <= selfs/C2#
[6:9..6:9):  <= selfs/C2#`<init>`().
[6:17..6:18): B => selfs/B#
[6:19..6:19):  => selfs/B#`<init>`().
[6:21..6:25): self <= local1
[6:27..6:28): B => selfs/B#
[8:6..8:8): C3 <= selfs/C3#
[8:9..8:9):  <= selfs/C3#`<init>`().
[8:17..8:18): B => selfs/B#
[8:19..8:19):  => selfs/B#`<init>`().
[8:21..8:25): self <= local2
[8:27..8:28): B => selfs/B#
[8:34..8:37): Int => scala/Int#
[10:6..10:8): C4 <= selfs/C4#
[10:9..10:9):  <= selfs/C4#`<init>`().
[10:17..10:18): B => selfs/B#
[10:19..10:19):  => selfs/B#`<init>`().
[12:6..12:8): C5 <= selfs/C5#
[12:9..12:9):  <= selfs/C5#`<init>`().
[12:17..12:18): B => selfs/B#
[12:19..12:19):  => selfs/B#`<init>`().
[12:24..12:25): B => selfs/B#
[14:6..14:8): C6 <= selfs/C6#
[14:9..14:9):  <= selfs/C6#`<init>`().
[14:17..14:18): B => selfs/B#
[14:19..14:19):  => selfs/B#`<init>`().
[14:27..14:28): B => selfs/B#
[16:15..16:17): C7 <= selfs/C7#
[16:18..16:18):  <= selfs/C7#`<init>`().
[16:23..16:24): B => selfs/B#

semanticdb/integration/src/main/scala/example/StructuralTypes.scala
-------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/StructuralTypes.scala
Text => non-empty
Language => Scala
Symbols => 4 entries
Occurrences => 11 entries
Diagnostics => 2 entries

Symbols:
example/StructuralTypes. => final object StructuralTypes extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/StructuralTypes.a. => val method a: AnyRef { val def b: Int }
  AnyRef => scala/AnyRef#
  b => local1
  Int => scala/Int#
local0 => final class $anon extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
local1 => val method b: Int
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:7..2:12): scala => scala/
[2:13..2:28): languageFeature => scala/languageFeature.
[2:29..2:44): reflectiveCalls => scala/languageFeature.reflectiveCalls#
[2:29..2:44): reflectiveCalls => scala/languageFeature.reflectiveCalls.
[4:7..4:22): StructuralTypes <= example/StructuralTypes.
[5:6..5:7): a <= example/StructuralTypes.a.
[5:14..5:14):  <= local0
[6:8..6:9): b <= local1
[8:2..8:3): a => example/StructuralTypes.a.
[8:4..8:5): b => local1

Diagnostics:
[2:29..2:44) [warning] Unused import
[8:2..8:5) [warning] reflective access of structural type member value b should be enabled
by making the implicit value scala.language.reflectiveCalls visible.
This can be achieved by adding the import clause 'import scala.language.reflectiveCalls'
or by setting the compiler option -language:reflectiveCalls.
See the Scaladoc for value scala.language.reflectiveCalls for a discussion
why the feature should be explicitly enabled.
semanticdb/integration/src/main/scala/example/StructuralTypes.scala
-------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/StructuralTypes.scala
Text => empty
Language => Scala
Diagnostics => 1 entries

Diagnostics:
[8:2..8:5) [warning] a pure expression does nothing in statement position; multiline expressions may require enclosing parentheses

semanticdb/integration/src/main/scala/example/StructuralTypes2.scala
--------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/StructuralTypes2.scala
Text => non-empty
Language => Scala
Symbols => 1 entries
Occurrences => 8 entries
Diagnostics => 2 entries

Symbols:
example/StructuralTypes2. => final object StructuralTypes2 extends AnyRef
  AnyRef => scala/AnyRef#

Occurrences:
[0:8..0:15): example <= example/
[2:7..2:12): scala => scala/
[2:13..2:28): languageFeature => scala/languageFeature.
[2:29..2:44): reflectiveCalls => scala/languageFeature.reflectiveCalls#
[2:29..2:44): reflectiveCalls => scala/languageFeature.reflectiveCalls.
[4:7..4:23): StructuralTypes2 <= example/StructuralTypes2.
[5:2..5:17): StructuralTypes => example/StructuralTypes.
[5:18..5:19): a => example/StructuralTypes.a.

Diagnostics:
[2:29..2:44) [warning] Unused import
[5:2..5:21) [warning] reflective access of structural type member value b should be enabled
by making the implicit value scala.language.reflectiveCalls visible.
semanticdb/integration/src/main/scala/example/StructuralTypes2.scala
--------------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/StructuralTypes2.scala
Text => empty
Language => Scala
Diagnostics => 1 entries

Diagnostics:
[5:2..5:21) [warning] a pure expression does nothing in statement position

semanticdb/integration/src/main/scala/example/Synthetic.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Synthetic.scala
Text => non-empty
Language => Scala
Symbols => 54 entries
Occurrences => 113 entries
Synthetics => 42 entries

Symbols:
example/Synthetic# => class Synthetic extends AnyRef { +12 decls }
  AnyRef => scala/AnyRef#
example/Synthetic#F# => class F extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/Synthetic#F#`<init>`(). => primary ctor <init>()
example/Synthetic#J# => class J[T] extends AnyRef { +3 decls }
  T => example/Synthetic#J#[T]
  AnyRef => scala/AnyRef#
example/Synthetic#J#[T] => typeparam T
example/Synthetic#J#`<init>`(). => primary ctor <init>()(implicit evidence$1: Manifest[T])
  evidence$1 => example/Synthetic#J#`<init>`().(evidence$1)
  Manifest => scala/Predef.Manifest#
  T => example/Synthetic#J#[T]
example/Synthetic#J#`<init>`().(evidence$1) => implicit param evidence$1: Manifest[T]
  Manifest => scala/Predef.Manifest#
  T => example/Synthetic#J#[T]
example/Synthetic#J#arr. => val method arr: Array[T]
  Array => scala/Array#
  T => example/Synthetic#J#[T]
example/Synthetic#J#evidence$1. => private[this] implicit val method evidence$1: Manifest[T]
  Manifest => scala/Predef.Manifest#
  T => example/Synthetic#J#[T]
example/Synthetic#Name. => val method Name: Regex
  Regex => scala/util/matching/Regex#
example/Synthetic#`<init>`(). => primary ctor <init>()
example/Synthetic#f. => val method f: Ordered[F]
  Ordered => scala/package.Ordered#
  F => example/Synthetic#F#
example/Synthetic#lst. => val method lst: Stream[Int]
  Stream => scala/collection/immutable/Stream#
  Int => scala/Int#
example/Synthetic#name. => val method name: String
  String => scala/Predef.String#
example/Synthetic#ordering. => implicit val method ordering: Ordering[F]
  Ordering => scala/package.Ordering#
  F => example/Synthetic#F#
example/Synthetic#s. => final object s extends AnyRef { +3 decls }
  AnyRef => scala/AnyRef#
example/Synthetic#s.Bar# => case class Bar extends AnyRef with Product with Serializable { +11 decls }
  AnyRef => scala/AnyRef#
  Product => scala/Product#
  Serializable => scala/package.Serializable#
example/Synthetic#s.Bar#`<init>`(). => primary ctor <init>()
example/Synthetic#s.Bar#canEqual(). => method canEqual(x$1: Any): Boolean <: scala/Equals#canEqual().
  x$1 => example/Synthetic#s.Bar#canEqual().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
example/Synthetic#s.Bar#canEqual().(x$1) => param x$1: Any
  Any => scala/Any#
example/Synthetic#s.Bar#copy(). => method copy(): Bar
  Bar => example/Synthetic#s.Bar#
example/Synthetic#s.Bar#equals(). => method equals(x$1: Any): Boolean <: scala/Equals#equals()., java/lang/Object#equals()., scala/Any#equals().
  x$1 => example/Synthetic#s.Bar#equals().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
example/Synthetic#s.Bar#equals().(x$1) => param x$1: Any
  Any => scala/Any#
example/Synthetic#s.Bar#hashCode(). => method hashCode(): Int <: java/lang/Object#hashCode()., scala/Any#hashCode().
  Int => scala/Int#
example/Synthetic#s.Bar#productArity(). => method productArity: Int <: scala/Product#productArity().
  Int => scala/Int#
example/Synthetic#s.Bar#productElement(). => method productElement(x$1: Int): Any <: scala/Product#productElement().
  x$1 => example/Synthetic#s.Bar#productElement().(x$1)
  Int => scala/Int#
  Any => scala/Any#
example/Synthetic#s.Bar#productElement().(x$1) => param x$1: Int
  Int => scala/Int#
example/Synthetic#s.Bar#productElementName(). => method productElementName(x$1: Int): String <: scala/Product#productElementName().
  x$1 => example/Synthetic#s.Bar#productElementName().(x$1)
  Int => scala/Int#
  String => java/lang/String#
example/Synthetic#s.Bar#productElementName().(x$1) => param x$1: Int
  Int => scala/Int#
example/Synthetic#s.Bar#productIterator(). => method productIterator: Iterator[Any] <: scala/Product#productIterator().
  Iterator => scala/collection/Iterator#
  Any => scala/Any#
example/Synthetic#s.Bar#productPrefix(). => method productPrefix: String <: scala/Product#productPrefix().
  String => java/lang/String#
example/Synthetic#s.Bar#toString(). => method toString(): String <: java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
example/Synthetic#s.Bar. => final object Bar extends AbstractFunction0[Bar] with Serializable { +3 decls }
  AbstractFunction0 => scala/runtime/AbstractFunction0#
  Bar => example/Synthetic#s.Bar#
  Serializable => java/io/Serializable#
example/Synthetic#s.Bar.apply(). => method apply(): Bar <: scala/Function0#apply().
  Bar => example/Synthetic#s.Bar#
example/Synthetic#s.Bar.toString(). => final method toString(): String <: scala/Function0#toString()., java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
example/Synthetic#s.Bar.unapply(). => method unapply(x$0: Bar): Boolean
  x$0 => example/Synthetic#s.Bar.unapply().(x$0)
  Bar => example/Synthetic#s.Bar#
  Boolean => scala/Boolean#
example/Synthetic#s.Bar.unapply().(x$0) => param x$0: Bar
  Bar => example/Synthetic#s.Bar#
example/Synthetic#s.apply(). => method apply(): Int
  Int => scala/Int#
example/Synthetic#x$2. => val method x$2: Tuple2[Int, Stream[Int]]
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
  Stream => scala/package.Stream#
example/Synthetic#x. => val method x: Int
  Int => scala/Int#
example/Synthetic#xs. => val method xs: Stream[Int]
  Stream => scala/package.Stream#
  Int => scala/Int#
local0 => val local x: Int
  Int => scala/Int#
local1 => val local xs: Stream[Int]
  Stream => scala/package.Stream#
  Int => scala/Int#
local2 => val local name: String
  String => scala/Predef.String#
local3 => param x: Int
  Int => scala/Int#
local4 => param y: Int
  Int => scala/Int#
local5 => param i: Int
  Int => scala/Int#
local6 => param j: Int
  Int => scala/Int#
local7 => param i: Int
  Int => scala/Int#
local8 => param j: Int
  Int => scala/Int#
local9 => param a: Int
  Int => scala/Int#
local10 => param b: Int
  Int => scala/Int#
local11 => param a: Int
  Int => scala/Int#
local12 => param b: Int
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:15): Synthetic <= example/Synthetic#
[2:16..2:16):  <= example/Synthetic#`<init>`().
[3:2..3:6): List => scala/package.List.
[3:10..3:13): map => scala/collection/immutable/List#map().
[3:16..3:17): + => scala/Int#`+`(+4).
[4:2..4:7): Array => scala/Array.
[4:8..4:13): empty => scala/Array.empty().
[4:14..4:17): Int => scala/Int#
[4:19..4:29): headOption => scala/collection/ArrayOps#headOption().
[5:9..5:20): stripPrefix => scala/collection/StringOps#stripPrefix().
[8:6..8:10): Name <= example/Synthetic#Name.
[8:25..8:26): r => scala/collection/StringOps#r().
[9:6..9:7): x <= example/Synthetic#x.
[9:8..9:11): #:: => scala/package.`#::`.
[9:12..9:14): xs <= example/Synthetic#xs.
[9:17..9:23): Stream => scala/package.Stream.
[10:6..10:10): Name => example/Synthetic#Name.
[10:11..10:15): name <= example/Synthetic#name.
[11:4..11:7): #:: => scala/collection/immutable/Stream.Deferrer#`#::`().
[11:10..11:13): #:: => scala/collection/immutable/Stream.Deferrer#`#::`().
[11:14..11:20): Stream => scala/package.Stream.
[11:21..11:26): empty => scala/collection/immutable/Stream.empty().
[13:6..13:9): lst <= example/Synthetic#lst.
[13:14..13:17): #:: => scala/collection/immutable/Stream.Deferrer#`#::`().
[13:20..13:23): #:: => scala/collection/immutable/Stream.Deferrer#`#::`().
[13:24..13:30): Stream => scala/package.Stream.
[13:31..13:36): empty => scala/collection/immutable/Stream.empty().
[14:2..14:5): lst => example/Synthetic#lst.
[14:6..14:7): + => scala/Predef.any2stringadd#`+`().
[16:7..16:8): x <= local3
[16:14..16:16): to => scala/runtime/RichInt#to().
[16:21..16:22): y <= local4
[16:28..16:33): until => scala/runtime/RichInt#until().
[16:38..16:45): println => scala/Predef.println(+1).
[16:46..16:47): x => local3
[16:48..16:50): -> => scala/Predef.ArrowAssoc#`->`().
[16:51..16:52): x => local3
[17:7..17:8): i <= local5
[17:14..17:16): to => scala/runtime/RichInt#to().
[17:21..17:22): j <= local6
[17:28..17:33): until => scala/runtime/RichInt#until().
[17:45..17:46): i => local5
[17:48..17:49): j => local6
[18:7..18:8): i <= local7
[18:14..18:16): to => scala/runtime/RichInt#to().
[18:21..18:22): j <= local8
[18:28..18:33): until => scala/runtime/RichInt#until().
[18:40..18:41): i => local7
[18:42..18:43): % => scala/Int#`%`(+3).
[18:46..18:48): == => scala/Int#`==`(+3).
[18:59..18:60): i => local7
[18:62..18:63): j => local8
[20:9..20:10): s <= example/Synthetic#s.
[21:8..21:13): apply <= example/Synthetic#s.apply().
[22:4..22:5): s => example/Synthetic#s.
[23:4..23:5): s => example/Synthetic#s.
[23:6..23:11): apply => example/Synthetic#s.apply().
[24:15..24:18): Bar <= example/Synthetic#s.Bar#
[24:18..24:18):  <= example/Synthetic#s.Bar#`<init>`().
[25:4..25:7): Bar => example/Synthetic#s.Bar.
[26:9..26:21): asInstanceOf => scala/Any#asInstanceOf().
[26:22..26:25): Int => scala/Int#
[26:29..26:32): Int => scala/Int#
[29:8..29:9): J <= example/Synthetic#J#
[29:10..29:11): T <= example/Synthetic#J#[T]
[29:13..29:21): Manifest => scala/AnyRef#
[29:29..29:32): arr <= example/Synthetic#J#arr.
[29:35..29:40): Array => scala/Array.
[29:41..29:46): empty => scala/Array.empty().
[29:47..29:48): T => example/Synthetic#J#[T]
[31:8..31:9): F <= example/Synthetic#F#
[31:9..31:9):  <= example/Synthetic#F#`<init>`().
[32:15..32:23): ordering <= example/Synthetic#ordering.
[32:25..32:33): Ordering => scala/package.Ordering#
[32:34..32:35): F => example/Synthetic#F#
[32:39..32:42): ??? => scala/Predef.`???`().
[33:6..33:7): f <= example/Synthetic#f.
[33:9..33:16): Ordered => scala/package.Ordered#
[33:17..33:18): F => example/Synthetic#F#
[33:26..33:27): F => example/Synthetic#F#
[33:27..33:27):  => example/Synthetic#F#`<init>`().
[35:9..35:14): scala => scala/
[35:15..35:25): concurrent => scala/concurrent/
[35:26..35:42): ExecutionContext => scala/concurrent/ExecutionContext.
[35:43..35:52): Implicits => scala/concurrent/ExecutionContext.Implicits.
[35:53..35:59): global => scala/concurrent/ExecutionContext.Implicits.global().
[37:4..37:5): a <= local9
[37:9..37:14): scala => scala/
[37:15..37:25): concurrent => scala/concurrent/
[37:26..37:32): Future => scala/concurrent/Future.
[37:33..37:43): successful => scala/concurrent/Future.successful().
[38:4..38:5): b <= local10
[38:9..38:14): scala => scala/
[38:15..38:25): concurrent => scala/concurrent/
[38:26..38:32): Future => scala/concurrent/Future.
[38:33..38:43): successful => scala/concurrent/Future.successful().
[39:4..39:11): println => scala/Predef.println(+1).
[39:12..39:13): a => local9
[41:4..41:5): a <= local11
[41:9..41:14): scala => scala/
[41:15..41:25): concurrent => scala/concurrent/
[41:26..41:32): Future => scala/concurrent/Future.
[41:33..41:43): successful => scala/concurrent/Future.successful().
[42:4..42:5): b <= local12
[42:9..42:14): scala => scala/
[42:15..42:25): concurrent => scala/concurrent/
[42:26..42:32): Future => scala/concurrent/Future.
[42:33..42:43): successful => scala/concurrent/Future.successful().
[43:7..43:8): a => local11
[43:9..43:10): < => scala/Int#`<`(+3).
[43:11..43:12): b => local12
[44:10..44:11): a => local13

Synthetics:
[3:2..3:6): List => *.apply[Int]
  apply => scala/collection/IterableFactory#apply().
  Int => scala/Int#
[3:2..3:13): List(1).map => *[Int]
  Int => scala/Int#
[4:2..4:18): Array.empty[Int] => intArrayOps(*)
  intArrayOps => scala/Predef.intArrayOps().
[4:2..4:18): Array.empty[Int] => *((`macro-expandee` : ClassTag[Int]))
  ClassTag => scala/reflect/ClassTag#
  Int => scala/Int#
[5:2..5:8): "fooo" => augmentString(*)
  augmentString => scala/Predef.augmentString().
[8:13..8:24): "name:(.*)" => augmentString(*)
  augmentString => scala/Predef.augmentString().
[9:6..9:14): x #:: xs => *.apply[Int, Stream[Int]]
  apply => scala/Tuple2.apply().
  Int => scala/Int#
  Stream => scala/package.Stream#
[9:17..9:23): Stream => *.apply[Int]
  apply => scala/collection/IterableFactory#apply().
  Int => scala/Int#
[10:6..10:10): Name => *.unapplySeq
  unapplySeq => scala/util/matching/Regex#unapplySeq().
[11:4..11:26): #:: 2 #:: Stream.empty => *[Int]
  Int => scala/Int#
[11:8..11:26): 2 #:: Stream.empty => Stream.toDeferrer[Int](*)
  Stream => scala/collection/immutable/Stream.
  toDeferrer => scala/collection/immutable/Stream.toDeferrer().
  Int => scala/Int#
[11:10..11:26): #:: Stream.empty => *[Int]
  Int => scala/Int#
[11:14..11:26): Stream.empty => Stream.toDeferrer[Nothing](*)
  Stream => scala/collection/immutable/Stream.
  toDeferrer => scala/collection/immutable/Stream.toDeferrer().
  Nothing => scala/Nothing#
[11:14..11:26): Stream.empty => *[Nothing]
  Nothing => scala/Nothing#
[13:14..13:36): #:: 2 #:: Stream.empty => *[Int]
  Int => scala/Int#
[13:18..13:36): 2 #:: Stream.empty => Stream.toDeferrer[Int](*)
  Stream => scala/collection/immutable/Stream.
  toDeferrer => scala/collection/immutable/Stream.toDeferrer().
  Int => scala/Int#
[13:20..13:36): #:: Stream.empty => *[Int]
  Int => scala/Int#
[13:24..13:36): Stream.empty => Stream.toDeferrer[Nothing](*)
  Stream => scala/collection/immutable/Stream.
  toDeferrer => scala/collection/immutable/Stream.toDeferrer().
  Nothing => scala/Nothing#
[13:24..13:36): Stream.empty => *[Nothing]
  Nothing => scala/Nothing#
[14:2..14:5): lst => Predef.any2stringadd[Stream[Int]](*)
  Predef => scala/Predef.
  any2stringadd => scala/Predef.any2stringadd().
  Stream => scala/collection/immutable/Stream#
  Int => scala/Int#
[16:2..16:53): for (x <- 1 to 10; y <- 0 until 10) println(x -> x) => orig(1 to 10).foreach[Unit]({(x) => orig(0 until 10).foreach[Unit]({(y) => orig(println(x -> x))})})
  foreach => scala/collection/immutable/Range#foreach().
  Unit => scala/Unit#
  x => local3
  y => local4
[16:12..16:13): 1 => intWrapper(*)
  intWrapper => scala/LowPriorityImplicits#intWrapper().
[16:26..16:27): 0 => intWrapper(*)
  intWrapper => scala/LowPriorityImplicits#intWrapper().
[16:46..16:47): x => Predef.ArrowAssoc[Int](*)
  Predef => scala/Predef.
  ArrowAssoc => scala/Predef.ArrowAssoc().
  Int => scala/Int#
[16:46..16:50): x -> => *[Int]
  Int => scala/Int#
[17:2..17:50): for (i <- 1 to 10; j <- 0 until 10) yield (i, j) => orig(1 to 10).flatMap[Tuple2[Int, Int]]({(i) => orig(0 until 10).map[Tuple2[Int, Int]]({(j) => orig((i, j))})})
  flatMap => scala/collection/StrictOptimizedIterableOps#flatMap().
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
  i => local5
  map => scala/collection/immutable/Range#map().
  j => local6
[17:12..17:13): 1 => intWrapper(*)
  intWrapper => scala/LowPriorityImplicits#intWrapper().
[17:26..17:27): 0 => intWrapper(*)
  intWrapper => scala/LowPriorityImplicits#intWrapper().
[18:2..18:64): for (i <- 1 to 10; j <- 0 until 10 if i % 2 == 0) yield (i, j) => orig(1 to 10).flatMap[Tuple2[Int, Int]]({(i) => orig(0 until 10).withFilter({(j) => orig(i % 2 == 0)}).map[Tuple2[Int, Int]]({(j) => orig((i, j))})})
  flatMap => scala/collection/StrictOptimizedIterableOps#flatMap().
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
  i => local7
  withFilter => scala/collection/IterableOps#withFilter().
  j => local8
  map => scala/collection/WithFilter#map().
[18:12..18:13): 1 => intWrapper(*)
  intWrapper => scala/LowPriorityImplicits#intWrapper().
[18:26..18:27): 0 => intWrapper(*)
  intWrapper => scala/LowPriorityImplicits#intWrapper().
[22:4..22:5): s => *.apply
  apply => example/Synthetic#s.apply().
[25:4..25:7): Bar => *.apply
  apply => example/Synthetic#s.Bar.apply().
[26:4..26:33): null.asInstanceOf[Int => Int] => *.apply
  apply => scala/Function1#apply().
[29:35..29:49): Array.empty[T] => *(evidence$1)
  evidence$1 => example/Synthetic#J#evidence$1.
[33:22..33:27): new F => Ordered.orderingToOrdered[F](*)(ordering)
  Ordered => scala/math/Ordered.
  orderingToOrdered => scala/math/Ordered.orderingToOrdered().
  F => example/Synthetic#F#
  ordering => example/Synthetic#ordering.
[36:2..39:14): for {
    a <- scala.concurrent.Future.successful(1)
    b <- scala.concurrent.Future.successful(2)
  } println(a) => orig(scala.concurrent.Future.successful(1)).foreach[Unit]({(a) => orig(scala.concurrent.Future.successful(2)).foreach[Unit]({(b) => orig(println(a))})(global)})(global)
  foreach => scala/concurrent/Future#foreach().
  Unit => scala/Unit#
  a => local9
  b => local10
  global => scala/concurrent/ExecutionContext.Implicits.global().
[37:9..37:43): scala.concurrent.Future.successful => *[Int]
  Int => scala/Int#
[38:9..38:43): scala.concurrent.Future.successful => *[Int]
  Int => scala/Int#
[40:2..44:11): for {
    a <- scala.concurrent.Future.successful(1)
    b <- scala.concurrent.Future.successful(2)
    if a < b
  } yield a => orig(scala.concurrent.Future.successful(1)).flatMap[Int]({(a) => orig(scala.concurrent.Future.successful(2)).withFilter({(b) => orig(a < b)})(global).map[Int]({(b) => orig(a)})(global)})(global)
  flatMap => scala/concurrent/Future#flatMap().
  Int => scala/Int#
  a => local11
  withFilter => scala/concurrent/Future#withFilter().
  b => local12
  global => scala/concurrent/ExecutionContext.Implicits.global().
  map => scala/concurrent/Future#map().
[41:9..41:43): scala.concurrent.Future.successful => *[Int]
  Int => scala/Int#
[42:9..42:43): scala.concurrent.Future.successful => *[Int]
  Int => scala/Int#
semanticdb/integration/src/main/scala/example/Synthetic.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Synthetic.scala
Text => empty
Language => Scala
Diagnostics => 10 entries

Diagnostics:
[9:8..9:8) [warning] method unapply in object #:: is deprecated (since 2.13.0): Prefer LazyList instead
[9:17..9:23) [warning] value Stream in package scala is deprecated (since 2.13.0): Use LazyList instead of Stream
[9:23..9:23) [warning] class Stream in package immutable is deprecated (since 2.13.0): Use LazyList (which is fully lazy) instead of Stream (which has a lazy tail only)
[11:10..11:10) [warning] object Stream in package immutable is deprecated (since 2.13.0): Use LazyList (which is fully lazy) instead of Stream (which has a lazy tail only)
[11:14..11:20) [warning] value Stream in package scala is deprecated (since 2.13.0): Use LazyList instead of Stream
[11:21..11:21) [warning] object Stream in package immutable is deprecated (since 2.13.0): Use LazyList (which is fully lazy) instead of Stream (which has a lazy tail only)
[13:20..13:20) [warning] object Stream in package immutable is deprecated (since 2.13.0): Use LazyList (which is fully lazy) instead of Stream (which has a lazy tail only)
[13:24..13:30) [warning] value Stream in package scala is deprecated (since 2.13.0): Use LazyList instead of Stream
[13:31..13:31) [warning] object Stream in package immutable is deprecated (since 2.13.0): Use LazyList (which is fully lazy) instead of Stream (which has a lazy tail only)
[14:2..14:2) [warning] method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +

semanticdb/integration/src/main/scala/example/Traits.scala
----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Traits.scala
Text => non-empty
Language => Scala
Symbols => 10 entries
Occurrences => 15 entries

Symbols:
local0 => final class $anon extends AnyRef with U
  AnyRef => scala/AnyRef#
  U => traits/U#
local1 => selfparam self: C
  C => traits/C#
traits/C# => class C extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
traits/C#`<init>`(). => primary ctor <init>()
traits/T# => trait T extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
traits/T#x(). => method x: Int
  Int => scala/Int#
traits/U# => sealed trait U extends AnyRef
  AnyRef => scala/AnyRef#
traits/U. => final object U extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
traits/U.u(). => method u: U
  U => traits/U#
traits/V# => trait V extends AnyRef { self: C =>  }
  AnyRef => scala/AnyRef#
  C => traits/C#

Occurrences:
[0:8..0:14): traits <= traits/
[2:6..2:7): T <= traits/T#
[3:6..3:7): x <= traits/T#x().
[6:13..6:14): U <= traits/U#
[7:7..7:8): U <= traits/U.
[8:6..8:7): u <= traits/U.u().
[8:9..8:10): U => traits/U#
[8:17..8:17):  <= local0
[8:17..8:18): U => traits/U#
[8:19..8:19):  => java/lang/Object#`<init>`().
[11:6..11:7): C <= traits/C#
[11:7..11:7):  <= traits/C#`<init>`().
[12:6..12:7): V <= traits/V#
[12:10..12:14): self <= local1
[12:16..12:17): C => traits/C#

semanticdb/integration/src/main/scala/example/Types.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Types.scala
Text => non-empty
Language => Scala
Symbols => 145 entries
Occurrences => 265 entries
Diagnostics => 1 entries

Symbols:
local0 => abstract method k: Int
  Int => scala/Int#
local1 => abstract method k: Int
  Int => scala/Int#
local2 => final class $anon extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
local3 => method k: Int
  Int => scala/Int#
local4 => final class $anon extends M with N
  M => types/Test.M#
  N => types/Test.N#
local5 => final class $anon extends M with N { +1 decls }
  M => types/Test.M#
  N => types/Test.N#
local6 => method k: Int
  Int => scala/Int#
local7 => abstract type T
local11 => type L[T] = List[T]
  T => local12
  List => scala/package.List#
local12 => typeparam T
local13 => val local RepeatedType$1: RepeatedType
  RepeatedType => types/Test.C#RepeatedType#
types/B# => class B extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
types/B#`<init>`(). => primary ctor <init>()
types/C# => class C extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
types/C#`<init>`(). => primary ctor <init>()
types/P# => class P extends AnyRef { +4 decls }
  AnyRef => scala/AnyRef#
types/P#C# => class C extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
types/P#C#`<init>`(). => primary ctor <init>()
types/P#X# => class X extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
types/P#X#`<init>`(). => primary ctor <init>()
types/P#`<init>`(). => primary ctor <init>()
types/P#x. => val method x: X
  X => types/P#X#
types/T# => class T extends AnyRef { +4 decls }
  AnyRef => scala/AnyRef#
types/T#C# => class C extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
types/T#C#`<init>`(). => primary ctor <init>()
types/T#X# => class X extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
types/T#X#`<init>`(). => primary ctor <init>()
types/T#`<init>`(). => primary ctor <init>()
types/T#x. => val method x: X
  X => types/T#X#
types/Test. => final object Test extends AnyRef { +4 decls }
  AnyRef => scala/AnyRef#
types/Test.C# => class C extends M { +36 decls }
  M => types/Test.M#
types/Test.C#ByNameType. => final object ByNameType extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
types/Test.C#ByNameType.m1(). => method m1(x: => Int): Int
  x => types/Test.C#ByNameType.m1().(x)
  Int => scala/Int#
types/Test.C#ByNameType.m1().(x) => param x: => Int
  Int => scala/Int#
types/Test.C#ClassInfoType1. => final object ClassInfoType1 extends AnyRef
  AnyRef => scala/AnyRef#
types/Test.C#ClassInfoType2# => class ClassInfoType2 extends B { +2 decls }
  B => types/B#
types/Test.C#ClassInfoType2#`<init>`(). => primary ctor <init>()
types/Test.C#ClassInfoType2#x(). => method x: Int
  Int => scala/Int#
types/Test.C#ClassInfoType3# => trait ClassInfoType3[T] extends AnyRef
  T => types/Test.C#ClassInfoType3#[T]
  AnyRef => scala/AnyRef#
types/Test.C#ClassInfoType3#[T] => typeparam T
types/Test.C#Either. => val method Either: Either.type
  Either => scala/util/Either.
types/Test.C#MethodType. => final object MethodType extends AnyRef { +6 decls }
  AnyRef => scala/AnyRef#
types/Test.C#MethodType.m3(). => method m3: Int
  Int => scala/Int#
types/Test.C#MethodType.m4(). => method m4(): Int
  Int => scala/Int#
types/Test.C#MethodType.m5(). => method m5(x: Int): Int
  x => types/Test.C#MethodType.m5().(x)
  Int => scala/Int#
types/Test.C#MethodType.m5().(x) => param x: Int
  Int => scala/Int#
types/Test.C#MethodType.m6(). => method m6[T](x: T): T
  T => types/Test.C#MethodType.m6().[T]
  x => types/Test.C#MethodType.m6().(x)
types/Test.C#MethodType.m6().(x) => param x: T
  T => types/Test.C#MethodType.m6().[T]
types/Test.C#MethodType.m6().[T] => typeparam T
types/Test.C#MethodType.x1(). => method x1: Int
  Int => scala/Int#
types/Test.C#MethodType.x2(). => method x2: Int
  Int => scala/Int#
types/Test.C#RepeatedType# => case class RepeatedType extends AnyRef with Product with Serializable { +12 decls }
  AnyRef => scala/AnyRef#
  Product => scala/Product#
  Serializable => scala/package.Serializable#
types/Test.C#RepeatedType#`<init>`(). => primary ctor <init>(val s: String*)
  s => types/Test.C#RepeatedType#`<init>`().(s)
  String => scala/Predef.String#
types/Test.C#RepeatedType#`<init>`().(s) => val param s: String*
  String => scala/Predef.String#
types/Test.C#RepeatedType#canEqual(). => method canEqual(x$1: Any): Boolean <: scala/Equals#canEqual().
  x$1 => types/Test.C#RepeatedType#canEqual().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
types/Test.C#RepeatedType#canEqual().(x$1) => param x$1: Any
  Any => scala/Any#
types/Test.C#RepeatedType#equals(). => method equals(x$1: Any): Boolean <: scala/Equals#equals()., java/lang/Object#equals()., scala/Any#equals().
  x$1 => types/Test.C#RepeatedType#equals().(x$1)
  Any => scala/Any#
  Boolean => scala/Boolean#
types/Test.C#RepeatedType#equals().(x$1) => param x$1: Any
  Any => scala/Any#
types/Test.C#RepeatedType#hashCode(). => method hashCode(): Int <: java/lang/Object#hashCode()., scala/Any#hashCode().
  Int => scala/Int#
types/Test.C#RepeatedType#m1(). => method m1(x: Int*): Int
  x => types/Test.C#RepeatedType#m1().(x)
  Int => scala/Int#
types/Test.C#RepeatedType#m1().(x) => param x: Int*
  Int => scala/Int#
types/Test.C#RepeatedType#productArity(). => method productArity: Int <: scala/Product#productArity().
  Int => scala/Int#
types/Test.C#RepeatedType#productElement(). => method productElement(x$1: Int): Any <: scala/Product#productElement().
  x$1 => types/Test.C#RepeatedType#productElement().(x$1)
  Int => scala/Int#
  Any => scala/Any#
types/Test.C#RepeatedType#productElement().(x$1) => param x$1: Int
  Int => scala/Int#
types/Test.C#RepeatedType#productElementName(). => method productElementName(x$1: Int): String <: scala/Product#productElementName().
  x$1 => types/Test.C#RepeatedType#productElementName().(x$1)
  Int => scala/Int#
  String => java/lang/String#
types/Test.C#RepeatedType#productElementName().(x$1) => param x$1: Int
  Int => scala/Int#
types/Test.C#RepeatedType#productIterator(). => method productIterator: Iterator[Any] <: scala/Product#productIterator().
  Iterator => scala/collection/Iterator#
  Any => scala/Any#
types/Test.C#RepeatedType#productPrefix(). => method productPrefix: String <: scala/Product#productPrefix().
  String => java/lang/String#
types/Test.C#RepeatedType#s. => val method s: String*
  String => scala/Predef.String#
types/Test.C#RepeatedType#toString(). => method toString(): String <: java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
types/Test.C#RepeatedType. => final object RepeatedType extends AbstractFunction1[String*, RepeatedType] with Serializable { +3 decls }
  AbstractFunction1 => scala/runtime/AbstractFunction1#
  String => scala/Predef.String#
  RepeatedType => types/Test.C#RepeatedType#
  Serializable => java/io/Serializable#
types/Test.C#RepeatedType.apply(). => method apply(s: String*): RepeatedType <: scala/Function1#apply().
  s => types/Test.C#RepeatedType.apply().(s)
  String => scala/Predef.String#
  RepeatedType => types/Test.C#RepeatedType#
types/Test.C#RepeatedType.apply().(s) => param s: String*
  String => scala/Predef.String#
types/Test.C#RepeatedType.toString(). => final method toString(): String <: scala/Function1#toString()., java/lang/Object#toString()., scala/Any#toString().
  String => java/lang/String#
types/Test.C#RepeatedType.unapplySeq(). => method unapplySeq(x$0: RepeatedType): Option[Seq[String]]
  x$0 => types/Test.C#RepeatedType.unapplySeq().(x$0)
  RepeatedType => types/Test.C#RepeatedType#
  Option => scala/Option#
  Seq => scala/package.Seq#
  String => scala/Predef.String#
types/Test.C#RepeatedType.unapplySeq().(x$0) => param x$0: RepeatedType
  RepeatedType => types/Test.C#RepeatedType#
types/Test.C#TypeType. => final object TypeType extends AnyRef { +5 decls }
  AnyRef => scala/AnyRef#
types/Test.C#TypeType.T1# => abstract type T1
types/Test.C#TypeType.T4# => type T4 = C
  C => types/Test.C#
types/Test.C#TypeType.T5# => type T5[U] = U
  U => types/Test.C#TypeType.T5#[U]
types/Test.C#TypeType.T5#[U] => typeparam U
types/Test.C#TypeType.m2(). => method m2[T2 = C]: Nothing
  T2 => types/Test.C#TypeType.m2().[T2]
  C => types/Test.C#
  Nothing => scala/Nothing#
types/Test.C#TypeType.m2().[T2] => typeparam T2 = C
  C => types/Test.C#
types/Test.C#TypeType.m3(). => method m3[M3[_]]: Nothing
  M3 => types/Test.C#TypeType.m3().[M3]
  _ => types/Test.C#TypeType.m3().[M3][_$$2]
  Nothing => scala/Nothing#
types/Test.C#TypeType.m3().[M3] => typeparam M3[_]
  _ => types/Test.C#TypeType.m3().[M3][_$$2]
types/Test.C#TypeType.m3().[M3][_$$2] => typeparam _
types/Test.C#`<init>`(). => primary ctor <init>()
types/Test.C#annType1. => val method annType1: T @ann[Int]
  T => types/T#
  ann => types/ann#
  Int => scala/Int#
types/Test.C#annType2. => val method annType2: T @ann1 @ann2
  T => types/T#
  ann1 => types/ann1#
  ann2 => types/ann2#
types/Test.C#compoundType1. => val method compoundType1: AnyRef { def k: Int }
  AnyRef => scala/AnyRef#
  k => local0
  Int => scala/Int#
types/Test.C#compoundType2. => val method compoundType2: M with N {}
  M => types/Test.M#
  N => types/Test.N#
types/Test.C#compoundType3. => val method compoundType3: M with N { def k: Int }
  M => types/Test.M#
  N => types/Test.N#
  k => local1
  Int => scala/Int#
types/Test.C#compoundType4. => val method compoundType4: AnyRef { def k: Int }
  AnyRef => scala/AnyRef#
  k => local3
  Int => scala/Int#
types/Test.C#compoundType5. => val method compoundType5: M with N {}
  M => types/Test.M#
  N => types/Test.N#
types/Test.C#compoundType6. => val method compoundType6: M with N { def k: Int }
  M => types/Test.M#
  N => types/Test.N#
  k => local6
  Int => scala/Int#
types/Test.C#existentialType1. => val method existentialType1: T forSome { type T }
  T => local7
types/Test.C#existentialType2. => val method existentialType2: List[_] forSome { type _ }
  List => scala/package.List#
  _ => local8
types/Test.C#existentialType3. => val method existentialType3: Class[?0] forSome { type ?0 }
  Class => java/lang/Class#
  ?0 => local9
types/Test.C#existentialType4. => val method existentialType4: Class[?0] forSome { type ?0 }
  Class => java/lang/Class#
  ?0 => local10
types/Test.C#p. => val method p: P
  P => types/P#
types/Test.C#singleType1. => val method singleType1: x.type
  x => types/Test.C#x.
types/Test.C#singleType2. => val method singleType2: p.x.type
  p => types/Test.C#p.
  x => types/P#x.
types/Test.C#superType1. => val method superType1: Int
  Int => scala/Int#
types/Test.C#superType2. => val method superType2: Int
  Int => scala/Int#
types/Test.C#superType3. => val method superType3: Int
  Int => scala/Int#
types/Test.C#thisType1. => val method thisType1: C.this.type
  C => types/Test.C#
types/Test.C#thisType2. => val method thisType2: C.this.type
  C => types/Test.C#
types/Test.C#typeLambda1(). => method typeLambda1[M[_]]: Nothing
  M => types/Test.C#typeLambda1().[M]
  _ => types/Test.C#typeLambda1().[M][_$$1]
  Nothing => scala/Nothing#
types/Test.C#typeLambda1().[M] => typeparam M[_]
  _ => types/Test.C#typeLambda1().[M][_$$1]
types/Test.C#typeLambda1().[M][_$$1] => typeparam _
types/Test.C#typeRef1. => val method typeRef1: C
  C => types/Test.C#
types/Test.C#typeRef2. => val method typeRef2: p.C
  p => types/Test.C#p.
  C => types/P#C#
types/Test.C#typeRef3. => val method typeRef3: T#C
  T => types/T#
  C => types/T#C#
types/Test.C#typeRef4. => val method typeRef4: List[Int]
  List => scala/package.List#
  Int => scala/Int#
types/Test.C#x. => val method x: p.X
  p => types/Test.C#p.
  X => types/P#X#
types/Test.Literal. => final object Literal extends AnyRef { +15 decls }
  AnyRef => scala/AnyRef#
types/Test.Literal.bool. => final val method bool: true
types/Test.Literal.char. => final val method char: 'a'
types/Test.Literal.clazzOfInt. => final val method clazzOfInt: Class[Int]
  Class => java/lang/Class#
  Int => scala/Int#
types/Test.Literal.clazzOfJStr. => final val method clazzOfJStr: Class[String]
  Class => java/lang/Class#
  String => java/lang/String#
types/Test.Literal.clazzOfM. => final val method clazzOfM: Class[M]
  Class => java/lang/Class#
  M => types/Test.M#
types/Test.Literal.clazzOfOption. => final val method clazzOfOption: Class[Option[Int]]
  Class => java/lang/Class#
  Option => scala/Option#
  Int => scala/Int#
types/Test.Literal.clazzOfTRef. => final val method clazzOfTRef: Class[T#C]
  Class => java/lang/Class#
  T => types/T#
  C => types/T#C#
types/Test.Literal.double. => final val method double: 2.0
types/Test.Literal.float. => final val method float: 1.0f
types/Test.Literal.int. => final val method int: 1
types/Test.Literal.javaEnum. => final val method javaEnum: NOFOLLOW_LINKS.type
  NOFOLLOW_LINKS => java/nio/file/LinkOption#NOFOLLOW_LINKS.
types/Test.Literal.long. => final val method long: 1L
types/Test.Literal.nil. => final val method nil: null
types/Test.Literal.string. => final val method string: "a"
types/Test.Literal.unit. => final val method unit: Unit
  Unit => scala/Unit#
types/Test.M# => class M extends AnyRef { +2 decls }
  AnyRef => scala/AnyRef#
types/Test.M#`<init>`(). => primary ctor <init>()
types/Test.M#m(). => method m: Int
  Int => scala/Int#
types/Test.N# => trait N extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
types/Test.N#n(). => method n: Int
  Int => scala/Int#
types/ann# => class ann[T] extends Annotation with StaticAnnotation { +2 decls }
  T => types/ann#[T]
  Annotation => scala/annotation/Annotation#
  StaticAnnotation => scala/annotation/StaticAnnotation#
types/ann#[T] => typeparam T
types/ann#`<init>`(). => primary ctor <init>(x: T)
  x => types/ann#`<init>`().(x)
  T => types/ann#[T]
types/ann#`<init>`().(x) => param x: T
  T => types/ann#[T]
types/ann#x. => private[this] val method x: T
  T => types/ann#[T]
types/ann1# => class ann1 extends Annotation with StaticAnnotation { +1 decls }
  Annotation => scala/annotation/Annotation#
  StaticAnnotation => scala/annotation/StaticAnnotation#
types/ann1#`<init>`(). => primary ctor <init>()
types/ann2# => class ann2 extends Annotation with StaticAnnotation { +1 decls }
  Annotation => scala/annotation/Annotation#
  StaticAnnotation => scala/annotation/StaticAnnotation#
types/ann2#`<init>`(). => primary ctor <init>()

Occurrences:
[0:8..0:13): types <= types/
[2:7..2:12): scala => scala/
[2:13..2:21): language => scala/language.
[2:22..2:34): existentials => scala/language.existentials.
[3:7..3:12): scala => scala/
[3:13..3:21): language => scala/language.
[3:22..3:33): higherKinds => scala/language.higherKinds.
[5:6..5:9): ann <= types/ann#
[5:10..5:11): T <= types/ann#[T]
[5:12..5:12):  <= types/ann#`<init>`().
[5:13..5:14): x <= types/ann#x.
[5:16..5:17): T => types/ann#[T]
[5:27..5:32): scala => scala/
[5:33..5:43): annotation => scala/annotation/
[5:44..5:60): StaticAnnotation => scala/annotation/StaticAnnotation#
[6:6..6:10): ann1 <= types/ann1#
[6:11..6:11):  <= types/ann1#`<init>`().
[6:19..6:24): scala => scala/
[6:25..6:35): annotation => scala/annotation/
[6:36..6:52): StaticAnnotation => scala/annotation/StaticAnnotation#
[7:6..7:10): ann2 <= types/ann2#
[7:11..7:11):  <= types/ann2#`<init>`().
[7:19..7:24): scala => scala/
[7:25..7:35): annotation => scala/annotation/
[7:36..7:52): StaticAnnotation => scala/annotation/StaticAnnotation#
[9:6..9:7): B <= types/B#
[9:7..9:7):  <= types/B#`<init>`().
[11:6..11:7): C <= types/C#
[11:7..11:7):  <= types/C#`<init>`().
[13:6..13:7): P <= types/P#
[13:8..13:8):  <= types/P#`<init>`().
[14:8..14:9): C <= types/P#C#
[14:9..14:9):  <= types/P#C#`<init>`().
[15:8..15:9): X <= types/P#X#
[15:9..15:9):  <= types/P#X#`<init>`().
[16:6..16:7): x <= types/P#x.
[16:14..16:15): X => types/P#X#
[16:15..16:15):  => types/P#X#`<init>`().
[19:6..19:7): T <= types/T#
[19:8..19:8):  <= types/T#`<init>`().
[20:8..20:9): C <= types/T#C#
[20:9..20:9):  <= types/T#C#`<init>`().
[21:8..21:9): X <= types/T#X#
[21:9..21:9):  <= types/T#X#`<init>`().
[22:6..22:7): x <= types/T#x.
[22:14..22:15): X => types/T#X#
[22:15..22:15):  => types/T#X#`<init>`().
[25:7..25:11): Test <= types/Test.
[26:8..26:9): M <= types/Test.M#
[26:10..26:10):  <= types/Test.M#`<init>`().
[27:8..27:9): m <= types/Test.M#m().
[27:11..27:14): Int => scala/Int#
[27:17..27:20): ??? => scala/Predef.`???`().
[30:8..30:9): N <= types/Test.N#
[31:8..31:9): n <= types/Test.N#n().
[31:11..31:14): Int => scala/Int#
[31:17..31:20): ??? => scala/Predef.`???`().
[34:8..34:9): C <= types/Test.C#
[34:10..34:10):  <= types/Test.C#`<init>`().
[34:18..34:19): M => types/Test.M#
[34:20..34:20):  => types/Test.M#`<init>`().
[35:8..35:9): p <= types/Test.C#p.
[35:16..35:17): P => types/P#
[35:17..35:17):  => types/P#`<init>`().
[36:8..36:9): x <= types/Test.C#x.
[36:12..36:13): p => types/Test.C#p.
[36:14..36:15): x => types/P#x.
[38:8..38:16): typeRef1 <= types/Test.C#typeRef1.
[38:18..38:19): C => types/Test.C#
[38:22..38:25): ??? => scala/Predef.`???`().
[39:8..39:16): typeRef2 <= types/Test.C#typeRef2.
[39:18..39:19): p => types/Test.C#p.
[39:20..39:21): C => types/P#C#
[39:24..39:27): ??? => scala/Predef.`???`().
[40:8..40:16): typeRef3 <= types/Test.C#typeRef3.
[40:18..40:19): T => types/T#
[40:20..40:21): C => types/T#C#
[40:24..40:27): ??? => scala/Predef.`???`().
[41:8..41:16): typeRef4 <= types/Test.C#typeRef4.
[41:18..41:22): List => scala/package.List#
[41:23..41:26): Int => scala/Int#
[41:30..41:33): ??? => scala/Predef.`???`().
[43:8..43:19): singleType1 <= types/Test.C#singleType1.
[43:21..43:22): x => types/Test.C#x.
[43:30..43:33): ??? => scala/Predef.`???`().
[44:8..44:19): singleType2 <= types/Test.C#singleType2.
[44:21..44:22): p => types/Test.C#p.
[44:23..44:24): x => types/P#x.
[44:32..44:35): ??? => scala/Predef.`???`().
[45:8..45:14): Either <= types/Test.C#Either.
[45:17..45:22): scala => scala/
[45:23..45:27): util => scala/util/
[45:28..45:34): Either => scala/util/Either.
[47:8..47:17): thisType1 <= types/Test.C#thisType1.
[47:31..47:34): ??? => scala/Predef.`???`().
[48:8..48:17): thisType2 <= types/Test.C#thisType2.
[48:19..48:20): C => types/Test.C#
[48:33..48:36): ??? => scala/Predef.`???`().
[50:8..50:18): superType1 <= types/Test.C#superType1.
[50:27..50:28): m => types/Test.M#m().
[51:8..51:18): superType2 <= types/Test.C#superType2.
[51:27..51:28): M => types/Test.C#
[51:30..51:31): m => types/Test.M#m().
[52:8..52:18): superType3 <= types/Test.C#superType3.
[52:21..52:22): C => types/Test.C#
[52:29..52:30): M => types/Test.C#
[52:32..52:33): m => types/Test.M#m().
[54:8..54:21): compoundType1 <= types/Test.C#compoundType1.
[54:29..54:30): k <= local0
[54:32..54:35): Int => scala/Int#
[54:40..54:43): ??? => scala/Predef.`???`().
[55:8..55:21): compoundType2 <= types/Test.C#compoundType2.
[55:23..55:24): M => types/Test.M#
[55:30..55:31): N => types/Test.N#
[55:34..55:37): ??? => scala/Predef.`???`().
[56:8..56:21): compoundType3 <= types/Test.C#compoundType3.
[56:23..56:24): M => types/Test.M#
[56:30..56:31): N => types/Test.N#
[56:38..56:39): k <= local1
[56:41..56:44): Int => scala/Int#
[56:49..56:52): ??? => scala/Predef.`???`().
[57:8..57:21): compoundType4 <= types/Test.C#compoundType4.
[57:28..57:28):  <= local2
[57:34..57:35): k <= local3
[57:37..57:40): Int => scala/Int#
[57:43..57:46): ??? => scala/Predef.`???`().
[58:8..58:21): compoundType5 <= types/Test.C#compoundType5.
[58:28..58:28):  <= local4
[58:28..58:29): M => types/Test.M#
[58:30..58:30):  => types/Test.M#`<init>`().
[58:35..58:36): N => types/Test.N#
[59:8..59:21): compoundType6 <= types/Test.C#compoundType6.
[59:28..59:28):  <= local5
[59:28..59:29): M => types/Test.M#
[59:30..59:30):  => types/Test.M#`<init>`().
[59:35..59:36): N => types/Test.N#
[59:43..59:44): k <= local6
[59:46..59:49): Int => scala/Int#
[59:52..59:55): ??? => scala/Predef.`???`().
[61:8..61:16): annType1 <= types/Test.C#annType1.
[61:18..61:19): T => types/T#
[61:21..61:24): ann => types/ann#
[61:31..61:34): ??? => scala/Predef.`???`().
[62:8..62:16): annType2 <= types/Test.C#annType2.
[62:18..62:19): T => types/T#
[62:21..62:25): ann1 => types/ann1#
[62:26..62:26):  => types/ann1#`<init>`().
[62:27..62:31): ann2 => types/ann2#
[62:32..62:32):  => types/ann2#`<init>`().
[62:34..62:37): ??? => scala/Predef.`???`().
[64:8..64:24): existentialType1 <= types/Test.C#existentialType1.
[64:26..64:27): T => local7
[64:43..64:44): T <= local7
[64:49..64:52): ??? => scala/Predef.`???`().
[65:8..65:24): existentialType2 <= types/Test.C#existentialType2.
[65:26..65:30): List => scala/package.List#
[65:36..65:39): ??? => scala/Predef.`???`().
[66:8..66:24): existentialType3 <= types/Test.C#existentialType3.
[66:27..66:32): Class => java/lang/Class#
[66:33..66:40): forName => java/lang/Class#forName().
[67:8..67:24): existentialType4 <= types/Test.C#existentialType4.
[67:27..67:32): Class => java/lang/Class#
[67:33..67:40): forName => java/lang/Class#forName().
[69:8..69:19): typeLambda1 <= types/Test.C#typeLambda1().
[69:20..69:21): M <= types/Test.C#typeLambda1().[M]
[69:28..69:31): ??? => scala/Predef.`???`().
[70:4..70:15): typeLambda1 => types/Test.C#typeLambda1().
[70:24..70:25): L <= local11
[70:26..70:27): T <= local12
[70:31..70:35): List => scala/package.List#
[70:36..70:37): T => local12
[70:42..70:43): L => local11
[72:11..72:25): ClassInfoType1 <= types/Test.C#ClassInfoType1.
[73:10..73:24): ClassInfoType2 <= types/Test.C#ClassInfoType2#
[73:25..73:25):  <= types/Test.C#ClassInfoType2#`<init>`().
[73:33..73:34): B => types/B#
[73:35..73:35):  => types/B#`<init>`().
[73:41..73:42): x <= types/Test.C#ClassInfoType2#x().
[74:10..74:24): ClassInfoType3 <= types/Test.C#ClassInfoType3#
[74:25..74:26): T <= types/Test.C#ClassInfoType3#[T]
[76:11..76:21): MethodType <= types/Test.C#MethodType.
[77:10..77:12): x1 <= types/Test.C#MethodType.x1().
[77:14..77:17): Int => scala/Int#
[77:20..77:23): ??? => scala/Predef.`???`().
[78:10..78:12): x2 <= types/Test.C#MethodType.x2().
[78:14..78:17): Int => scala/Int#
[78:20..78:23): ??? => scala/Predef.`???`().
[79:10..79:12): m3 <= types/Test.C#MethodType.m3().
[79:14..79:17): Int => scala/Int#
[79:20..79:23): ??? => scala/Predef.`???`().
[80:10..80:12): m4 <= types/Test.C#MethodType.m4().
[80:16..80:19): Int => scala/Int#
[80:22..80:25): ??? => scala/Predef.`???`().
[81:10..81:12): m5 <= types/Test.C#MethodType.m5().
[81:13..81:14): x <= types/Test.C#MethodType.m5().(x)
[81:16..81:19): Int => scala/Int#
[81:22..81:25): Int => scala/Int#
[81:28..81:31): ??? => scala/Predef.`???`().
[82:10..82:12): m6 <= types/Test.C#MethodType.m6().
[82:13..82:14): T <= types/Test.C#MethodType.m6().[T]
[82:16..82:17): x <= types/Test.C#MethodType.m6().(x)
[82:19..82:20): T => types/Test.C#MethodType.m6().[T]
[82:23..82:24): T => types/Test.C#MethodType.m6().[T]
[82:27..82:30): ??? => scala/Predef.`???`().
[85:11..85:21): ByNameType <= types/Test.C#ByNameType.
[86:10..86:12): m1 <= types/Test.C#ByNameType.m1().
[86:13..86:14): x <= types/Test.C#ByNameType.m1().(x)
[86:19..86:22): Int => scala/Int#
[86:25..86:28): Int => scala/Int#
[86:31..86:34): ??? => scala/Predef.`???`().
[89:15..89:27): RepeatedType <= types/Test.C#RepeatedType#
[89:27..89:27):  <= types/Test.C#RepeatedType#`<init>`().
[89:28..89:29): s <= types/Test.C#RepeatedType#s.
[89:31..89:37): String => java/lang/String#
[90:10..90:12): m1 <= types/Test.C#RepeatedType#m1().
[90:13..90:14): x <= types/Test.C#RepeatedType#m1().(x)
[90:16..90:19): Int => scala/Int#
[90:23..90:26): Int => scala/Int#
[90:29..90:30): s => types/Test.C#RepeatedType#s.
[90:31..90:37): length => scala/collection/SeqOps#length().
[93:11..93:19): TypeType <= types/Test.C#TypeType.
[94:11..94:13): T1 <= types/Test.C#TypeType.T1#
[95:10..95:12): m2 <= types/Test.C#TypeType.m2().
[95:13..95:15): T2 <= types/Test.C#TypeType.m2().[T2]
[95:19..95:20): C => types/Test.C#
[95:24..95:25): C => types/Test.C#
[95:29..95:32): ??? => scala/Predef.`???`().
[96:10..96:12): m3 <= types/Test.C#TypeType.m3().
[96:13..96:15): M3 <= types/Test.C#TypeType.m3().[M3]
[96:22..96:25): ??? => scala/Predef.`???`().
[97:11..97:13): T4 <= types/Test.C#TypeType.T4#
[97:16..97:17): C => types/Test.C#
[98:11..98:13): T5 <= types/Test.C#TypeType.T5#
[98:14..98:15): U <= types/Test.C#TypeType.T5#[U]
[98:19..98:20): U => types/Test.C#TypeType.T5#[U]
[102:9..102:16): Literal <= types/Test.Literal.
[103:14..103:17): int <= types/Test.Literal.int.
[104:14..104:18): long <= types/Test.Literal.long.
[105:14..105:19): float <= types/Test.Literal.float.
[106:14..106:20): double <= types/Test.Literal.double.
[107:14..107:17): nil <= types/Test.Literal.nil.
[108:14..108:18): char <= types/Test.Literal.char.
[109:14..109:20): string <= types/Test.Literal.string.
[110:14..110:18): bool <= types/Test.Literal.bool.
[111:14..111:18): unit <= types/Test.Literal.unit.
[112:14..112:22): javaEnum <= types/Test.Literal.javaEnum.
[112:25..112:29): java => java/
[112:30..112:33): nio => java/nio/
[112:34..112:38): file => java/nio/file/
[112:39..112:49): LinkOption => java/nio/file/LinkOption#
[112:50..112:64): NOFOLLOW_LINKS => java/nio/file/LinkOption#NOFOLLOW_LINKS.
[113:14..113:24): clazzOfInt <= types/Test.Literal.clazzOfInt.
[113:27..113:34): classOf => scala/Predef.classOf().
[113:35..113:38): Int => scala/Int#
[115:14..115:27): clazzOfOption <= types/Test.Literal.clazzOfOption.
[115:30..115:37): classOf => scala/Predef.classOf().
[117:14..117:25): clazzOfJStr <= types/Test.Literal.clazzOfJStr.
[117:28..117:35): classOf => scala/Predef.classOf().
[117:36..117:52): java.lang.String => java/lang/String#
[118:14..118:22): clazzOfM <= types/Test.Literal.clazzOfM.
[118:25..118:32): classOf => scala/Predef.classOf().
[118:33..118:34): M => types/Test.M#
[119:14..119:25): clazzOfTRef <= types/Test.Literal.clazzOfTRef.
[119:28..119:35): classOf => scala/Predef.classOf().
[119:36..119:39): T#C => types/T#C#

Diagnostics:
[3:0..3:33) [warning] Unused import of deprecated lazy value higherKinds: higherKinds no longer needs to be imported explicitly

semanticdb/integration/src/main/scala/example/ValPattern.scala
--------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/ValPattern.scala
Text => non-empty
Language => Scala
Symbols => 33 entries
Occurrences => 40 entries
Synthetics => 9 entries

Symbols:
example/ValPattern# => class ValPattern extends AnyRef { +13 decls }
  AnyRef => scala/AnyRef#
example/ValPattern#`<init>`(). => primary ctor <init>()
example/ValPattern#`leftVar_=`(). => var method leftVar_=(x$1: Int): Unit
  x$1 => example/ValPattern#`leftVar_=`().(x$1)
  Int => scala/Int#
  Unit => scala/Unit#
example/ValPattern#`leftVar_=`().(x$1) => param x$1: Int
  Int => scala/Int#
example/ValPattern#`number1Var_=`(). => var method number1Var_=(x$1: Int): Unit
  x$1 => example/ValPattern#`number1Var_=`().(x$1)
  Int => scala/Int#
  Unit => scala/Unit#
example/ValPattern#`number1Var_=`().(x$1) => param x$1: Int
  Int => scala/Int#
example/ValPattern#`rightVar_=`(). => var method rightVar_=(x$1: Int): Unit
  x$1 => example/ValPattern#`rightVar_=`().(x$1)
  Int => scala/Int#
  Unit => scala/Unit#
example/ValPattern#`rightVar_=`().(x$1) => param x$1: Int
  Int => scala/Int#
example/ValPattern#app(). => method app(): Unit
  Unit => scala/Unit#
example/ValPattern#left. => val method left: Int
  Int => scala/Int#
example/ValPattern#leftVar(). => var method leftVar: Int
  Int => scala/Int#
example/ValPattern#number1. => val method number1: Int
  Int => scala/Int#
example/ValPattern#number1Var(). => var method number1Var: Int
  Int => scala/Int#
example/ValPattern#right. => val method right: Int
  Int => scala/Int#
example/ValPattern#rightVar(). => var method rightVar: Int
  Int => scala/Int#
example/ValPattern#x$1. => val method x$1: Tuple2[Int, Int]
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
example/ValPattern#x$2. => val method x$2: Tuple2[Int, Int]
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
local0 => val local left: Int
  Int => scala/Int#
local1 => val local right: Int
  Int => scala/Int#
local2 => val local number1: Int
  Int => scala/Int#
local3 => val local leftVar: Int
  Int => scala/Int#
local4 => val local rightVar: Int
  Int => scala/Int#
local5 => val local number1Var: Int
  Int => scala/Int#
local6 => val local x$3: : Tuple2[Int, Int]
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
local7 => val local left: Int
  Int => scala/Int#
local8 => val local right: Int
  Int => scala/Int#
local9 => val local number1: Int
  Int => scala/Int#
local10 => val local number1: Int
  Int => scala/Int#
local11 => val local x$4: : Tuple2[Int, Int]
  Tuple2 => scala/Tuple2#
  Int => scala/Int#
local12 => var local leftVar: Int
  Int => scala/Int#
local13 => var local rightVar: Int
  Int => scala/Int#
local14 => var local number1Var: Int
  Int => scala/Int#
local15 => val local number1Var: Int
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:16): ValPattern <= example/ValPattern#
[2:17..2:17):  <= example/ValPattern#`<init>`().
[4:7..4:11): left <= example/ValPattern#left.
[4:13..4:18): right <= example/ValPattern#right.
[5:6..5:10): Some => scala/Some.
[5:11..5:18): number1 <= example/ValPattern#number1.
[6:4..6:8): Some => scala/Some.
[8:7..8:14): leftVar <= example/ValPattern#leftVar().
[8:16..8:24): rightVar <= example/ValPattern#rightVar().
[9:6..9:10): Some => scala/Some.
[9:11..9:21): number1Var <= example/ValPattern#number1Var.
[10:4..10:8): Some => scala/Some.
[12:6..12:9): app <= example/ValPattern#app().
[12:13..12:17): Unit => scala/Unit#
[13:4..13:11): println => scala/Predef.println(+1).
[15:8..15:15): number1 => example/ValPattern#number1.
[16:8..16:12): left => example/ValPattern#left.
[17:8..17:13): right => example/ValPattern#right.
[18:8..18:18): number1Var => example/ValPattern#number1Var().
[19:8..19:15): leftVar => example/ValPattern#leftVar().
[20:8..20:16): rightVar => example/ValPattern#rightVar().
[23:4..23:11): locally => scala/Predef.locally().
[24:11..24:15): left <= local7
[24:17..24:22): right <= local8
[25:10..25:14): Some => scala/Some.
[25:15..25:22): number1 <= local9
[26:8..26:12): Some => scala/Some.
[28:11..28:18): leftVar <= local12
[28:20..28:28): rightVar <= local13
[29:10..29:14): Some => scala/Some.
[29:15..29:25): number1Var <= local14
[30:8..30:12): Some => scala/Some.
[31:6..31:13): println => scala/Predef.println(+1).
[33:10..33:17): number1 => local9
[34:10..34:14): left => local7
[35:10..35:15): right => local8
[36:10..36:20): number1Var => local14
[37:10..37:17): leftVar => local12
[38:10..38:18): rightVar => local13

Synthetics:
[4:6..4:19): (left, right) => *.apply[Int, Int]
  apply => scala/Tuple2.apply().
  Int => scala/Int#
[6:4..6:8): Some => *.apply[Int]
  apply => scala/Some.apply().
  Int => scala/Int#
[8:6..8:25): (leftVar, rightVar) => *.apply[Int, Int]
  apply => scala/Tuple2.apply().
  Int => scala/Int#
[10:4..10:8): Some => *.apply[Int]
  apply => scala/Some.apply().
  Int => scala/Int#
[23:4..23:11): locally => *[Unit]
  Unit => scala/Unit#
[24:10..24:23): (left, right) => *.apply[Int, Int]
  apply => scala/Tuple2.apply().
  Int => scala/Int#
[26:8..26:12): Some => *.apply[Int]
  apply => scala/Some.apply().
  Int => scala/Int#
[28:10..28:29): (leftVar, rightVar) => *.apply[Int, Int]
  apply => scala/Tuple2.apply().
  Int => scala/Int#
[30:8..30:12): Some => *.apply[Int]
  apply => scala/Some.apply().
  Int => scala/Int#

semanticdb/integration/src/main/scala/example/Vals.scala
--------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Vals.scala
Text => non-empty
Language => Scala
Symbols => 40 entries
Occurrences => 117 entries

Symbols:
example/ValUsages. => final object ValUsages extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/ValUsages.v. => val method v: Vals
  Vals => example/Vals#
example/Vals# => abstract class Vals extends AnyRef { +23 decls }
  AnyRef => scala/AnyRef#
example/Vals#`<init>`(). => primary ctor <init>(p: Int, val xp: Int, var yp: Int)
  p => example/Vals#`<init>`().(p)
  Int => scala/Int#
  xp => example/Vals#`<init>`().(xp)
  yp => example/Vals#`<init>`().(yp)
example/Vals#`<init>`().(p) => param p: Int
  Int => scala/Int#
example/Vals#`<init>`().(xp) => val param xp: Int
  Int => scala/Int#
example/Vals#`<init>`().(yp) => var param yp: Int
  Int => scala/Int#
example/Vals#`yam_=`(). => abstract var method yam_=(x$1: Int): Unit
  x$1 => example/Vals#`yam_=`().(x$1)
  Int => scala/Int#
  Unit => scala/Unit#
example/Vals#`yam_=`().(x$1) => param x$1: Int
  Int => scala/Int#
example/Vals#`yfm_=`(). => final var method yfm_=(x$1: Int): Unit
  x$1 => example/Vals#`yfm_=`().(x$1)
  Int => scala/Int#
  Unit => scala/Unit#
example/Vals#`yfm_=`().(x$1) => param x$1: Int
  Int => scala/Int#
example/Vals#`yim_=`(). => var method yim_=(x$1: Int): Unit
  x$1 => example/Vals#`yim_=`().(x$1)
  Int => scala/Int#
  Unit => scala/Unit#
example/Vals#`yim_=`().(x$1) => param x$1: Int
  Int => scala/Int#
example/Vals#`ylm_=`(). => private[this] var method ylm_=(x$1: Int): Unit
  x$1 => example/Vals#`ylm_=`().(x$1)
  Int => scala/Int#
  Unit => scala/Unit#
example/Vals#`ylm_=`().(x$1) => param x$1: Int
  Int => scala/Int#
example/Vals#`ym_=`(). => var method ym_=(x$1: Int): Unit
  x$1 => example/Vals#`ym_=`().(x$1)
  Int => scala/Int#
  Unit => scala/Unit#
example/Vals#`ym_=`().(x$1) => param x$1: Int
  Int => scala/Int#
example/Vals#`yp_=`(). => var method yp_=(x$1: Int): Unit
  x$1 => example/Vals#`yp_=`().(x$1)
  Int => scala/Int#
  Unit => scala/Unit#
example/Vals#`yp_=`().(x$1) => param x$1: Int
  Int => scala/Int#
example/Vals#m(). => method m: Unit
  Unit => scala/Unit#
example/Vals#p. => private[this] val method p: Int
  Int => scala/Int#
example/Vals#xam. => abstract val method xam: Int
  Int => scala/Int#
example/Vals#xfm. => final val method xfm: Int
  Int => scala/Int#
example/Vals#xim. => implicit val method xim: Int
  Int => scala/Int#
example/Vals#xlm. => private[this] val method xlm: Int
  Int => scala/Int#
example/Vals#xm. => val method xm: Int
  Int => scala/Int#
example/Vals#xp. => val method xp: Int
  Int => scala/Int#
example/Vals#xzlm. => private[this] lazy val method xzlm: Int
  Int => scala/Int#
example/Vals#xzm. => lazy val method xzm: Int
  Int => scala/Int#
example/Vals#yam(). => abstract var method yam: Int
  Int => scala/Int#
example/Vals#yfm(). => final var method yfm: Int
  Int => scala/Int#
example/Vals#yim(). => implicit var method yim: Int
  Int => scala/Int#
example/Vals#ylm(). => private[this] var method ylm: Int
  Int => scala/Int#
example/Vals#ym(). => var method ym: Int
  Int => scala/Int#
example/Vals#yp(). => var method yp: Int
  Int => scala/Int#
local0 => val local xl: Int
  Int => scala/Int#
local1 => lazy val local xzl: : Int
  Int => scala/Int#
local2 => implicit val local xil: Int
  Int => scala/Int#
local3 => var local yl: Int
  Int => scala/Int#
local4 => implicit var local yil: Int
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:15..2:19): Vals <= example/Vals#
[2:19..2:19):  <= example/Vals#`<init>`().
[2:20..2:21): p <= example/Vals#p.
[2:23..2:26): Int => scala/Int#
[2:32..2:34): xp <= example/Vals#xp.
[2:36..2:39): Int => scala/Int#
[2:45..2:47): yp <= example/Vals#yp().
[2:49..2:52): Int => scala/Int#
[3:6..3:8): xm <= example/Vals#xm.
[3:10..3:13): Int => scala/Int#
[3:16..3:19): ??? => scala/Predef.`???`().
[4:6..4:9): xam <= example/Vals#xam.
[4:11..4:14): Int => scala/Int#
[5:20..5:23): xlm <= example/Vals#xlm.
[5:25..5:28): Int => scala/Int#
[5:31..5:34): ??? => scala/Predef.`???`().
[6:11..6:14): xzm <= example/Vals#xzm.
[6:16..6:19): Int => scala/Int#
[6:22..6:25): ??? => scala/Predef.`???`().
[7:25..7:29): xzlm <= example/Vals#xzlm.
[7:31..7:34): Int => scala/Int#
[7:37..7:40): ??? => scala/Predef.`???`().
[8:12..8:15): xfm <= example/Vals#xfm.
[8:17..8:20): Int => scala/Int#
[8:23..8:26): ??? => scala/Predef.`???`().
[9:15..9:18): xim <= example/Vals#xim.
[9:20..9:23): Int => scala/Int#
[9:26..9:29): ??? => scala/Predef.`???`().
[10:6..10:8): ym <= example/Vals#ym().
[10:10..10:13): Int => scala/Int#
[10:16..10:19): ??? => scala/Predef.`???`().
[11:6..11:9): yam <= example/Vals#yam().
[11:11..11:14): Int => scala/Int#
[12:20..12:23): ylm <= example/Vals#ylm().
[12:25..12:28): Int => scala/Int#
[12:31..12:34): ??? => scala/Predef.`???`().
[16:12..16:15): yfm <= example/Vals#yfm().
[16:17..16:20): Int => scala/Int#
[16:23..16:26): ??? => scala/Predef.`???`().
[17:15..17:18): yim <= example/Vals#yim().
[17:20..17:23): Int => scala/Int#
[17:26..17:29): ??? => scala/Predef.`???`().
[18:6..18:7): m <= example/Vals#m().
[19:8..19:10): xl <= local0
[19:12..19:15): Int => scala/Int#
[19:18..19:21): ??? => scala/Predef.`???`().
[20:13..20:16): xzl <= local1
[20:18..20:21): Int => scala/Int#
[20:24..20:27): ??? => scala/Predef.`???`().
[23:17..23:20): xil <= local2
[23:22..23:25): Int => scala/Int#
[23:28..23:31): ??? => scala/Predef.`???`().
[24:8..24:10): yl <= local3
[24:12..24:15): Int => scala/Int#
[24:18..24:21): ??? => scala/Predef.`???`().
[29:17..29:20): yil <= local4
[29:22..29:25): Int => scala/Int#
[29:28..29:31): ??? => scala/Predef.`???`().
[30:4..30:6): yl => local3
[30:9..30:11): xl => local0
[30:12..30:13): + => scala/Int#`+`(+4).
[30:14..30:16): yl => local3
[31:4..31:11): println => scala/Predef.println(+1).
[31:12..31:15): xzl => local1
[32:4..32:7): yil => local4
[32:10..32:13): xil => local2
[32:14..32:15): + => scala/Int#`+`(+4).
[32:16..32:19): yil => local4
[34:2..34:9): println => scala/Predef.println(+1).
[34:10..34:14): xzlm => example/Vals#xzlm.
[35:2..35:5): ylm => example/Vals#ylm().
[35:8..35:11): xlm => example/Vals#xlm.
[35:12..35:13): + => scala/Int#`+`(+4).
[35:14..35:17): ylm => example/Vals#ylm().
[38:7..38:16): ValUsages <= example/ValUsages.
[39:6..39:7): v <= example/ValUsages.v.
[39:9..39:13): Vals => example/Vals#
[39:16..39:19): ??? => scala/Predef.`???`().
[40:2..40:3): v => example/ValUsages.v.
[40:4..40:6): yp => example/Vals#`yp_=`().
[40:9..40:10): v => example/ValUsages.v.
[40:11..40:13): xp => example/Vals#xp.
[40:14..40:15): + => scala/Int#`+`(+4).
[40:16..40:17): v => example/ValUsages.v.
[40:18..40:20): yp => example/Vals#yp().
[41:2..41:3): v => example/ValUsages.v.
[41:4..41:6): ym => example/Vals#`ym_=`().
[41:9..41:10): v => example/ValUsages.v.
[41:11..41:13): xm => example/Vals#xm.
[41:14..41:15): + => scala/Int#`+`(+4).
[41:16..41:17): v => example/ValUsages.v.
[41:18..41:20): ym => example/Vals#ym().
[42:2..42:3): v => example/ValUsages.v.
[42:4..42:7): yam => example/Vals#`yam_=`().
[42:10..42:11): v => example/ValUsages.v.
[42:12..42:15): xam => example/Vals#xam.
[42:16..42:17): + => scala/Int#`+`(+4).
[42:18..42:19): v => example/ValUsages.v.
[42:20..42:23): yam => example/Vals#yam().
[43:2..43:9): println => scala/Predef.println(+1).
[43:10..43:11): v => example/ValUsages.v.
[43:12..43:15): xzm => example/Vals#xzm.
[44:2..44:3): v => example/ValUsages.v.
[44:4..44:7): yfm => example/Vals#`yfm_=`().
[44:10..44:11): v => example/ValUsages.v.
[44:12..44:15): xfm => example/Vals#xfm.
[44:16..44:17): + => scala/Int#`+`(+4).
[44:18..44:19): v => example/ValUsages.v.
[44:20..44:23): yfm => example/Vals#yfm().
[45:2..45:3): v => example/ValUsages.v.
[45:4..45:7): yim => example/Vals#`yim_=`().
[45:10..45:11): v => example/ValUsages.v.
[45:12..45:15): xim => example/Vals#xim.
[45:16..45:17): + => scala/Int#`+`(+4).
[45:18..45:19): v => example/ValUsages.v.
[45:20..45:23): yim => example/Vals#yim().

semanticdb/integration/src/main/scala/example/Vararg.scala
----------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/Vararg.scala
Text => non-empty
Language => Scala
Symbols => 6 entries
Occurrences => 11 entries

Symbols:
example/Vararg# => class Vararg extends AnyRef { +3 decls }
  AnyRef => scala/AnyRef#
example/Vararg#`<init>`(). => primary ctor <init>()
example/Vararg#add1(). => method add1(a: Int*): Unit
  a => example/Vararg#add1().(a)
  Int => scala/Int#
  Unit => scala/Unit#
example/Vararg#add1().(a) => param a: Int*
  Int => scala/Int#
example/Vararg#add2(). => method add2(a: Seq[Int]*): Unit
  a => example/Vararg#add2().(a)
  Seq => scala/package.Seq#
  Int => scala/Int#
  Unit => scala/Unit#
example/Vararg#add2().(a) => param a: Seq[Int]*
  Seq => scala/package.Seq#
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:6..2:12): Vararg <= example/Vararg#
[2:13..2:13):  <= example/Vararg#`<init>`().
[3:6..3:10): add1 <= example/Vararg#add1().
[3:11..3:12): a <= example/Vararg#add1().(a)
[3:14..3:17): Int => scala/Int#
[4:6..4:10): add2 <= example/Vararg#add2().
[4:11..4:12): a <= example/Vararg#add2().(a)
[4:14..4:17): Seq => scala/collection/immutable/Seq#
[4:18..4:21): Int => scala/Int#
[4:26..4:30): Unit => scala/Unit#

semanticdb/integration/src/main/scala/example/XmaxWarn.scala
------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/XmaxWarn.scala
Text => non-empty
Language => Scala
Symbols => 104 entries
Occurrences => 210 entries

Symbols:
example/T# => trait T extends AnyRef { +101 decls }
  AnyRef => scala/AnyRef#
example/T#`1`(). => method 1: Int
  Int => scala/Int#
example/T#`2`(). => method 2: Int
  Int => scala/Int#
example/T#`3`(). => method 3: Int
  Int => scala/Int#
example/T#`4`(). => method 4: Int
  Int => scala/Int#
example/T#`5`(). => method 5: Int
  Int => scala/Int#
example/T#`6`(). => method 6: Int
  Int => scala/Int#
example/T#`7`(). => method 7: Int
  Int => scala/Int#
example/T#`8`(). => method 8: Int
  Int => scala/Int#
example/T#`9`(). => method 9: Int
  Int => scala/Int#
example/T#`10`(). => method 10: Int
  Int => scala/Int#
example/T#`11`(). => method 11: Int
  Int => scala/Int#
example/T#`12`(). => method 12: Int
  Int => scala/Int#
example/T#`13`(). => method 13: Int
  Int => scala/Int#
example/T#`14`(). => method 14: Int
  Int => scala/Int#
example/T#`15`(). => method 15: Int
  Int => scala/Int#
example/T#`16`(). => method 16: Int
  Int => scala/Int#
example/T#`17`(). => method 17: Int
  Int => scala/Int#
example/T#`18`(). => method 18: Int
  Int => scala/Int#
example/T#`19`(). => method 19: Int
  Int => scala/Int#
example/T#`20`(). => method 20: Int
  Int => scala/Int#
example/T#`21`(). => method 21: Int
  Int => scala/Int#
example/T#`22`(). => method 22: Int
  Int => scala/Int#
example/T#`23`(). => method 23: Int
  Int => scala/Int#
example/T#`24`(). => method 24: Int
  Int => scala/Int#
example/T#`25`(). => method 25: Int
  Int => scala/Int#
example/T#`26`(). => method 26: Int
  Int => scala/Int#
example/T#`27`(). => method 27: Int
  Int => scala/Int#
example/T#`28`(). => method 28: Int
  Int => scala/Int#
example/T#`29`(). => method 29: Int
  Int => scala/Int#
example/T#`30`(). => method 30: Int
  Int => scala/Int#
example/T#`31`(). => method 31: Int
  Int => scala/Int#
example/T#`32`(). => method 32: Int
  Int => scala/Int#
example/T#`33`(). => method 33: Int
  Int => scala/Int#
example/T#`34`(). => method 34: Int
  Int => scala/Int#
example/T#`35`(). => method 35: Int
  Int => scala/Int#
example/T#`36`(). => method 36: Int
  Int => scala/Int#
example/T#`37`(). => method 37: Int
  Int => scala/Int#
example/T#`38`(). => method 38: Int
  Int => scala/Int#
example/T#`39`(). => method 39: Int
  Int => scala/Int#
example/T#`40`(). => method 40: Int
  Int => scala/Int#
example/T#`41`(). => method 41: Int
  Int => scala/Int#
example/T#`42`(). => method 42: Int
  Int => scala/Int#
example/T#`43`(). => method 43: Int
  Int => scala/Int#
example/T#`44`(). => method 44: Int
  Int => scala/Int#
example/T#`45`(). => method 45: Int
  Int => scala/Int#
example/T#`46`(). => method 46: Int
  Int => scala/Int#
example/T#`47`(). => method 47: Int
  Int => scala/Int#
example/T#`48`(). => method 48: Int
  Int => scala/Int#
example/T#`49`(). => method 49: Int
  Int => scala/Int#
example/T#`50`(). => method 50: Int
  Int => scala/Int#
example/T#`51`(). => method 51: Int
  Int => scala/Int#
example/T#`52`(). => method 52: Int
  Int => scala/Int#
example/T#`53`(). => method 53: Int
  Int => scala/Int#
example/T#`54`(). => method 54: Int
  Int => scala/Int#
example/T#`55`(). => method 55: Int
  Int => scala/Int#
example/T#`56`(). => method 56: Int
  Int => scala/Int#
example/T#`57`(). => method 57: Int
  Int => scala/Int#
example/T#`58`(). => method 58: Int
  Int => scala/Int#
example/T#`59`(). => method 59: Int
  Int => scala/Int#
example/T#`60`(). => method 60: Int
  Int => scala/Int#
example/T#`61`(). => method 61: Int
  Int => scala/Int#
example/T#`62`(). => method 62: Int
  Int => scala/Int#
example/T#`63`(). => method 63: Int
  Int => scala/Int#
example/T#`64`(). => method 64: Int
  Int => scala/Int#
example/T#`65`(). => method 65: Int
  Int => scala/Int#
example/T#`66`(). => method 66: Int
  Int => scala/Int#
example/T#`67`(). => method 67: Int
  Int => scala/Int#
example/T#`68`(). => method 68: Int
  Int => scala/Int#
example/T#`69`(). => method 69: Int
  Int => scala/Int#
example/T#`70`(). => method 70: Int
  Int => scala/Int#
example/T#`71`(). => method 71: Int
  Int => scala/Int#
example/T#`72`(). => method 72: Int
  Int => scala/Int#
example/T#`73`(). => method 73: Int
  Int => scala/Int#
example/T#`74`(). => method 74: Int
  Int => scala/Int#
example/T#`75`(). => method 75: Int
  Int => scala/Int#
example/T#`76`(). => method 76: Int
  Int => scala/Int#
example/T#`77`(). => method 77: Int
  Int => scala/Int#
example/T#`78`(). => method 78: Int
  Int => scala/Int#
example/T#`79`(). => method 79: Int
  Int => scala/Int#
example/T#`80`(). => method 80: Int
  Int => scala/Int#
example/T#`81`(). => method 81: Int
  Int => scala/Int#
example/T#`82`(). => method 82: Int
  Int => scala/Int#
example/T#`83`(). => method 83: Int
  Int => scala/Int#
example/T#`84`(). => method 84: Int
  Int => scala/Int#
example/T#`85`(). => method 85: Int
  Int => scala/Int#
example/T#`86`(). => method 86: Int
  Int => scala/Int#
example/T#`87`(). => method 87: Int
  Int => scala/Int#
example/T#`88`(). => method 88: Int
  Int => scala/Int#
example/T#`89`(). => method 89: Int
  Int => scala/Int#
example/T#`90`(). => method 90: Int
  Int => scala/Int#
example/T#`91`(). => method 91: Int
  Int => scala/Int#
example/T#`92`(). => method 92: Int
  Int => scala/Int#
example/T#`93`(). => method 93: Int
  Int => scala/Int#
example/T#`94`(). => method 94: Int
  Int => scala/Int#
example/T#`95`(). => method 95: Int
  Int => scala/Int#
example/T#`96`(). => method 96: Int
  Int => scala/Int#
example/T#`97`(). => method 97: Int
  Int => scala/Int#
example/T#`98`(). => method 98: Int
  Int => scala/Int#
example/T#`99`(). => method 99: Int
  Int => scala/Int#
example/T#`100`(). => method 100: Int
  Int => scala/Int#
example/T#`101`(). => method 101: Int
  Int => scala/Int#
example/X. => final object X extends AnyRef { +1 decls }
  AnyRef => scala/AnyRef#
example/X.x(). => @deprecated method x: Int
  deprecated => scala/deprecated#
  Int => scala/Int#

Occurrences:
[0:8..0:15): example <= example/
[2:7..2:8): X <= example/X.
[3:3..3:13): deprecated => scala/deprecated#
[3:13..3:13):  => scala/deprecated#`<init>`().
[3:35..3:40): since => scala/deprecated#`<init>`().(since)
[4:6..4:7): x <= example/X.x().
[7:6..7:7): T <= example/T#
[9:9..9:10): X => example/X.
[10:6..10:9): `1` <= example/T#`1`().
[10:12..10:13): x => example/X.x().
[11:6..11:9): `2` <= example/T#`2`().
[11:12..11:13): x => example/X.x().
[12:6..12:9): `3` <= example/T#`3`().
[12:12..12:13): x => example/X.x().
[13:6..13:9): `4` <= example/T#`4`().
[13:12..13:13): x => example/X.x().
[14:6..14:9): `5` <= example/T#`5`().
[14:12..14:13): x => example/X.x().
[15:6..15:9): `6` <= example/T#`6`().
[15:12..15:13): x => example/X.x().
[16:6..16:9): `7` <= example/T#`7`().
[16:12..16:13): x => example/X.x().
[17:6..17:9): `8` <= example/T#`8`().
[17:12..17:13): x => example/X.x().
[18:6..18:9): `9` <= example/T#`9`().
[18:12..18:13): x => example/X.x().
[19:6..19:10): `10` <= example/T#`10`().
[19:13..19:14): x => example/X.x().
[20:6..20:10): `11` <= example/T#`11`().
[20:13..20:14): x => example/X.x().
[21:6..21:10): `12` <= example/T#`12`().
[21:13..21:14): x => example/X.x().
[22:6..22:10): `13` <= example/T#`13`().
[22:13..22:14): x => example/X.x().
[23:6..23:10): `14` <= example/T#`14`().
[23:13..23:14): x => example/X.x().
[24:6..24:10): `15` <= example/T#`15`().
[24:13..24:14): x => example/X.x().
[25:6..25:10): `16` <= example/T#`16`().
[25:13..25:14): x => example/X.x().
[26:6..26:10): `17` <= example/T#`17`().
[26:13..26:14): x => example/X.x().
[27:6..27:10): `18` <= example/T#`18`().
[27:13..27:14): x => example/X.x().
[28:6..28:10): `19` <= example/T#`19`().
[28:13..28:14): x => example/X.x().
[29:6..29:10): `20` <= example/T#`20`().
[29:13..29:14): x => example/X.x().
[30:6..30:10): `21` <= example/T#`21`().
[30:13..30:14): x => example/X.x().
[31:6..31:10): `22` <= example/T#`22`().
[31:13..31:14): x => example/X.x().
[32:6..32:10): `23` <= example/T#`23`().
[32:13..32:14): x => example/X.x().
[33:6..33:10): `24` <= example/T#`24`().
[33:13..33:14): x => example/X.x().
[34:6..34:10): `25` <= example/T#`25`().
[34:13..34:14): x => example/X.x().
[35:6..35:10): `26` <= example/T#`26`().
[35:13..35:14): x => example/X.x().
[36:6..36:10): `27` <= example/T#`27`().
[36:13..36:14): x => example/X.x().
[37:6..37:10): `28` <= example/T#`28`().
[37:13..37:14): x => example/X.x().
[38:6..38:10): `29` <= example/T#`29`().
[38:13..38:14): x => example/X.x().
[39:6..39:10): `30` <= example/T#`30`().
[39:13..39:14): x => example/X.x().
[40:6..40:10): `31` <= example/T#`31`().
[40:13..40:14): x => example/X.x().
[41:6..41:10): `32` <= example/T#`32`().
[41:13..41:14): x => example/X.x().
[42:6..42:10): `33` <= example/T#`33`().
[42:13..42:14): x => example/X.x().
[43:6..43:10): `34` <= example/T#`34`().
[43:13..43:14): x => example/X.x().
[44:6..44:10): `35` <= example/T#`35`().
[44:13..44:14): x => example/X.x().
[45:6..45:10): `36` <= example/T#`36`().
[45:13..45:14): x => example/X.x().
[46:6..46:10): `37` <= example/T#`37`().
[46:13..46:14): x => example/X.x().
[47:6..47:10): `38` <= example/T#`38`().
[47:13..47:14): x => example/X.x().
[48:6..48:10): `39` <= example/T#`39`().
[48:13..48:14): x => example/X.x().
[49:6..49:10): `40` <= example/T#`40`().
[49:13..49:14): x => example/X.x().
[50:6..50:10): `41` <= example/T#`41`().
[50:13..50:14): x => example/X.x().
[51:6..51:10): `42` <= example/T#`42`().
[51:13..51:14): x => example/X.x().
[52:6..52:10): `43` <= example/T#`43`().
[52:13..52:14): x => example/X.x().
[53:6..53:10): `44` <= example/T#`44`().
[53:13..53:14): x => example/X.x().
[54:6..54:10): `45` <= example/T#`45`().
[54:13..54:14): x => example/X.x().
[55:6..55:10): `46` <= example/T#`46`().
[55:13..55:14): x => example/X.x().
[56:6..56:10): `47` <= example/T#`47`().
[56:13..56:14): x => example/X.x().
[57:6..57:10): `48` <= example/T#`48`().
[57:13..57:14): x => example/X.x().
[58:6..58:10): `49` <= example/T#`49`().
[58:13..58:14): x => example/X.x().
[59:6..59:10): `50` <= example/T#`50`().
[59:13..59:14): x => example/X.x().
[60:6..60:10): `51` <= example/T#`51`().
[60:13..60:14): x => example/X.x().
[61:6..61:10): `52` <= example/T#`52`().
[61:13..61:14): x => example/X.x().
[62:6..62:10): `53` <= example/T#`53`().
[62:13..62:14): x => example/X.x().
[63:6..63:10): `54` <= example/T#`54`().
[63:13..63:14): x => example/X.x().
[64:6..64:10): `55` <= example/T#`55`().
[64:13..64:14): x => example/X.x().
[65:6..65:10): `56` <= example/T#`56`().
[65:13..65:14): x => example/X.x().
[66:6..66:10): `57` <= example/T#`57`().
[66:13..66:14): x => example/X.x().
[67:6..67:10): `58` <= example/T#`58`().
[67:13..67:14): x => example/X.x().
[68:6..68:10): `59` <= example/T#`59`().
[68:13..68:14): x => example/X.x().
[69:6..69:10): `60` <= example/T#`60`().
[69:13..69:14): x => example/X.x().
[70:6..70:10): `61` <= example/T#`61`().
[70:13..70:14): x => example/X.x().
[71:6..71:10): `62` <= example/T#`62`().
[71:13..71:14): x => example/X.x().
[72:6..72:10): `63` <= example/T#`63`().
[72:13..72:14): x => example/X.x().
[73:6..73:10): `64` <= example/T#`64`().
[73:13..73:14): x => example/X.x().
[74:6..74:10): `65` <= example/T#`65`().
[74:13..74:14): x => example/X.x().
[75:6..75:10): `66` <= example/T#`66`().
[75:13..75:14): x => example/X.x().
[76:6..76:10): `67` <= example/T#`67`().
[76:13..76:14): x => example/X.x().
[77:6..77:10): `68` <= example/T#`68`().
[77:13..77:14): x => example/X.x().
[78:6..78:10): `69` <= example/T#`69`().
[78:13..78:14): x => example/X.x().
[79:6..79:10): `70` <= example/T#`70`().
[79:13..79:14): x => example/X.x().
[80:6..80:10): `71` <= example/T#`71`().
[80:13..80:14): x => example/X.x().
[81:6..81:10): `72` <= example/T#`72`().
[81:13..81:14): x => example/X.x().
[82:6..82:10): `73` <= example/T#`73`().
[82:13..82:14): x => example/X.x().
[83:6..83:10): `74` <= example/T#`74`().
[83:13..83:14): x => example/X.x().
[84:6..84:10): `75` <= example/T#`75`().
[84:13..84:14): x => example/X.x().
[85:6..85:10): `76` <= example/T#`76`().
[85:13..85:14): x => example/X.x().
[86:6..86:10): `77` <= example/T#`77`().
[86:13..86:14): x => example/X.x().
[87:6..87:10): `78` <= example/T#`78`().
[87:13..87:14): x => example/X.x().
[88:6..88:10): `79` <= example/T#`79`().
[88:13..88:14): x => example/X.x().
[89:6..89:10): `80` <= example/T#`80`().
[89:13..89:14): x => example/X.x().
[90:6..90:10): `81` <= example/T#`81`().
[90:13..90:14): x => example/X.x().
[91:6..91:10): `82` <= example/T#`82`().
[91:13..91:14): x => example/X.x().
[92:6..92:10): `83` <= example/T#`83`().
[92:13..92:14): x => example/X.x().
[93:6..93:10): `84` <= example/T#`84`().
[93:13..93:14): x => example/X.x().
[94:6..94:10): `85` <= example/T#`85`().
[94:13..94:14): x => example/X.x().
[95:6..95:10): `86` <= example/T#`86`().
[95:13..95:14): x => example/X.x().
[96:6..96:10): `87` <= example/T#`87`().
[96:13..96:14): x => example/X.x().
[97:6..97:10): `88` <= example/T#`88`().
[97:13..97:14): x => example/X.x().
[98:6..98:10): `89` <= example/T#`89`().
[98:13..98:14): x => example/X.x().
[99:6..99:10): `90` <= example/T#`90`().
[99:13..99:14): x => example/X.x().
[100:6..100:10): `91` <= example/T#`91`().
[100:13..100:14): x => example/X.x().
[101:6..101:10): `92` <= example/T#`92`().
[101:13..101:14): x => example/X.x().
[102:6..102:10): `93` <= example/T#`93`().
[102:13..102:14): x => example/X.x().
[103:6..103:10): `94` <= example/T#`94`().
[103:13..103:14): x => example/X.x().
[104:6..104:10): `95` <= example/T#`95`().
[104:13..104:14): x => example/X.x().
[105:6..105:10): `96` <= example/T#`96`().
[105:13..105:14): x => example/X.x().
[106:6..106:10): `97` <= example/T#`97`().
[106:13..106:14): x => example/X.x().
[107:6..107:10): `98` <= example/T#`98`().
[107:13..107:14): x => example/X.x().
[108:6..108:10): `99` <= example/T#`99`().
[108:13..108:14): x => example/X.x().
[109:6..109:11): `100` <= example/T#`100`().
[109:14..109:15): x => example/X.x().
[110:6..110:11): `101` <= example/T#`101`().
[110:14..110:15): x => example/X.x().
semanticdb/integration/src/main/scala/example/XmaxWarn.scala
------------------------------------------------------------

Summary:
Schema => SemanticDB v4
Uri => semanticdb/integration/src/main/scala/example/XmaxWarn.scala
Text => empty
Language => Scala
Diagnostics => 101 entries

Diagnostics:
[10:12..10:13) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[11:12..11:13) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[12:12..12:13) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[13:12..13:13) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[14:12..14:13) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[15:12..15:13) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[16:12..16:13) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[17:12..17:13) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[18:12..18:13) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[19:13..19:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[20:13..20:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[21:13..21:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[22:13..22:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[23:13..23:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[24:13..24:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[25:13..25:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[26:13..26:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[27:13..27:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[28:13..28:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[29:13..29:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[30:13..30:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[31:13..31:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[32:13..32:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[33:13..33:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[34:13..34:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[35:13..35:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[36:13..36:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[37:13..37:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[38:13..38:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[39:13..39:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[40:13..40:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[41:13..41:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[42:13..42:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[43:13..43:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[44:13..44:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[45:13..45:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[46:13..46:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[47:13..47:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[48:13..48:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[49:13..49:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[50:13..50:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[51:13..51:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[52:13..52:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[53:13..53:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[54:13..54:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[55:13..55:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[56:13..56:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[57:13..57:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[58:13..58:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[59:13..59:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[60:13..60:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[61:13..61:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[62:13..62:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[63:13..63:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[64:13..64:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[65:13..65:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[66:13..66:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[67:13..67:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[68:13..68:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[69:13..69:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[70:13..70:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[71:13..71:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[72:13..72:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[73:13..73:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[74:13..74:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[75:13..75:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[76:13..76:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[77:13..77:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[78:13..78:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[79:13..79:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[80:13..80:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[81:13..81:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[82:13..82:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[83:13..83:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[84:13..84:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[85:13..85:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[86:13..86:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[87:13..87:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[88:13..88:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[89:13..89:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[90:13..90:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[91:13..91:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[92:13..92:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[93:13..93:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[94:13..94:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[95:13..95:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[96:13..96:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[97:13..97:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[98:13..98:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[99:13..99:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[100:13..100:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[101:13..101:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[102:13..102:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[103:13..103:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[104:13..104:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[105:13..105:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[106:13..106:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[107:13..107:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[108:13..108:14) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[109:14..109:15) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
[110:14..110:15) [warning] method x in object X is deprecated (since forever): to test -Xmaxwarn
