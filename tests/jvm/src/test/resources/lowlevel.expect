semanticdb/integration/src/main/scala/example/Accessibility.scala
-----------------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/Accessibility.scala
Text => non-empty
Language => Scala
Symbols => 11 entries
Occurrences => 19 entries

Symbols:
example. => package example
example.Acc# => class Acc.{+8 decls}
  extends AnyRef
example.Acc#`<init>`(). => primary ctor <init>: (): Acc
  Acc => example.Acc#
example.Acc#m1(). => private method m1: : Nothing
  Nothing => scala.Nothing#
example.Acc#m2(). => private[this] method m2: : Nothing
  Nothing => scala.Nothing#
example.Acc#m3(). => private[Acc] method m3: : Nothing
  Nothing => scala.Nothing#
example.Acc#m4(). => protected method m4: : Nothing
  Nothing => scala.Nothing#
example.Acc#m5(). => protected[this] method m5: : Nothing
  Nothing => scala.Nothing#
example.Acc#m6(). => protected[example] method m6: : Nothing
  Nothing => scala.Nothing#
example.Acc#m7(). => method m7: : Nothing
  Nothing => scala.Nothing#
scala.Predef.`???`(). => method ???: : Nothing
  Nothing => scala.Nothing#

Occurrences:
[0:8..0:15): example <= example.
[2:6..2:9): Acc <= example.Acc#
[2:10..2:10):  <= example.Acc#`<init>`().
[3:14..3:16): m1 <= example.Acc#m1().
[3:19..3:22): ??? => scala.Predef.`???`().
[4:20..4:22): m2 <= example.Acc#m2().
[4:25..4:28): ??? => scala.Predef.`???`().
[5:10..5:13): Acc => example.Acc#
[5:19..5:21): m3 <= example.Acc#m3().
[5:24..5:27): ??? => scala.Predef.`???`().
[6:16..6:18): m4 <= example.Acc#m4().
[6:21..6:24): ??? => scala.Predef.`???`().
[7:22..7:24): m5 <= example.Acc#m5().
[7:27..7:30): ??? => scala.Predef.`???`().
[8:12..8:19): example => example.
[8:25..8:27): m6 <= example.Acc#m6().
[8:30..8:33): ??? => scala.Predef.`???`().
[9:6..9:8): m7 <= example.Acc#m7().
[9:11..9:14): ??? => scala.Predef.`???`().

semanticdb/integration/src/main/scala/example/Empty.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/Empty.scala
Text => non-empty
Language => Scala
Symbols => 7 entries
Occurrences => 10 entries

Symbols:
_empty_.A# => class A.{+2 decls}
  extends AnyRef
_empty_.A#`<init>`(). => primary ctor <init>: (): A
  A => _empty_.A#
_empty_.A#b(). => method b: : B
  B => _empty_.B#
_empty_.B# => class B.{+2 decls}
  extends AnyRef
_empty_.B#`<init>`(). => primary ctor <init>: (): B
  B => _empty_.B#
_empty_.B#a(). => method a: : A
  A => _empty_.A#
scala.Predef.`???`(). => method ???: : Nothing
  Nothing => scala.Nothing#

Occurrences:
[0:6..0:7): A <= _empty_.A#
[0:8..0:8):  <= _empty_.A#`<init>`().
[1:6..1:7): b <= _empty_.A#b().
[1:9..1:10): B => _empty_.B#
[1:13..1:16): ??? => scala.Predef.`???`().
[4:6..4:7): B <= _empty_.B#
[4:8..4:8):  <= _empty_.B#`<init>`().
[5:6..5:7): a <= _empty_.B#a().
[5:9..5:10): A => _empty_.A#
[5:13..5:16): ??? => scala.Predef.`???`().

semanticdb/integration/src/main/scala/example/Example.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/Example.scala
Text => non-empty
Language => Scala
Symbols => 20 entries
Occurrences => 24 entries
Diagnostics => 1 entries
Synthetics => 1 entries

Symbols:
example. => package example
example.Example. => final object Example
example.Example.main(Array). => method main: (args: Array[String]): Unit
  args => example.Example.main(Array).(args)
  Array => scala.Array#
  String => scala.Predef.String#
  Unit => scala.Unit#
example.Example.main(Array).(args) => param args: Array[String]
  Array => scala.Array#
  String => scala.Predef.String#
example.Example.x(). => val method x: : ClassTag[Int]
  ClassTag => scala.reflect.ClassTag#
  Int => scala.Int#
example.Example.x. => private[this] val field x: ClassTag[Int]
  ClassTag => scala.reflect.ClassTag#
  Int => scala.Int#
local0 => synthetic selfparam self: Example
  Example => example.Example.
scala. => package scala
scala.Array# => final class Array[T: <?>].{+6 decls}
  extends AnyRef
  extends Serializable
  extends Cloneable
scala.Int# => abstract final class Int.{+111 decls}
  extends AnyVal
scala.Predef.String# => type String: >: String <: String
  String => java.lang.String#
scala.Predef.println(Any). => method println: (x: <?>): Unit
  x => scala.Predef.println(Any).(x)
  Unit => scala.Unit#
scala.Unit# => abstract final class Unit.{+2 decls}
  extends AnyVal
scala.collection. => package collection
scala.collection.mutable. => package mutable
scala.collection.mutable.Stack# => @deprecated @deprecated class Stack[A: <?>].{+20 decls}
  extends AbstractSeq[A]
  extends Seq[A]
  extends SeqLike[A, Stack[A]]
  extends GenericTraversableTemplate[A, Stack]
  extends Cloneable[Stack[A]]
  extends Serializable
scala.collection.mutable.Stack#`<init>`(). => ctor <init>: (): Stack[A]
  Stack => scala.collection.mutable.Stack#
  A => scala.collection.mutable.Stack#[A]
scala.concurrent. => package concurrent
scala.reflect. => package reflect
scala.reflect.package.classTag(ClassTag). => method classTag: [T: <?>] => (ctag: <?>): ClassTag[T]
  T => scala.reflect.package.classTag(ClassTag).[T]
  ctag => scala.reflect.package.classTag(ClassTag).(ctag)
  ClassTag => scala.reflect.ClassTag#

Occurrences:
[0:8..0:15): example <= example.
[2:7..2:12): scala => scala.
[2:13..2:23): concurrent => scala.concurrent.
[2:24..2:30): Future => scala.concurrent.Future#
[2:24..2:30): Future => scala.concurrent.Future.
[4:7..4:14): Example <= example.Example.
[4:17..4:21): self <= local0
[5:6..5:11): scala => scala.
[5:12..5:22): collection => scala.collection.
[5:23..5:30): mutable => scala.collection.mutable.
[5:31..5:36): Stack => scala.collection.mutable.Stack#
[5:37..5:40): Int => scala.Int#
[5:41..5:41):  => scala.collection.mutable.Stack#`<init>`().
[6:6..6:10): main <= example.Example.main(Array).
[6:11..6:15): args <= example.Example.main(Array).(args)
[6:17..6:22): Array => scala.Array#
[6:23..6:29): String => scala.Predef.String#
[6:33..6:37): Unit => scala.Unit#
[7:4..7:11): println => scala.Predef.println(Any).
[9:6..9:7): x <= example.Example.x().
[9:10..9:15): scala => scala.
[9:16..9:23): reflect => scala.reflect.
[9:24..9:32): classTag => scala.reflect.package.classTag(ClassTag).
[9:33..9:36): Int => scala.Int#

Diagnostics:
[2:24..2:30)[warning] Unused import

Synthetics:
[9:37..9:37):  => *(((ClassTag.Int): ClassTag[Int]))
  [0:0..0:1): * => _star_.
  [0:13..0:16): Int => scala.reflect.ClassTag.Int().
  [0:19..0:27): ClassTag => scala.reflect.ClassTag#
  [0:28..0:31): Int => scala.Int#
semanticdb/integration/src/main/scala/example/Example.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/Example.scala
Text => empty
Language => Scala
Diagnostics => 1 entries

Diagnostics:
[5:6..5:41)[warning] class Stack in package mutable is deprecated (since 2.12.0): Stack is an inelegant and potentially poorly-performing wrapper around List. Use a List assigned to a var instead.

semanticdb/integration/src/main/scala/example/Flags.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/Flags.scala
Text => non-empty
Language => Scala
Symbols => 71 entries
Occurrences => 71 entries
Synthetics => 2 entries

Symbols:
flags. => package flags
flags.p.package. => package object package
flags.p.package.AA# => class AA.{+7 decls}
  extends AnyRef
flags.p.package.AA#`<init>`(Int,Int,Int). => primary ctor <init>: (x: Int, val y: Int, var z: Int): AA
  x => flags.p.package.AA#`<init>`(Int,Int,Int).(x)
  Int => scala.Int#
  y => flags.p.package.AA#`<init>`(Int,Int,Int).(y)
  z => flags.p.package.AA#`<init>`(Int,Int,Int).(z)
  AA => flags.p.package.AA#
flags.p.package.AA#`<init>`(Int,Int,Int).(x) => param x: Int
  Int => scala.Int#
flags.p.package.AA#`<init>`(Int,Int,Int).(y) => val param y: Int
  Int => scala.Int#
flags.p.package.AA#`<init>`(Int,Int,Int).(z) => var param z: Int
  Int => scala.Int#
flags.p.package.AA#`z_=`(Int). => var method z_=: (x$1: Int): Unit
  x$1 => flags.p.package.AA#`z_=`(Int).(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
flags.p.package.AA#`z_=`(Int).(x$1) => synthetic param x$1: Int
  Int => scala.Int#
flags.p.package.AA#x. => private[this] val field x: Int
  Int => scala.Int#
flags.p.package.AA#y(). => val method y: : Int
  Int => scala.Int#
flags.p.package.AA#y. => private[this] val field y: Int
  Int => scala.Int#
flags.p.package.AA#z(). => var method z: : Int
  Int => scala.Int#
flags.p.package.AA#z. => private[this] var field z: Int
  Int => scala.Int#
flags.p.package.C# => abstract class C[+T >: Nothing <: Any, -U >: Nothing <: Any, V >: Nothing <: Any].{+6 decls}
  extends AnyRef
flags.p.package.C#[T] => covariant typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
flags.p.package.C#[U] => contravariant typeparam U: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
flags.p.package.C#[V] => typeparam V: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
flags.p.package.C#`<init>`(). => ctor <init>: (): C[T, U, V]
  C => flags.p.package.C#
  T => flags.p.package.C#[T]
  U => flags.p.package.C#[U]
  V => flags.p.package.C#[V]
flags.p.package.C#`<init>`(T,U,V). => primary ctor <init>: (x: T, y: U, z: V): C[T, U, V]
  x => flags.p.package.C#`<init>`(T,U,V).(x)
  T => flags.p.package.C#[T]
  y => flags.p.package.C#`<init>`(T,U,V).(y)
  U => flags.p.package.C#[U]
  z => flags.p.package.C#`<init>`(T,U,V).(z)
  V => flags.p.package.C#[V]
  C => flags.p.package.C#
flags.p.package.C#`<init>`(T,U,V).(x) => param x: T
  T => flags.p.package.C#[T]
flags.p.package.C#`<init>`(T,U,V).(y) => param y: U
  U => flags.p.package.C#[U]
flags.p.package.C#`<init>`(T,U,V).(z) => param z: V
  V => flags.p.package.C#[V]
flags.p.package.C#w(). => abstract method w: : Int
  Int => scala.Int#
flags.p.package.C#x. => private[this] val field x: T
  T => flags.p.package.C#[T]
flags.p.package.C#y. => private[this] val field y: U
  U => flags.p.package.C#[U]
flags.p.package.C#z. => private[this] val field z: V
  V => flags.p.package.C#[V]
flags.p.package.S# => class S[@specialized T >: Nothing <: Any].{+1 decls}
  extends AnyRef
flags.p.package.S#[T] => @specialized typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
flags.p.package.S#`<init>`(). => primary ctor <init>: (): S[T]
  S => flags.p.package.S#
  T => flags.p.package.S#[T]
flags.p.package.T1# => type T1: >: Int <: Int
  Int => scala.Int#
flags.p.package.T2# => type T2: [T >: Nothing <: Any] => >: S[T] <: S[T]
  T => flags.p.package.T2#[T]
  Nothing => scala.Nothing#
  Any => scala.Any#
  S => flags.p.package.S#
flags.p.package.T2#[T] => typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
flags.p.package.U# => abstract type U: >: Nothing <: Int
  Nothing => scala.Nothing#
  Int => scala.Int#
flags.p.package.V# => abstract type V: >: Int <: Any
  Int => scala.Int#
  Any => scala.Any#
flags.p.package.X. => final case object X
flags.p.package.X.canEqual(Any). => synthetic method canEqual: (x$1: Any): Boolean
  x$1 => flags.p.package.X.canEqual(Any).(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
flags.p.package.X.canEqual(Any).(x$1) => synthetic param x$1: Any
  Any => scala.Any#
flags.p.package.X.hashCode(). => synthetic method hashCode: (): Int
  Int => scala.Int#
flags.p.package.X.productArity(). => synthetic method productArity: : Int
  Int => scala.Int#
flags.p.package.X.productElement(Int). => synthetic method productElement: (x$1: Int): Any
  x$1 => flags.p.package.X.productElement(Int).(x$1)
  Int => scala.Int#
  Any => scala.Any#
flags.p.package.X.productElement(Int).(x$1) => synthetic param x$1: Int
  Int => scala.Int#
flags.p.package.X.productIterator(). => synthetic method productIterator: : Iterator[Any]
  Iterator => scala.collection.Iterator#
  Any => scala.Any#
flags.p.package.X.productPrefix(). => synthetic method productPrefix: : String
  String => java.lang.String#
flags.p.package.X.readResolve(). => private synthetic method readResolve: (): Object
  Object => java.lang.Object#
flags.p.package.X.toString(). => synthetic method toString: (): String
  String => java.lang.String#
flags.p.package.Y# => final class Y.{+1 decls}
  extends AnyRef
flags.p.package.Y#`<init>`(). => primary ctor <init>: (): Y
  Y => flags.p.package.Y#
flags.p.package.Z# => sealed trait Z
  extends AnyRef
flags.p.package.`y_=`(Int). => protected var method y_=: (x$1: Int): Unit
  x$1 => flags.p.package.`y_=`(Int).(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
flags.p.package.`y_=`(Int).(x$1) => synthetic param x$1: Int
  Int => scala.Int#
flags.p.package.m(). => macro m: [TT >: Nothing <: Any] => : Nothing
  TT => flags.p.package.m().[TT]
  Nothing => scala.Nothing#
  Any => scala.Any#
flags.p.package.m().[TT] => typeparam TT: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
flags.p.package.x(). => private lazy val field x: Int
  Int => scala.Int#
flags.p.package.xs1.xs1. => val local xs1: Nothing
  Nothing => scala.Nothing#
flags.p.package.y(). => protected implicit var method y: : Int
  Int => scala.Int#
flags.p.package.y. => private[this] var field y: Int
  Int => scala.Int#
flags.p.package.z(Int). => method z: (pp: Int): Int
  pp => flags.p.package.z(Int).(pp)
  Int => scala.Int#
flags.p.package.z(Int).(pp) => param pp: Int
  Int => scala.Int#
local0 => val local xs2: Nothing
  Nothing => scala.Nothing#
local1 => abstract local t: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
scala. => package scala
scala.Int# => abstract final class Int.{+111 decls}
  extends AnyVal
scala.Predef.`???`(). => method ???: : Nothing
  Nothing => scala.Nothing#
scala.collection.immutable.List. => final object List
scala.language. => final object language
scala.language.experimental. => final object experimental
scala.language.experimental.macros(). => implicit lazy val field macros: macros
  macros => scala.languageFeature.experimental.macros#
scala.package.List# => type List: [A: <?>] => >: List[A] <: List[A]
  A => scala.package.List#[A]
  List => scala.collection.immutable.List#
scala.specialized# => class specialized.{+4 decls}
  extends Annotation
  extends StaticAnnotation
scala.specialized#`<init>`(). => ctor <init>: (): specialized
  specialized => scala.specialized#

Occurrences:
[0:8..0:13): flags <= flags.
[2:7..2:12): scala => scala.
[2:13..2:21): language => scala.language.
[2:22..2:34): experimental => scala.language.experimental.
[2:35..2:41): macros => scala.language.experimental.macros().
[4:15..4:16): p <= flags.p.package.
[5:19..5:20): x <= flags.p.package.x().
[6:25..6:26): y <= flags.p.package.y().
[6:28..6:31): Int => scala.Int#
[7:6..7:7): z <= flags.p.package.z(Int).
[7:8..7:10): pp <= flags.p.package.z(Int).(pp)
[7:12..7:15): Int => scala.Int#
[8:6..8:7): m <= flags.p.package.m().
[8:8..8:10): TT <= flags.p.package.m().[TT]
[8:20..8:23): ??? => scala.Predef.`???`().
[9:17..9:18): C <= flags.p.package.C#
[9:20..9:21): T <= flags.p.package.C#[T]
[9:24..9:25): U <= flags.p.package.C#[U]
[9:27..9:28): V <= flags.p.package.C#[V]
[9:29..9:29):  <= flags.p.package.C#`<init>`(T,U,V).
[9:30..9:31): x <= flags.p.package.C#x.
[9:33..9:34): T => flags.p.package.C#[T]
[9:36..9:37): y <= flags.p.package.C#y.
[9:39..9:40): U => flags.p.package.C#[U]
[9:42..9:43): z <= flags.p.package.C#z.
[9:45..9:46): V => flags.p.package.C#[V]
[10:8..10:12): this <= flags.p.package.C#`<init>`().
[10:21..10:21):  => flags.p.package.C#`<init>`(T,U,V).
[10:22..10:25): ??? => scala.Predef.`???`().
[10:27..10:30): ??? => scala.Predef.`???`().
[10:32..10:35): ??? => scala.Predef.`???`().
[11:8..11:9): w <= flags.p.package.C#w().
[11:11..11:14): Int => scala.Int#
[13:7..13:9): T1 <= flags.p.package.T1#
[13:12..13:15): Int => scala.Int#
[14:7..14:9): T2 <= flags.p.package.T2#
[14:10..14:11): T <= flags.p.package.T2#[T]
[14:15..14:16): S => flags.p.package.S#
[14:17..14:18): T => flags.p.package.T2#[T]
[15:7..15:8): U <= flags.p.package.U#
[15:12..15:15): Int => scala.Int#
[16:7..16:8): V <= flags.p.package.V#
[16:12..16:15): Int => scala.Int#
[17:14..17:15): X <= flags.p.package.X.
[18:14..18:15): Y <= flags.p.package.Y#
[18:15..18:15):  <= flags.p.package.Y#`<init>`().
[19:15..19:16): Z <= flags.p.package.Z#
[20:8..20:10): AA <= flags.p.package.AA#
[20:10..20:10):  <= flags.p.package.AA#`<init>`(Int,Int,Int).
[20:11..20:12): x <= flags.p.package.AA#x.
[20:14..20:17): Int => scala.Int#
[20:23..20:24): y <= flags.p.package.AA#y().
[20:26..20:29): Int => scala.Int#
[20:35..20:36): z <= flags.p.package.AA#z().
[20:38..20:41): Int => scala.Int#
[21:8..21:9): S <= flags.p.package.S#
[21:11..21:22): specialized => scala.specialized#
[21:23..21:23):  => scala.specialized#`<init>`().
[21:23..21:24): T <= flags.p.package.S#[T]
[21:25..21:25):  <= flags.p.package.S#`<init>`().
[22:6..22:10): List => scala.collection.immutable.List.
[22:11..22:14): xs1 <= flags.p.package.xs1.xs1.
[22:18..22:21): ??? => scala.Predef.`???`().
[23:2..23:5): ??? => scala.Predef.`???`().
[23:19..23:23): List => scala.collection.immutable.List.
[23:24..23:27): xs2 <= local0
[23:32..23:35): ??? => scala.Predef.`???`().
[24:2..24:5): ??? => scala.Predef.`???`().
[24:22..24:26): List => scala.package.List#
[24:27..24:28): t <= local1
[24:33..24:36): ??? => scala.Predef.`???`().

Synthetics:
[22:10..22:10):  => *.unapplySeq[Nothing]
  [0:0..0:1): * => _star_.
  [0:2..0:12): unapplySeq => scala.collection.generic.SeqFactory#unapplySeq(CC).
  [0:13..0:20): Nothing => scala.Nothing#
[23:23..23:23):  => *.unapplySeq[Nothing]
  [0:0..0:1): * => _star_.
  [0:2..0:12): unapplySeq => scala.collection.generic.SeqFactory#unapplySeq(CC).
  [0:13..0:20): Nothing => scala.Nothing#

semanticdb/integration/src/main/scala/example/Imports.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/Imports.scala
Text => non-empty
Language => Scala
Symbols => 4 entries
Occurrences => 4 entries
Diagnostics => 1 entries

Symbols:
scala. => package scala
scala.util. => package util
scala.util.control. => package control
scala.util.control.NonFatal. => final object NonFatal

Occurrences:
[0:7..0:12): scala => scala.
[0:13..0:17): util => scala.util.
[0:18..0:25): control => scala.util.control.
[0:26..0:34): NonFatal => scala.util.control.NonFatal.

Diagnostics:
[0:26..0:34)[warning] Unused import

semanticdb/integration/src/main/scala/example/local-file.scala
--------------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/local-file.scala
Text => non-empty
Language => Scala
Symbols => 6 entries
Occurrences => 7 entries
Synthetics => 1 entries

Symbols:
example. => package example
example.`local-file`# => class local-file.{+1 decls}
  extends AnyRef
example.`local-file`#`<init>`(). => primary ctor <init>: (): local-file
  local-file => example.`local-file`#
local0 => val local local: Int
  Int => scala.Int#
scala.Int#`+`(Int). => abstract method +: (x: <?>): Int
  x => scala.Int#`+`(Int).(x)
  Int => scala.Int#
scala.Predef.locally(T). => @inline method locally: [T: <?>] => (x: <?>): T
  T => scala.Predef.locally(T).[T]
  x => scala.Predef.locally(T).(x)

Occurrences:
[0:8..0:15): example <= example.
[2:6..2:18): `local-file` <= example.`local-file`#
[2:19..2:19):  <= example.`local-file`#`<init>`().
[3:2..3:9): locally => scala.Predef.locally(T).
[4:8..4:13): local <= local0
[5:4..5:9): local => local0
[5:10..5:11): + => scala.Int#`+`(Int).

Synthetics:
[3:9..3:9):  => *[Int]
  [0:0..0:1): * => _star_.
  [0:2..0:5): Int => scala.Int#

semanticdb/integration/src/main/scala/example/MetacJava.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/MetacJava.scala
Text => non-empty
Language => Scala
Symbols => 45 entries
Occurrences => 65 entries

Symbols:
com. => package com
com.javacp. => package javacp
com.javacp.Coin# => final enum class Coin.{+9 decls}
  extends Enum[Coin]
com.javacp.Coin#PENNY. => final static enum field PENNY: Coin
  Coin => com.javacp.Coin#
com.javacp.Interface# => abstract interface Interface.{+1 decls}
  extends Object
com.javacp.MetacJava# => class MetacJava.{+12 decls}
  extends Object
com.javacp.MetacJava#Overload1# => class Overload1.{+3 decls}
  extends Object
com.javacp.MetacJava#Overload1#A# => class A.{+1 decls}
  extends Object
com.javacp.MetacJava#Overload1#A#`<init>`(). => ctor <init>: (): Overload1.this.A
  Overload1 => com.javacp.MetacJava#Overload1#
  A => com.javacp.MetacJava#Overload1#A#
com.javacp.MetacJava#Overload1#`<init>`(). => ctor <init>: (): MetacJava.this.Overload1
  MetacJava => com.javacp.MetacJava#
  Overload1 => com.javacp.MetacJava#Overload1#
com.javacp.MetacJava#Overload2# => class Overload2.{+3 decls}
  extends Object
com.javacp.MetacJava#Overload2#A# => class A.{+1 decls}
  extends Object
com.javacp.MetacJava#Overload2#A#`<init>`(). => ctor <init>: (): Overload2.this.A
  Overload2 => com.javacp.MetacJava#Overload2#
  A => com.javacp.MetacJava#Overload2#A#
com.javacp.MetacJava#Overload2#`<init>`(). => ctor <init>: (): MetacJava.this.Overload2
  MetacJava => com.javacp.MetacJava#
  Overload2 => com.javacp.MetacJava#Overload2#
com.javacp.MetacJava#Overload3# => static class Overload3.{+3 decls}
  extends Object
com.javacp.MetacJava#Overload3#A# => static class A.{+1 decls}
  extends Object
com.javacp.MetacJava#Overload3#A#`<init>`(). => ctor <init>: (): A
  A => com.javacp.MetacJava#Overload3#A#
com.javacp.MetacJava#StaticInner# => static class StaticInner.{+5 decls}
  extends Object
com.javacp.MetacJava#StaticInner#NonStatic# => class NonStatic.{+2 decls}
  extends Object
com.javacp.MetacJava#StaticInner#NonStatic#`<init>`(). => ctor <init>: (): StaticInner.this.NonStatic
  StaticInner => com.javacp.MetacJava#StaticInner#
  NonStatic => com.javacp.MetacJava#StaticInner#NonStatic#
com.javacp.MetacJava#StaticInner#NonStatic#method(NonStatic). => method method: (e: <?>): Unit
  e => com.javacp.MetacJava#StaticInner#NonStatic#method(NonStatic).(e)
  Unit => scala.Unit#
com.javacp.MetacJava#StaticInner#`<init>`(). => ctor <init>: (): StaticInner
  StaticInner => com.javacp.MetacJava#StaticInner#
com.javacp.MetacJava#StaticInner#isNotStatic(). => method isNotStatic: (): Unit
  Unit => scala.Unit#
com.javacp.MetacJava#StaticInner#isStatic(). => static method isStatic: (): Unit
  Unit => scala.Unit#
com.javacp.MetacJava#`<init>`(). => ctor <init>: (): MetacJava
  MetacJava => com.javacp.MetacJava#
com.javacp.MetacJava#overload(A). => method overload: (a: <?>): Unit
  a => com.javacp.MetacJava#overload(A).(a)
  Unit => scala.Unit#
com.javacp.MetacJava#overload(A+1). => method overload: (a: <?>): Unit
  a => com.javacp.MetacJava#overload(A+1).(a)
  Unit => scala.Unit#
com.javacp.MetacJava#overload(A+2). => static method overload: (a: <?>): Unit
  a => com.javacp.MetacJava#overload(A+2).(a)
  Unit => scala.Unit#
example. => package example
example.MetacJava# => class MetacJava.{+15 decls}
  extends AnyRef
example.MetacJava#`<init>`(). => primary ctor <init>: (): MetacJava
  MetacJava => example.MetacJava#
example.MetacJava#coin(). => val method coin: : Coin
  Coin => com.javacp.Coin#
example.MetacJava#coin. => private[this] val field coin: Coin
  Coin => com.javacp.Coin#
example.MetacJava#inner(). => val method inner: : MetacJava
  MetacJava => com.javacp.MetacJava#
example.MetacJava#inner. => private[this] val field inner: MetacJava
  MetacJava => com.javacp.MetacJava#
example.MetacJava#interface(). => val method interface: : Interface
  Interface => com.javacp.Interface#
example.MetacJava#interface. => private[this] val field interface: Interface
  Interface => com.javacp.Interface#
example.MetacJava#nonStatic(). => val method nonStatic: : MetacJava.this.staticInner.NonStatic
  MetacJava => example.MetacJava#
  staticInner => example.MetacJava#staticInner().
  NonStatic => com.javacp.MetacJava#StaticInner#NonStatic#
example.MetacJava#nonStatic. => private[this] val field nonStatic: MetacJava.this.staticInner.NonStatic
  MetacJava => example.MetacJava#
  staticInner => example.MetacJava#staticInner().
  NonStatic => com.javacp.MetacJava#StaticInner#NonStatic#
example.MetacJava#overload1(). => val method overload1: : MetacJava.this.inner.Overload1
  MetacJava => example.MetacJava#
  inner => example.MetacJava#inner().
  Overload1 => com.javacp.MetacJava#Overload1#
example.MetacJava#overload1. => private[this] val field overload1: MetacJava.this.inner.Overload1
  MetacJava => example.MetacJava#
  inner => example.MetacJava#inner().
  Overload1 => com.javacp.MetacJava#Overload1#
example.MetacJava#overload2(). => val method overload2: : MetacJava.this.inner.Overload2
  MetacJava => example.MetacJava#
  inner => example.MetacJava#inner().
  Overload2 => com.javacp.MetacJava#Overload2#
example.MetacJava#overload2. => private[this] val field overload2: MetacJava.this.inner.Overload2
  MetacJava => example.MetacJava#
  inner => example.MetacJava#inner().
  Overload2 => com.javacp.MetacJava#Overload2#
example.MetacJava#staticInner(). => val method staticInner: : StaticInner
  StaticInner => com.javacp.MetacJava#StaticInner#
example.MetacJava#staticInner. => private[this] val field staticInner: StaticInner
  StaticInner => com.javacp.MetacJava#StaticInner#

Occurrences:
[0:8..0:15): example <= example.
[2:7..2:10): com => com.
[2:11..2:17): javacp => com.javacp.
[4:6..4:15): MetacJava <= example.MetacJava#
[4:16..4:16):  <= example.MetacJava#`<init>`().
[5:2..5:8): javacp => com.javacp.
[5:9..5:18): MetacJava => com.javacp.MetacJava#
[5:19..5:30): StaticInner => com.javacp.MetacJava#StaticInner#
[5:31..5:39): isStatic => com.javacp.MetacJava#StaticInner#isStatic().
[6:6..6:12): javacp => com.javacp.
[6:13..6:22): MetacJava => com.javacp.MetacJava#
[6:23..6:34): StaticInner => com.javacp.MetacJava#StaticInner#
[6:34..6:34):  => com.javacp.MetacJava#StaticInner#`<init>`().
[6:37..6:48): isNotStatic => com.javacp.MetacJava#StaticInner#isNotStatic().
[7:6..7:11): inner <= example.MetacJava#inner().
[7:18..7:24): javacp => com.javacp.
[7:25..7:34): MetacJava => com.javacp.MetacJava#
[7:34..7:34):  => com.javacp.MetacJava#`<init>`().
[8:6..8:15): overload1 <= example.MetacJava#overload1().
[8:22..8:27): inner => example.MetacJava#inner().
[8:28..8:37): Overload1 => com.javacp.MetacJava#Overload1#
[8:37..8:37):  => com.javacp.MetacJava#Overload1#`<init>`().
[9:6..9:15): overload2 <= example.MetacJava#overload2().
[9:22..9:27): inner => example.MetacJava#inner().
[9:28..9:37): Overload2 => com.javacp.MetacJava#Overload2#
[9:37..9:37):  => com.javacp.MetacJava#Overload2#`<init>`().
[10:2..10:7): inner => example.MetacJava#inner().
[10:8..10:16): overload => com.javacp.MetacJava#overload(A).
[10:21..10:30): overload1 => example.MetacJava#overload1().
[10:31..10:32): A => com.javacp.MetacJava#Overload1#A#
[10:32..10:32):  => com.javacp.MetacJava#Overload1#A#`<init>`().
[11:2..11:7): inner => example.MetacJava#inner().
[11:8..11:16): overload => com.javacp.MetacJava#overload(A+1).
[11:21..11:30): overload2 => example.MetacJava#overload2().
[11:31..11:32): A => com.javacp.MetacJava#Overload2#A#
[11:32..11:32):  => com.javacp.MetacJava#Overload2#A#`<init>`().
[12:6..12:17): staticInner <= example.MetacJava#staticInner().
[12:24..12:30): javacp => com.javacp.
[12:31..12:40): MetacJava => com.javacp.MetacJava#
[12:41..12:52): StaticInner => com.javacp.MetacJava#StaticInner#
[12:52..12:52):  => com.javacp.MetacJava#StaticInner#`<init>`().
[13:6..13:15): nonStatic <= example.MetacJava#nonStatic().
[13:22..13:33): staticInner => example.MetacJava#staticInner().
[13:34..13:43): NonStatic => com.javacp.MetacJava#StaticInner#NonStatic#
[13:43..13:43):  => com.javacp.MetacJava#StaticInner#NonStatic#`<init>`().
[14:2..14:11): nonStatic => example.MetacJava#nonStatic().
[14:12..14:18): method => com.javacp.MetacJava#StaticInner#NonStatic#method(NonStatic).
[14:19..14:28): nonStatic => example.MetacJava#nonStatic().
[15:2..15:8): javacp => com.javacp.
[15:9..15:18): MetacJava => com.javacp.MetacJava#
[15:19..15:27): overload => com.javacp.MetacJava#overload(A+2).
[15:32..15:38): javacp => com.javacp.
[15:39..15:48): MetacJava => com.javacp.MetacJava#
[15:49..15:58): Overload3 => com.javacp.MetacJava#Overload3#
[15:59..15:60): A => com.javacp.MetacJava#Overload3#A#
[15:60..15:60):  => com.javacp.MetacJava#Overload3#A#`<init>`().
[16:6..16:15): interface <= example.MetacJava#interface().
[16:17..16:23): javacp => com.javacp.
[16:24..16:33): Interface => com.javacp.Interface#
[17:6..17:10): coin <= example.MetacJava#coin().
[17:12..17:18): javacp => com.javacp.
[17:19..17:23): Coin => com.javacp.Coin#
[17:26..17:32): javacp => com.javacp.
[17:33..17:37): Coin => com.javacp.Coin#
[17:38..17:43): PENNY => com.javacp.Coin#PENNY.

semanticdb/integration/src/main/scala/example/Methods.scala
-----------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/Methods.scala
Text => non-empty
Language => Scala
Symbols => 76 entries
Occurrences => 183 entries
Diagnostics => 2 entries
Synthetics => 4 entries

Symbols:
example. => package example
example.Example. => final object Example
example.MethodUsages# => class MethodUsages.{+3 decls}
  extends AnyRef
example.MethodUsages#`<init>`(). => primary ctor <init>: (): MethodUsages
  MethodUsages => example.MethodUsages#
example.MethodUsages#m(). => val method m: : Methods[Int]
  Methods => example.Methods#
  Int => scala.Int#
example.MethodUsages#m. => private[this] val field m: Methods[Int]
  Methods => example.Methods#
  Int => scala.Int#
example.Methods# => class Methods[T >: Nothing <: Any].{+26 decls}
  extends AnyRef
example.Methods#$anon#x(). => abstract val method x: : Int
  Int => scala.Int#
example.Methods#AList# => type AList: [T >: Nothing <: Any] => >: Methods.this.List[T] <: Methods.this.List[T]
  T => example.Methods#AList#[T]
  Nothing => scala.Nothing#
  Any => scala.Any#
  Methods => example.Methods#
  List => example.Methods#List#
example.Methods#AList#[T] => typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
example.Methods#List# => class List[T >: Nothing <: Any].{+1 decls}
  extends AnyRef
example.Methods#List#[T] => typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
example.Methods#List#`<init>`(). => primary ctor <init>: (): Methods.this.List[T]
  Methods => example.Methods#
  List => example.Methods#List#
  T => example.Methods#List#[T]
example.Methods#[T] => typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
example.Methods#`<init>`(). => primary ctor <init>: (): Methods[T]
  Methods => example.Methods#
  T => example.Methods#[T]
example.Methods#`m8().`(). => method m8().: (): Nothing
  Nothing => scala.Nothing#
example.Methods#`m9().`# => class m9()..{+1 decls}
  extends AnyRef
example.Methods#`m9().`#`<init>`(). => primary ctor <init>: (): Methods.this.m9().
  Methods => example.Methods#
  m9(). => example.Methods#`m9().`#
example.Methods#m1(). => method m1: : Nothing
  Nothing => scala.Nothing#
example.Methods#m10(AList). => method m10: (x: Methods.this.AList[T]): Nothing
  x => example.Methods#m10(AList).(x)
  Methods => example.Methods#
  AList => example.Methods#AList#
  T => example.Methods#[T]
  Nothing => scala.Nothing#
example.Methods#m10(AList).(x) => param x: Methods.this.AList[T]
  Methods => example.Methods#
  AList => example.Methods#AList#
  T => example.Methods#[T]
example.Methods#m11(.type). => method m11: (x: Predef.type): Nothing
  x => example.Methods#m11(.type).(x)
  Predef => scala.Predef.
  Nothing => scala.Nothing#
example.Methods#m11(.type).(x) => param x: Predef.type
  Predef => scala.Predef.
example.Methods#m11(.type+1). => method m11: (x: Example.type): Nothing
  x => example.Methods#m11(.type+1).(x)
  Example => example.Example.
  Nothing => scala.Nothing#
example.Methods#m11(.type+1).(x) => param x: Example.type
  Example => example.Example.
example.Methods#m12a({}). => method m12a: (x: AnyRef {}): Nothing
  x => example.Methods#m12a({}).(x)
  AnyRef => scala.AnyRef#
  Nothing => scala.Nothing#
example.Methods#m12a({}).(x) => param x: AnyRef {}
  AnyRef => scala.AnyRef#
example.Methods#m12b({}). => method m12b: (x: AnyRef { val method x: Int }): Nothing
  x => example.Methods#m12b({}).(x)
  AnyRef => scala.AnyRef#
  x => example.Methods#$anon#x().
  Int => scala.Int#
  Nothing => scala.Nothing#
example.Methods#m12b({}).(x) => param x: AnyRef { val method x: Int }
  AnyRef => scala.AnyRef#
  x => example.Methods#$anon#x().
  Int => scala.Int#
example.Methods#m13(Int). => method m13: (x: Int @unchecked): Nothing
  x => example.Methods#m13(Int).(x)
  Int => scala.Int#
  unchecked => scala.unchecked#
  Nothing => scala.Nothing#
example.Methods#m13(Int).(x) => param x: Int @unchecked
  Int => scala.Int#
  unchecked => scala.unchecked#
example.Methods#m14(T). => method m14: (x: T forSome { type T >: Nothing <: Any }): Nothing
  x => example.Methods#m14(T).(x)
  T => example.Methods#m14(T).(x)T#
  Nothing => scala.Nothing#
  Any => scala.Any#
example.Methods#m14(T).(x) => param x: T forSome { type T >: Nothing <: Any }
  T => example.Methods#m14(T).(x)T#
  Nothing => scala.Nothing#
  Any => scala.Any#
example.Methods#m14(T).(x)T# => abstract type T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
example.Methods#m15(=>Int). => method m15: (x: => Int): Nothing
  x => example.Methods#m15(=>Int).(x)
  Int => scala.Int#
  Nothing => scala.Nothing#
example.Methods#m15(=>Int).(x) => param x: => Int
  Int => scala.Int#
example.Methods#m16(Int*). => method m16: (x: Int*): Nothing
  x => example.Methods#m16(Int*).(x)
  Int => scala.Int#
  Nothing => scala.Nothing#
example.Methods#m16(Int*).(x) => param x: Int*
  Int => scala.Int#
example.Methods#m2(). => method m2: (): Nothing
  Nothing => scala.Nothing#
example.Methods#m3(Int). => method m3: (x: Int): Nothing
  x => example.Methods#m3(Int).(x)
  Int => scala.Int#
  Nothing => scala.Nothing#
example.Methods#m3(Int).(x) => param x: Int
  Int => scala.Int#
example.Methods#m4(Int,Int). => method m4: (x: Int)(y: Int): Nothing
  x => example.Methods#m4(Int,Int).(x)
  Int => scala.Int#
  y => example.Methods#m4(Int,Int).(y)
  Nothing => scala.Nothing#
example.Methods#m4(Int,Int).(x) => param x: Int
  Int => scala.Int#
example.Methods#m4(Int,Int).(y) => param y: Int
  Int => scala.Int#
example.Methods#m5(Int). => method m5: (x: Int): Nothing
  x => example.Methods#m5(Int).(x)
  Int => scala.Int#
  Nothing => scala.Nothing#
example.Methods#m5(Int).(x) => param x: Int
  Int => scala.Int#
example.Methods#m5(String). => method m5: (x: String): Nothing
  x => example.Methods#m5(String).(x)
  String => scala.Predef.String#
  Nothing => scala.Nothing#
example.Methods#m5(String).(x) => param x: String
  String => scala.Predef.String#
example.Methods#m6(Int). => method m6: (x: Int): Nothing
  x => example.Methods#m6(Int).(x)
  Int => scala.Int#
  Nothing => scala.Nothing#
example.Methods#m6(Int).(x) => param x: Int
  Int => scala.Int#
example.Methods#m6(List). => method m6: (x: Methods.this.List[T]): Nothing
  x => example.Methods#m6(List).(x)
  Methods => example.Methods#
  List => example.Methods#List#
  T => example.Methods#[T]
  Nothing => scala.Nothing#
example.Methods#m6(List).(x) => param x: Methods.this.List[T]
  Methods => example.Methods#
  List => example.Methods#List#
  T => example.Methods#[T]
example.Methods#m6(List+1). => method m6: (x: List[T]): Nothing
  x => example.Methods#m6(List+1).(x)
  List => scala.package.List#
  T => example.Methods#[T]
  Nothing => scala.Nothing#
example.Methods#m6(List+1).(x) => param x: List[T]
  List => scala.package.List#
  T => example.Methods#[T]
example.Methods#m7a(Methods,List,Ordering). => method m7a: [U >: Nothing <: Any] => (c: Methods[T], l: Methods.this.List[U])(evidence$1: Ordering[U]): Nothing
  U => example.Methods#m7a(Methods,List,Ordering).[U]
  Nothing => scala.Nothing#
  Any => scala.Any#
  c => example.Methods#m7a(Methods,List,Ordering).(c)
  Methods => example.Methods#
  T => example.Methods#[T]
  l => example.Methods#m7a(Methods,List,Ordering).(l)
  List => example.Methods#List#
  evidence$1 => example.Methods#m7a(Methods,List,Ordering).(evidence$1)
  Ordering => scala.math.Ordering#
example.Methods#m7a(Methods,List,Ordering).(c) => param c: Methods[T]
  Methods => example.Methods#
  T => example.Methods#[T]
example.Methods#m7a(Methods,List,Ordering).(evidence$1) => implicit synthetic param evidence$1: Ordering[U]
  Ordering => scala.math.Ordering#
  U => example.Methods#m7a(Methods,List,Ordering).[U]
example.Methods#m7a(Methods,List,Ordering).(l) => param l: Methods.this.List[U]
  Methods => example.Methods#
  List => example.Methods#List#
  U => example.Methods#m7a(Methods,List,Ordering).[U]
example.Methods#m7a(Methods,List,Ordering).[U] => typeparam U: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
example.Methods#m7b(List,Function1). => method m7b: [U >: Nothing <: Any] => (l: Methods.this.List[U])(evidence$2: Function1[U, T]): Nothing
  U => example.Methods#m7b(List,Function1).[U]
  Nothing => scala.Nothing#
  Any => scala.Any#
  l => example.Methods#m7b(List,Function1).(l)
  Methods => example.Methods#
  List => example.Methods#List#
  evidence$2 => example.Methods#m7b(List,Function1).(evidence$2)
  Function1 => scala.Function1#
  T => example.Methods#[T]
example.Methods#m7b(List,Function1).(evidence$2) => implicit synthetic param evidence$2: Function1[U, T]
  Function1 => scala.Function1#
  U => example.Methods#m7b(List,Function1).[U]
  T => example.Methods#[T]
example.Methods#m7b(List,Function1).(l) => param l: Methods.this.List[U]
  Methods => example.Methods#
  List => example.Methods#List#
  U => example.Methods#m7b(List,Function1).[U]
example.Methods#m7b(List,Function1).[U] => typeparam U: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
example.Methods#m9(`m9().`). => method m9: (x: Methods.this.m9().): Nothing
  x => example.Methods#m9(`m9().`).(x)
  Methods => example.Methods#
  m9(). => example.Methods#`m9().`#
  Nothing => scala.Nothing#
example.Methods#m9(`m9().`).(x) => param x: Methods.this.m9().
  Methods => example.Methods#
  m9(). => example.Methods#`m9().`#
scala. => package scala
scala.Int# => abstract final class Int.{+111 decls}
  extends AnyVal
scala.Predef. => final object Predef
scala.Predef.String# => type String: >: String <: String
  String => java.lang.String#
scala.Predef.`???`(). => method ???: : Nothing
  Nothing => scala.Nothing#
scala.collection.immutable.Nil. => @SerialVersionUID final case object Nil
scala.math. => package math
scala.math.Ordering# => @implicitNotFound trait Ordering[T: <?>].{+14 decls}
  extends Object
  extends Comparator[T]
  extends PartialOrdering[T]
  extends Serializable
scala.package.List# => type List: [A: <?>] => >: List[A] <: List[A]
  A => scala.package.List#[A]
  List => scala.collection.immutable.List#
scala.unchecked# => class unchecked.{+1 decls}
  extends Annotation
scala.unchecked#`<init>`(). => primary ctor <init>: (): unchecked
  unchecked => scala.unchecked#

Occurrences:
[0:8..0:15): example <= example.
[2:7..2:12): scala => scala.
[2:13..2:17): math => scala.math.
[2:18..2:26): Ordering => scala.math.Ordering#
[2:18..2:26): Ordering => scala.math.Ordering.
[4:6..4:13): Methods <= example.Methods#
[4:14..4:15): T <= example.Methods#[T]
[4:17..4:17):  <= example.Methods#`<init>`().
[5:8..5:12): List <= example.Methods#List#
[5:13..5:14): T <= example.Methods#List#[T]
[5:15..5:15):  <= example.Methods#List#`<init>`().
[6:7..6:12): AList <= example.Methods#AList#
[6:13..6:14): T <= example.Methods#AList#[T]
[6:18..6:22): List => example.Methods#List#
[6:23..6:24): T => example.Methods#AList#[T]
[7:6..7:8): m1 <= example.Methods#m1().
[7:11..7:14): ??? => scala.Predef.`???`().
[8:6..8:8): m2 <= example.Methods#m2().
[8:13..8:16): ??? => scala.Predef.`???`().
[9:6..9:8): m3 <= example.Methods#m3(Int).
[9:9..9:10): x <= example.Methods#m3(Int).(x)
[9:12..9:15): Int => scala.Int#
[9:19..9:22): ??? => scala.Predef.`???`().
[10:6..10:8): m4 <= example.Methods#m4(Int,Int).
[10:9..10:10): x <= example.Methods#m4(Int,Int).(x)
[10:12..10:15): Int => scala.Int#
[10:17..10:18): y <= example.Methods#m4(Int,Int).(y)
[10:20..10:23): Int => scala.Int#
[10:27..10:30): ??? => scala.Predef.`???`().
[11:6..11:8): m5 <= example.Methods#m5(String).
[11:9..11:10): x <= example.Methods#m5(String).(x)
[11:12..11:18): String => scala.Predef.String#
[11:22..11:25): ??? => scala.Predef.`???`().
[12:6..12:8): m5 <= example.Methods#m5(Int).
[12:9..12:10): x <= example.Methods#m5(Int).(x)
[12:12..12:15): Int => scala.Int#
[12:19..12:22): ??? => scala.Predef.`???`().
[13:6..13:8): m6 <= example.Methods#m6(Int).
[13:9..13:10): x <= example.Methods#m6(Int).(x)
[13:12..13:15): Int => scala.Int#
[13:19..13:22): ??? => scala.Predef.`???`().
[14:6..14:8): m6 <= example.Methods#m6(List).
[14:9..14:10): x <= example.Methods#m6(List).(x)
[14:12..14:16): List => example.Methods#List#
[14:17..14:18): T => example.Methods#[T]
[14:23..14:26): ??? => scala.Predef.`???`().
[15:6..15:8): m6 <= example.Methods#m6(List+1).
[15:9..15:10): x <= example.Methods#m6(List+1).(x)
[15:12..15:17): scala => scala.
[15:18..15:22): List => scala.package.List#
[15:23..15:24): T => example.Methods#[T]
[15:29..15:32): ??? => scala.Predef.`???`().
[16:6..16:9): m7a <= example.Methods#m7a(Methods,List,Ordering).
[16:10..16:11): U <= example.Methods#m7a(Methods,List,Ordering).[U]
[16:13..16:21): Ordering => scala.math.Ordering#
[16:23..16:24): c <= example.Methods#m7a(Methods,List,Ordering).(c)
[16:26..16:33): Methods => example.Methods#
[16:34..16:35): T => example.Methods#[T]
[16:38..16:39): l <= example.Methods#m7a(Methods,List,Ordering).(l)
[16:41..16:45): List => example.Methods#List#
[16:46..16:47): U => example.Methods#m7a(Methods,List,Ordering).[U]
[16:52..16:55): ??? => scala.Predef.`???`().
[17:6..17:9): m7b <= example.Methods#m7b(List,Function1).
[17:10..17:11): U <= example.Methods#m7b(List,Function1).[U]
[17:15..17:16): T => example.Methods#[T]
[17:18..17:19): l <= example.Methods#m7b(List,Function1).(l)
[17:21..17:25): List => example.Methods#List#
[17:26..17:27): U => example.Methods#m7b(List,Function1).[U]
[17:32..17:35): ??? => scala.Predef.`???`().
[18:6..18:13): `m8().` <= example.Methods#`m8().`().
[18:18..18:21): ??? => scala.Predef.`???`().
[19:8..19:15): `m9().` <= example.Methods#`m9().`#
[19:15..19:15):  <= example.Methods#`m9().`#`<init>`().
[20:6..20:8): m9 <= example.Methods#m9(`m9().`).
[20:9..20:10): x <= example.Methods#m9(`m9().`).(x)
[20:12..20:19): `m9().` => example.Methods#`m9().`#
[20:23..20:26): ??? => scala.Predef.`???`().
[21:6..21:9): m10 <= example.Methods#m10(AList).
[21:10..21:11): x <= example.Methods#m10(AList).(x)
[21:13..21:18): AList => example.Methods#AList#
[21:19..21:20): T => example.Methods#[T]
[21:25..21:28): ??? => scala.Predef.`???`().
[22:6..22:9): m11 <= example.Methods#m11(.type).
[22:10..22:11): x <= example.Methods#m11(.type).(x)
[22:13..22:19): Predef => scala.Predef.
[22:28..22:31): ??? => scala.Predef.`???`().
[23:6..23:9): m11 <= example.Methods#m11(.type+1).
[23:10..23:11): x <= example.Methods#m11(.type+1).(x)
[23:13..23:20): Example => example.Example.
[23:29..23:32): ??? => scala.Predef.`???`().
[24:6..24:10): m12a <= example.Methods#m12a({}).
[24:11..24:12): x <= example.Methods#m12a({}).(x)
[24:20..24:23): ??? => scala.Predef.`???`().
[25:6..25:10): m12b <= example.Methods#m12b({}).
[25:11..25:12): x <= example.Methods#m12b({}).(x)
[25:20..25:21): x <= example.Methods#$anon#x().
[25:23..25:26): Int => scala.Int#
[25:32..25:35): ??? => scala.Predef.`???`().
[26:6..26:9): m13 <= example.Methods#m13(Int).
[26:10..26:11): x <= example.Methods#m13(Int).(x)
[26:13..26:16): Int => scala.Int#
[26:18..26:27): unchecked => scala.unchecked#
[26:27..26:27):  => scala.unchecked#`<init>`().
[26:31..26:34): ??? => scala.Predef.`???`().
[27:6..27:9): m14 <= example.Methods#m14(T).
[27:10..27:11): x <= example.Methods#m14(T).(x)
[27:13..27:14): T => example.Methods#m14(T).(x)T#
[27:30..27:31): T <= example.Methods#m14(T).(x)T#
[27:37..27:40): ??? => scala.Predef.`???`().
[28:6..28:9): m15 <= example.Methods#m15(=>Int).
[28:10..28:11): x <= example.Methods#m15(=>Int).(x)
[28:16..28:19): Int => scala.Int#
[28:23..28:26): ??? => scala.Predef.`???`().
[29:6..29:9): m16 <= example.Methods#m16(Int*).
[29:10..29:11): x <= example.Methods#m16(Int*).(x)
[29:13..29:16): Int => scala.`<repeated>`#
[29:21..29:24): ??? => scala.Predef.`???`().
[32:6..32:18): MethodUsages <= example.MethodUsages#
[32:19..32:19):  <= example.MethodUsages#`<init>`().
[33:6..33:7): m <= example.MethodUsages#m().
[33:14..33:21): Methods => example.Methods#
[33:22..33:25): Int => scala.Int#
[33:26..33:26):  => example.Methods#`<init>`().
[34:2..34:3): m => example.MethodUsages#m().
[34:4..34:6): m1 => example.Methods#m1().
[35:2..35:3): m => example.MethodUsages#m().
[35:4..35:6): m2 => example.Methods#m2().
[36:2..36:3): m => example.MethodUsages#m().
[36:4..36:6): m3 => example.Methods#m3(Int).
[37:2..37:3): m => example.MethodUsages#m().
[37:4..37:6): m4 => example.Methods#m4(Int,Int).
[38:2..38:3): m => example.MethodUsages#m().
[38:4..38:6): m5 => example.Methods#m5(String).
[39:2..39:3): m => example.MethodUsages#m().
[39:4..39:6): m5 => example.Methods#m5(Int).
[40:2..40:3): m => example.MethodUsages#m().
[40:4..40:6): m6 => example.Methods#m6(Int).
[41:2..41:3): m => example.MethodUsages#m().
[41:4..41:6): m6 => example.Methods#m6(List).
[41:11..41:12): m => example.MethodUsages#m().
[41:13..41:17): List => example.Methods#List#
[41:18..41:21): Int => scala.Int#
[41:22..41:22):  => example.Methods#List#`<init>`().
[42:2..42:3): m => example.MethodUsages#m().
[42:4..42:6): m6 => example.Methods#m6(List+1).
[42:7..42:10): Nil => scala.collection.immutable.Nil.
[43:2..43:3): m => example.MethodUsages#m().
[43:4..43:7): m7a => example.Methods#m7a(Methods,List,Ordering).
[43:8..43:9): m => example.MethodUsages#m().
[43:15..43:16): m => example.MethodUsages#m().
[43:17..43:21): List => example.Methods#List#
[43:22..43:25): Int => scala.Int#
[43:26..43:26):  => example.Methods#List#`<init>`().
[44:2..44:3): m => example.MethodUsages#m().
[44:4..44:7): m7b => example.Methods#m7b(List,Function1).
[44:12..44:13): m => example.MethodUsages#m().
[44:14..44:18): List => example.Methods#List#
[44:19..44:22): Int => scala.Int#
[44:23..44:23):  => example.Methods#List#`<init>`().
[45:2..45:3): m => example.MethodUsages#m().
[45:4..45:11): `m8().` => example.Methods#`m8().`().
[46:2..46:3): m => example.MethodUsages#m().
[46:4..46:6): m9 => example.Methods#m9(`m9().`).
[47:2..47:3): m => example.MethodUsages#m().
[47:4..47:7): m10 => example.Methods#m10(AList).
[48:2..48:3): m => example.MethodUsages#m().
[48:4..48:7): m11 => example.Methods#m11(.type).
[48:8..48:14): Predef => scala.Predef.
[49:2..49:3): m => example.MethodUsages#m().
[49:4..49:7): m11 => example.Methods#m11(.type+1).
[49:8..49:15): Example => example.Example.
[50:2..50:3): m => example.MethodUsages#m().
[50:4..50:8): m12a => example.Methods#m12a({}).
[51:2..51:3): m => example.MethodUsages#m().
[51:4..51:8): m12b => example.Methods#m12b({}).
[52:2..52:3): m => example.MethodUsages#m().
[52:4..52:7): m13 => example.Methods#m13(Int).
[53:2..53:3): m => example.MethodUsages#m().
[53:4..53:7): m14 => example.Methods#m14(T).
[54:2..54:3): m => example.MethodUsages#m().
[54:4..54:7): m15 => example.Methods#m15(=>Int).
[55:2..55:3): m => example.MethodUsages#m().
[55:4..55:7): m16 => example.Methods#m16(Int*).

Diagnostics:
[27:13..27:33)[warning] the existential type T forSome { type T }, which cannot be expressed by wildcards,  should be enabled
by making the implicit value scala.language.existentials visible.
[27:13..27:33)[warning] the existential type T forSome { type T }, which cannot be expressed by wildcards,  should be enabled
by making the implicit value scala.language.existentials visible.
This can be achieved by adding the import clause 'import scala.language.existentials'
or by setting the compiler option -language:existentials.
See the Scaladoc for value scala.language.existentials for a discussion
why the feature should be explicitly enabled.

Synthetics:
[43:7..43:7):  => *[Int]
  [0:0..0:1): * => _star_.
  [0:2..0:5): Int => scala.Int#
[43:27..43:27):  => *(scala.math.Ordering.Int)
  [0:0..0:1): * => _star_.
  [0:22..0:25): Int => scala.math.Ordering.Int.
[44:7..44:7):  => *[Int]
  [0:0..0:1): * => _star_.
  [0:2..0:5): Int => scala.Int#
[44:24..44:24):  => *(scala.Predef.$conforms[Int])
  [0:0..0:1): * => _star_.
  [0:15..0:24): $conforms => scala.Predef.$conforms().
  [0:25..0:28): Int => scala.Int#

semanticdb/integration/src/main/scala/example/Overrides.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/Overrides.scala
Text => non-empty
Language => Scala
Symbols => 8 entries
Occurrences => 10 entries

Symbols:
example. => package example
example.A# => trait A.{+1 decls}
  extends AnyRef
example.A#foo(). => abstract method foo: : Int
  Int => scala.Int#
example.B# => class B.{+2 decls}
  extends AnyRef
  extends A
example.B#`<init>`(). => primary ctor <init>: (): B
  B => example.B#
example.B#foo(). => method foo: : Int
  Int => scala.Int#
java.lang.Object#`<init>`(). => ctor <init>: (): Object
  Object => java.lang.Object#
scala.Int# => abstract final class Int.{+111 decls}
  extends AnyVal

Occurrences:
[0:8..0:15): example <= example.
[2:6..2:7): A <= example.A#
[2:14..2:17): foo <= example.A#foo().
[2:19..2:22): Int => scala.Int#
[3:6..3:7): B <= example.B#
[3:7..3:7):  <= example.B#`<init>`().
[3:18..3:19): A => example.A#
[3:20..3:20):  => java.lang.Object#`<init>`().
[3:26..3:29): foo <= example.B#foo().
[3:31..3:34): Int => scala.Int#

semanticdb/integration/src/main/scala/example/Synthetic.scala
-------------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/Synthetic.scala
Text => non-empty
Language => Scala
Symbols => 11 entries
Occurrences => 11 entries
Synthetics => 6 entries

Symbols:
example. => package example
example.Synthetic# => class Synthetic.{+1 decls}
  extends AnyRef
example.Synthetic#`<init>`(). => primary ctor <init>: (): Synthetic
  Synthetic => example.Synthetic#
scala.Array. => final object Array
scala.Array.empty(ClassTag). => method empty: [T: <?>] => (evidence$1: <?>): Array[T]
  T => scala.Array.empty(ClassTag).[T]
  evidence$1 => scala.Array.empty(ClassTag).(evidence$1)
  Array => scala.Array#
scala.Int# => abstract final class Int.{+111 decls}
  extends AnyVal
scala.Int#`+`(Int). => abstract method +: (x: <?>): Int
  x => scala.Int#`+`(Int).(x)
  Int => scala.Int#
scala.collection.TraversableLike#headOption(). => method headOption: : Option[A]
  Option => scala.Option#
  A => scala.collection.TraversableLike#[A]
scala.collection.immutable.List#map(Function1,CanBuildFrom). => final method map: [B: <?>, That: <?>] => (f: <?>)(bf: <?>): That
  B => scala.collection.immutable.List#map(Function1,CanBuildFrom).[B]
  That => scala.collection.immutable.List#map(Function1,CanBuildFrom).[That]
  f => scala.collection.immutable.List#map(Function1,CanBuildFrom).(f)
  bf => scala.collection.immutable.List#map(Function1,CanBuildFrom).(bf)
scala.collection.immutable.List. => final object List
scala.collection.immutable.StringLike#stripPrefix(String). => method stripPrefix: (prefix: <?>): String
  prefix => scala.collection.immutable.StringLike#stripPrefix(String).(prefix)
  String => java.lang.String#

Occurrences:
[0:8..0:15): example <= example.
[2:6..2:15): Synthetic <= example.Synthetic#
[2:16..2:16):  <= example.Synthetic#`<init>`().
[3:2..3:6): List => scala.collection.immutable.List.
[3:10..3:13): map => scala.collection.immutable.List#map(Function1,CanBuildFrom).
[3:16..3:17): + => scala.Int#`+`(Int).
[4:2..4:7): Array => scala.Array.
[4:8..4:13): empty => scala.Array.empty(ClassTag).
[4:14..4:17): Int => scala.Int#
[4:19..4:29): headOption => scala.collection.TraversableLike#headOption().
[5:9..5:20): stripPrefix => scala.collection.immutable.StringLike#stripPrefix(String).

Synthetics:
[3:6..3:6):  => *.apply[Int]
  [0:0..0:1): * => _star_.
  [0:2..0:7): apply => scala.collection.immutable.List.apply(A*).
  [0:8..0:11): Int => scala.Int#
[3:13..3:13):  => *[Int, List[Int]]
  [0:0..0:1): * => _star_.
  [0:2..0:5): Int => scala.Int#
  [0:7..0:11): List => scala.collection.immutable.List#
  [0:12..0:15): Int => scala.Int#
[3:20..3:20):  => *(scala.collection.immutable.List.canBuildFrom[Int])
  [0:0..0:1): * => _star_.
  [0:34..0:46): canBuildFrom => scala.collection.immutable.List.canBuildFrom().
  [0:47..0:50): Int => scala.Int#
[4:2..4:18): Array.empty[Int] => scala.Predef.intArrayOps(*)
  [0:13..0:24): intArrayOps => scala.Predef.intArrayOps(Array).
  [0:25..0:26): * => _star_.
[4:18..4:18):  => *(((ClassTag.Int): ClassTag[Int]))
  [0:0..0:1): * => _star_.
  [0:13..0:16): Int => scala.reflect.ClassTag.Int().
  [0:19..0:27): ClassTag => scala.reflect.ClassTag#
  [0:28..0:31): Int => scala.Int#
[5:2..5:8): "fooo" => scala.Predef.augmentString(*)
  [0:13..0:26): augmentString => scala.Predef.augmentString(String).
  [0:27..0:28): * => _star_.

semanticdb/integration/src/main/scala/example/Types.scala
---------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/Types.scala
Text => non-empty
Language => Scala
Symbols => 178 entries
Occurrences => 228 entries

Symbols:
java. => package java
java.nio. => package nio
java.nio.file. => package file
java.nio.file.LinkOption# => final enum class LinkOption.{+4 decls}
  extends Enum[LinkOption]
  extends OpenOption
  extends CopyOption
java.nio.file.LinkOption#NOFOLLOW_LINKS. => final static enum field NOFOLLOW_LINKS: LinkOption
  LinkOption => java.nio.file.LinkOption#
scala. => package scala
scala.Int# => abstract final class Int.{+111 decls}
  extends AnyVal
scala.Option# => @SerialVersionUID abstract sealed class Option[A: <?>].{+25 decls}
  extends AnyRef
  extends Product
  extends Serializable
scala.Predef.`???`(). => method ???: : Nothing
  Nothing => scala.Nothing#
scala.Predef.classOf(). => method classOf: [T: <?>] => : Class[T]
  T => scala.Predef.classOf().[T]
  Class => scala.Predef.Class#
scala.annotation. => package annotation
scala.annotation.StaticAnnotation# => trait StaticAnnotation
  extends Annotation
scala.collection.SeqLike#length(). => abstract method length: : Int
  Int => scala.Int#
scala.language. => final object language
scala.language.existentials(). => implicit lazy val field existentials: existentials
  existentials => scala.languageFeature.existentials#
scala.language.higherKinds(). => implicit lazy val field higherKinds: higherKinds
  higherKinds => scala.languageFeature.higherKinds#
scala.package.List# => type List: [A: <?>] => >: List[A] <: List[A]
  A => scala.package.List#[A]
  List => scala.collection.immutable.List#
scala.util. => package util
scala.util.Either. => final object Either
types. => package types
types.B# => class B.{+1 decls}
  extends AnyRef
types.B#`<init>`(). => primary ctor <init>: (): B
  B => types.B#
types.C# => class C.{+1 decls}
  extends AnyRef
types.C#`<init>`(). => primary ctor <init>: (): C
  C => types.C#
types.P# => class P.{+5 decls}
  extends AnyRef
types.P#C# => class C.{+1 decls}
  extends AnyRef
types.P#C#`<init>`(). => primary ctor <init>: (): P.this.C
  P => types.P#
  C => types.P#C#
types.P#X# => class X.{+1 decls}
  extends AnyRef
types.P#X#`<init>`(). => primary ctor <init>: (): P.this.X
  P => types.P#
  X => types.P#X#
types.P#`<init>`(). => primary ctor <init>: (): P
  P => types.P#
types.P#x(). => val method x: : P.this.X
  P => types.P#
  X => types.P#X#
types.P#x. => private[this] val field x: P.this.X
  P => types.P#
  X => types.P#X#
types.T# => class T.{+5 decls}
  extends AnyRef
types.T#C# => class C.{+1 decls}
  extends AnyRef
types.T#C#`<init>`(). => primary ctor <init>: (): T.this.C
  T => types.T#
  C => types.T#C#
types.T#X# => class X.{+1 decls}
  extends AnyRef
types.T#X#`<init>`(). => primary ctor <init>: (): T.this.X
  T => types.T#
  X => types.T#X#
types.T#`<init>`(). => primary ctor <init>: (): T
  T => types.T#
types.T#x(). => val method x: : T.this.X
  T => types.T#
  X => types.T#X#
types.T#x. => private[this] val field x: T.this.X
  T => types.T#
  X => types.T#X#
types.Test. => final object Test
types.Test.C# => class C.{+50 decls}
  extends M
types.Test.C#$anon#L# => type L: [T >: Nothing <: Any] => >: List[T] <: List[T]
  T => types.Test.C#$anon#L#[T]
  Nothing => scala.Nothing#
  Any => scala.Any#
  List => scala.package.List#
types.Test.C#$anon#L#[T] => typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#$anon#k(). => abstract method k: : Int
  Int => scala.Int#
types.Test.C#ByNameType. => final object ByNameType
types.Test.C#ByNameType.m1(=>Int). => method m1: (x: => Int): Int
  x => types.Test.C#ByNameType.m1(=>Int).(x)
  Int => scala.Int#
types.Test.C#ByNameType.m1(=>Int).(x) => param x: => Int
  Int => scala.Int#
types.Test.C#ClassInfoType1. => final object ClassInfoType1
types.Test.C#ClassInfoType2# => class ClassInfoType2.{+2 decls}
  extends B
types.Test.C#ClassInfoType2#`<init>`(). => primary ctor <init>: (): C.this.ClassInfoType2
  C => types.Test.C#
  ClassInfoType2 => types.Test.C#ClassInfoType2#
types.Test.C#ClassInfoType2#x(). => method x: : Int
  Int => scala.Int#
types.Test.C#ClassInfoType3# => trait ClassInfoType3[T >: Nothing <: Any]
  extends AnyRef
types.Test.C#ClassInfoType3#[T] => typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#Either(). => val method Either: : Either.type
  Either => scala.util.Either.
types.Test.C#Either. => private[this] val field Either: Either.type
  Either => scala.util.Either.
types.Test.C#MethodType. => final object MethodType
types.Test.C#MethodType.m3(). => method m3: : Int
  Int => scala.Int#
types.Test.C#MethodType.m4(). => method m4: (): Int
  Int => scala.Int#
types.Test.C#MethodType.m5(Int). => method m5: (x: Int): Int
  x => types.Test.C#MethodType.m5(Int).(x)
  Int => scala.Int#
types.Test.C#MethodType.m5(Int).(x) => param x: Int
  Int => scala.Int#
types.Test.C#MethodType.m6(T). => method m6: [T >: Nothing <: Any] => (x: T): T
  T => types.Test.C#MethodType.m6(T).[T]
  Nothing => scala.Nothing#
  Any => scala.Any#
  x => types.Test.C#MethodType.m6(T).(x)
types.Test.C#MethodType.m6(T).(x) => param x: T
  T => types.Test.C#MethodType.m6(T).[T]
types.Test.C#MethodType.m6(T).[T] => typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#MethodType.x1(). => method x1: : Int
  Int => scala.Int#
types.Test.C#MethodType.x2(). => method x2: : Int
  Int => scala.Int#
types.Test.C#RepeatedType# => case class RepeatedType.{+12 decls}
  extends AnyRef
  extends Product
  extends Serializable
types.Test.C#RepeatedType#`<init>`(String*). => primary ctor <init>: (val s: String*): C.this.RepeatedType
  s => types.Test.C#RepeatedType#`<init>`(String*).(s)
  String => scala.Predef.String#
  C => types.Test.C#
  RepeatedType => types.Test.C#RepeatedType#
types.Test.C#RepeatedType#`<init>`(String*).(s) => val param s: String*
  String => scala.Predef.String#
types.Test.C#RepeatedType#canEqual(Any). => synthetic method canEqual: (x$1: Any): Boolean
  x$1 => types.Test.C#RepeatedType#canEqual(Any).(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
types.Test.C#RepeatedType#canEqual(Any).(x$1) => synthetic param x$1: Any
  Any => scala.Any#
types.Test.C#RepeatedType#equals(Any). => synthetic method equals: (x$1: Any): Boolean
  x$1 => types.Test.C#RepeatedType#equals(Any).(x$1)
  Any => scala.Any#
  Boolean => scala.Boolean#
types.Test.C#RepeatedType#equals(Any).(x$1) => synthetic param x$1: Any
  Any => scala.Any#
types.Test.C#RepeatedType#hashCode(). => synthetic method hashCode: (): Int
  Int => scala.Int#
types.Test.C#RepeatedType#m1(Int*). => method m1: (x: Int*): Int
  x => types.Test.C#RepeatedType#m1(Int*).(x)
  Int => scala.Int#
types.Test.C#RepeatedType#m1(Int*).(x) => param x: Int*
  Int => scala.Int#
types.Test.C#RepeatedType#productArity(). => synthetic method productArity: : Int
  Int => scala.Int#
types.Test.C#RepeatedType#productElement(Int). => synthetic method productElement: (x$1: Int): Any
  x$1 => types.Test.C#RepeatedType#productElement(Int).(x$1)
  Int => scala.Int#
  Any => scala.Any#
types.Test.C#RepeatedType#productElement(Int).(x$1) => synthetic param x$1: Int
  Int => scala.Int#
types.Test.C#RepeatedType#productIterator(). => synthetic method productIterator: : Iterator[Any]
  Iterator => scala.collection.Iterator#
  Any => scala.Any#
types.Test.C#RepeatedType#productPrefix(). => synthetic method productPrefix: : String
  String => java.lang.String#
types.Test.C#RepeatedType#s(). => val method s: : String*
  String => scala.Predef.String#
types.Test.C#RepeatedType#s. => private[this] val field s: String*
  String => scala.Predef.String#
types.Test.C#RepeatedType#toString(). => synthetic method toString: (): String
  String => java.lang.String#
types.Test.C#RepeatedType. => final synthetic object RepeatedType
types.Test.C#RepeatedType.apply(String*). => case synthetic method apply: (s: <?>): C.this.RepeatedType
  s => types.Test.C#RepeatedType.apply(String*).(s)
  C => types.Test.C#
  RepeatedType => types.Test.C#RepeatedType#
types.Test.C#RepeatedType.toString(). => final synthetic method toString: (): String
  String => java.lang.String#
types.Test.C#RepeatedType.unapplySeq(RepeatedType). => case synthetic method unapplySeq: (x$0: C.this.RepeatedType): Option[Seq[String]]
  x$0 => types.Test.C#RepeatedType.unapplySeq(RepeatedType).(x$0)
  C => types.Test.C#
  RepeatedType => types.Test.C#RepeatedType#
  Option => scala.Option#
  Seq => scala.package.Seq#
  String => scala.Predef.String#
types.Test.C#RepeatedType.unapplySeq(RepeatedType).(x$0) => synthetic param x$0: C.this.RepeatedType
  C => types.Test.C#
  RepeatedType => types.Test.C#RepeatedType#
types.Test.C#TypeType. => final object TypeType
types.Test.C#TypeType.T1# => abstract type T1: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#TypeType.T4# => type T4: >: C <: C
  C => types.Test.C#
types.Test.C#TypeType.T5# => type T5: [U >: Nothing <: Any] => >: U <: U
  U => types.Test.C#TypeType.T5#[U]
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#TypeType.T5#[U] => typeparam U: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#TypeType.m2(). => method m2: [T2 >: C <: C] => : Nothing
  T2 => types.Test.C#TypeType.m2().[T2]
  C => types.Test.C#
  Nothing => scala.Nothing#
types.Test.C#TypeType.m2().[T2] => typeparam T2: >: C <: C
  C => types.Test.C#
types.Test.C#TypeType.m3(). => method m3: [M3 [M3][_: <?>] => >: Nothing <: Any] => : Nothing
  M3 => types.Test.C#TypeType.m3().[M3]
  M3][_ => types.Test.C#TypeType.m3().[M3][_]
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#TypeType.m3().[M3] => typeparam M3: [M3][_: <?>] => >: Nothing <: Any
  M3][_ => types.Test.C#TypeType.m3().[M3][_]
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#`<init>`(). => primary ctor <init>: (): C
  C => types.Test.C#
types.Test.C#annType1(). => val method annType1: : T @ann[Int]
  T => types.T#
  ann => types.ann#
  Int => scala.Int#
types.Test.C#annType1. => private[this] val field annType1: T @ann[Int]
  T => types.T#
  ann => types.ann#
  Int => scala.Int#
types.Test.C#annType2(). => val method annType2: : T @ann1 @ann2
  T => types.T#
  ann1 => types.ann1#
  ann2 => types.ann2#
types.Test.C#annType2. => private[this] val field annType2: T @ann1 @ann2
  T => types.T#
  ann1 => types.ann1#
  ann2 => types.ann2#
types.Test.C#compoundType1(). => val method compoundType1: : AnyRef { method k: Int }
  AnyRef => scala.AnyRef#
  k => types.Test.C#$anon#k().
  Int => scala.Int#
types.Test.C#compoundType1. => private[this] val field compoundType1: AnyRef { method k: Int }
  AnyRef => scala.AnyRef#
  k => types.Test.C#$anon#k().
  Int => scala.Int#
types.Test.C#compoundType2(). => val method compoundType2: : M with N {}
  M => types.Test.M#
  N => types.Test.N#
types.Test.C#compoundType2. => private[this] val field compoundType2: M with N {}
  M => types.Test.M#
  N => types.Test.N#
types.Test.C#compoundType3(). => val method compoundType3: : M with N { method k: Int }
  M => types.Test.M#
  N => types.Test.N#
  k => types.Test.C#$anon#k().
  Int => scala.Int#
types.Test.C#compoundType3. => private[this] val field compoundType3: M with N { method k: Int }
  M => types.Test.M#
  N => types.Test.N#
  k => types.Test.C#$anon#k().
  Int => scala.Int#
types.Test.C#existentialType1(). => val method existentialType1: : T forSome { type T >: Nothing <: Any }
  T => types.Test.C#existentialType1.T#
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#existentialType1. => private[this] val field existentialType1: T forSome { type T >: Nothing <: Any }
  T => types.Test.C#existentialType1.T#
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#existentialType1.T# => abstract type T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#p(). => val method p: : P
  P => types.P#
types.Test.C#p. => private[this] val field p: P
  P => types.P#
types.Test.C#singleType1(). => val method singleType1: : C.this.x.type
  C => types.Test.C#
  x => types.Test.C#x().
types.Test.C#singleType1. => private[this] val field singleType1: C.this.x.type
  C => types.Test.C#
  x => types.Test.C#x().
types.Test.C#singleType2(). => val method singleType2: : C.this.p.x.type
  C => types.Test.C#
  p => types.Test.C#p().
  x => types.P#x().
types.Test.C#singleType2. => private[this] val field singleType2: C.this.p.x.type
  C => types.Test.C#
  p => types.Test.C#p().
  x => types.P#x().
types.Test.C#superType1(). => val method superType1: : Int
  Int => scala.Int#
types.Test.C#superType1. => private[this] val field superType1: Int
  Int => scala.Int#
types.Test.C#superType2(). => val method superType2: : Int
  Int => scala.Int#
types.Test.C#superType2. => private[this] val field superType2: Int
  Int => scala.Int#
types.Test.C#superType3(). => val method superType3: : Int
  Int => scala.Int#
types.Test.C#superType3. => private[this] val field superType3: Int
  Int => scala.Int#
types.Test.C#thisType1(). => val method thisType1: : C.this.type
  C => types.Test.C#
types.Test.C#thisType1. => private[this] val field thisType1: C.this.type
  C => types.Test.C#
types.Test.C#thisType2(). => val method thisType2: : C.this.type
  C => types.Test.C#
types.Test.C#thisType2. => private[this] val field thisType2: C.this.type
  C => types.Test.C#
types.Test.C#typeLambda1(). => method typeLambda1: [M [M][_: <?>] => >: Nothing <: Any] => : Nothing
  M => types.Test.C#typeLambda1().[M]
  M][_ => types.Test.C#typeLambda1().[M][_]
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#typeLambda1().[M] => typeparam M: [M][_: <?>] => >: Nothing <: Any
  M][_ => types.Test.C#typeLambda1().[M][_]
  Nothing => scala.Nothing#
  Any => scala.Any#
types.Test.C#typeRef1(). => val method typeRef1: : C
  C => types.Test.C#
types.Test.C#typeRef1. => private[this] val field typeRef1: C
  C => types.Test.C#
types.Test.C#typeRef2(). => val method typeRef2: : C.this.p.C
  C => types.Test.C#
  p => types.Test.C#p().
  C => types.P#C#
types.Test.C#typeRef2. => private[this] val field typeRef2: C.this.p.C
  C => types.Test.C#
  p => types.Test.C#p().
  C => types.P#C#
types.Test.C#typeRef3(). => val method typeRef3: : T#C
  T => types.T#
  C => types.T#C#
types.Test.C#typeRef3. => private[this] val field typeRef3: T#C
  T => types.T#
  C => types.T#C#
types.Test.C#typeRef4(). => val method typeRef4: : List[Int]
  List => scala.package.List#
  Int => scala.Int#
types.Test.C#typeRef4. => private[this] val field typeRef4: List[Int]
  List => scala.package.List#
  Int => scala.Int#
types.Test.C#x(). => val method x: : C.this.p.X
  C => types.Test.C#
  p => types.Test.C#p().
  X => types.P#X#
types.Test.C#x. => private[this] val field x: C.this.p.X
  C => types.Test.C#
  p => types.Test.C#p().
  X => types.P#X#
types.Test.Literal. => final object Literal
types.Test.Literal.bool(). => final val method bool: : true
types.Test.Literal.bool. => private[this] final val field bool: true
types.Test.Literal.char(). => final val method char: : 'a'
types.Test.Literal.char. => private[this] final val field char: 'a'
types.Test.Literal.clazzOf(). => final val method clazzOf: : Class[Option[Int]]
  Class => java.lang.Class#
  Option => scala.Option#
  Int => scala.Int#
types.Test.Literal.clazzOf. => private[this] final val field clazzOf: Class[Option[Int]]
  Class => java.lang.Class#
  Option => scala.Option#
  Int => scala.Int#
types.Test.Literal.double(). => final val method double: : 2.0
types.Test.Literal.double. => private[this] final val field double: 2.0
types.Test.Literal.float(). => final val method float: : 1.0f
types.Test.Literal.float. => private[this] final val field float: 1.0f
types.Test.Literal.int(). => final val method int: : 1
types.Test.Literal.int. => private[this] final val field int: 1
types.Test.Literal.javaEnum(). => final val method javaEnum: : NOFOLLOW_LINKS.type
  NOFOLLOW_LINKS => java.nio.file.LinkOption#NOFOLLOW_LINKS.
types.Test.Literal.javaEnum. => private[this] final val field javaEnum: NOFOLLOW_LINKS.type
  NOFOLLOW_LINKS => java.nio.file.LinkOption#NOFOLLOW_LINKS.
types.Test.Literal.long(). => final val method long: : 1L
types.Test.Literal.long. => private[this] final val field long: 1L
types.Test.Literal.nil(). => final val method nil: : null
types.Test.Literal.nil. => private[this] final val field nil: null
types.Test.Literal.string(). => final val method string: : "a"
types.Test.Literal.string. => private[this] final val field string: "a"
types.Test.Literal.unit(). => final val method unit: : Unit
  Unit => scala.Unit#
types.Test.Literal.unit. => private[this] final val field unit: Unit
  Unit => scala.Unit#
types.Test.M# => class M.{+2 decls}
  extends AnyRef
types.Test.M#`<init>`(). => primary ctor <init>: (): M
  M => types.Test.M#
types.Test.M#m(). => method m: : Int
  Int => scala.Int#
types.Test.N# => class N.{+2 decls}
  extends AnyRef
types.Test.N#`<init>`(). => primary ctor <init>: (): N
  N => types.Test.N#
types.Test.N#n(). => method n: : Int
  Int => scala.Int#
types.ann# => class ann[T >: Nothing <: Any].{+2 decls}
  extends Annotation
  extends StaticAnnotation
types.ann#[T] => typeparam T: >: Nothing <: Any
  Nothing => scala.Nothing#
  Any => scala.Any#
types.ann#`<init>`(T). => primary ctor <init>: (x: T): ann[T]
  x => types.ann#`<init>`(T).(x)
  T => types.ann#[T]
  ann => types.ann#
types.ann#`<init>`(T).(x) => param x: T
  T => types.ann#[T]
types.ann#x. => private[this] val field x: T
  T => types.ann#[T]
types.ann1# => class ann1.{+1 decls}
  extends Annotation
  extends StaticAnnotation
types.ann1#`<init>`(). => primary ctor <init>: (): ann1
  ann1 => types.ann1#
types.ann2# => class ann2.{+1 decls}
  extends Annotation
  extends StaticAnnotation
types.ann2#`<init>`(). => primary ctor <init>: (): ann2
  ann2 => types.ann2#

Occurrences:
[0:8..0:13): types <= types.
[2:7..2:12): scala => scala.
[2:13..2:21): language => scala.language.
[2:22..2:34): existentials => scala.language.existentials().
[3:7..3:12): scala => scala.
[3:13..3:21): language => scala.language.
[3:22..3:33): higherKinds => scala.language.higherKinds().
[5:6..5:9): ann <= types.ann#
[5:10..5:11): T <= types.ann#[T]
[5:12..5:12):  <= types.ann#`<init>`(T).
[5:13..5:14): x <= types.ann#x.
[5:16..5:17): T => types.ann#[T]
[5:27..5:32): scala => scala.
[5:33..5:43): annotation => scala.annotation.
[5:44..5:60): StaticAnnotation => scala.annotation.StaticAnnotation#
[6:6..6:10): ann1 <= types.ann1#
[6:11..6:11):  <= types.ann1#`<init>`().
[6:19..6:24): scala => scala.
[6:25..6:35): annotation => scala.annotation.
[6:36..6:52): StaticAnnotation => scala.annotation.StaticAnnotation#
[7:6..7:10): ann2 <= types.ann2#
[7:11..7:11):  <= types.ann2#`<init>`().
[7:19..7:24): scala => scala.
[7:25..7:35): annotation => scala.annotation.
[7:36..7:52): StaticAnnotation => scala.annotation.StaticAnnotation#
[9:6..9:7): B <= types.B#
[11:6..11:7): C <= types.C#
[13:6..13:7): P <= types.P#
[13:8..13:8):  <= types.P#`<init>`().
[14:8..14:9): C <= types.P#C#
[14:9..14:9):  <= types.P#C#`<init>`().
[15:8..15:9): X <= types.P#X#
[15:9..15:9):  <= types.P#X#`<init>`().
[16:6..16:7): x <= types.P#x().
[16:14..16:15): X => types.P#X#
[17:0..17:0):  => types.P#X#`<init>`().
[19:6..19:7): T <= types.T#
[19:8..19:8):  <= types.T#`<init>`().
[20:8..20:9): C <= types.T#C#
[20:9..20:9):  <= types.T#C#`<init>`().
[21:8..21:9): X <= types.T#X#
[21:9..21:9):  <= types.T#X#`<init>`().
[22:6..22:7): x <= types.T#x().
[22:14..22:15): X => types.T#X#
[23:0..23:0):  => types.T#X#`<init>`().
[25:7..25:11): Test <= types.Test.
[26:8..26:9): M <= types.Test.M#
[26:10..26:10):  <= types.Test.M#`<init>`().
[27:8..27:9): m <= types.Test.M#m().
[27:11..27:14): Int => scala.Int#
[27:17..27:20): ??? => scala.Predef.`???`().
[30:8..30:9): N <= types.Test.N#
[30:10..30:10):  <= types.Test.N#`<init>`().
[31:8..31:9): n <= types.Test.N#n().
[31:11..31:14): Int => scala.Int#
[31:17..31:20): ??? => scala.Predef.`???`().
[34:8..34:9): C <= types.Test.C#
[34:10..34:10):  <= types.Test.C#`<init>`().
[34:18..34:19): M => types.Test.M#
[34:20..34:20):  => types.Test.M#`<init>`().
[35:8..35:9): p <= types.Test.C#p().
[35:16..35:17): P => types.P#
[35:17..35:17):  => types.P#`<init>`().
[36:8..36:9): x <= types.Test.C#x().
[36:12..36:13): p => types.Test.C#p().
[36:14..36:15): x => types.P#x().
[38:8..38:16): typeRef1 <= types.Test.C#typeRef1().
[38:18..38:19): C => types.Test.C#
[38:22..38:25): ??? => scala.Predef.`???`().
[39:8..39:16): typeRef2 <= types.Test.C#typeRef2().
[39:18..39:19): p => types.Test.C#p().
[39:20..39:21): C => types.P#C#
[39:24..39:27): ??? => scala.Predef.`???`().
[40:8..40:16): typeRef3 <= types.Test.C#typeRef3().
[40:18..40:19): T => types.T#
[40:20..40:21): C => types.T#C#
[40:24..40:27): ??? => scala.Predef.`???`().
[41:8..41:16): typeRef4 <= types.Test.C#typeRef4().
[41:18..41:22): List => scala.package.List#
[41:23..41:26): Int => scala.Int#
[41:30..41:33): ??? => scala.Predef.`???`().
[43:8..43:19): singleType1 <= types.Test.C#singleType1().
[43:21..43:22): x => types.Test.C#x().
[43:30..43:33): ??? => scala.Predef.`???`().
[44:8..44:19): singleType2 <= types.Test.C#singleType2().
[44:21..44:22): p => types.Test.C#p().
[44:23..44:24): x => types.P#x().
[44:32..44:35): ??? => scala.Predef.`???`().
[45:8..45:14): Either <= types.Test.C#Either().
[45:17..45:22): scala => scala.
[45:23..45:27): util => scala.util.
[45:28..45:34): Either => scala.util.Either.
[47:8..47:17): thisType1 <= types.Test.C#thisType1().
[47:31..47:34): ??? => scala.Predef.`???`().
[48:8..48:17): thisType2 <= types.Test.C#thisType2().
[48:19..48:20): C => types.Test.C#
[48:33..48:36): ??? => scala.Predef.`???`().
[50:8..50:18): superType1 <= types.Test.C#superType1().
[50:27..50:28): m => types.Test.M#m().
[51:8..51:18): superType2 <= types.Test.C#superType2().
[51:27..51:28): M => types.Test.C#
[51:30..51:31): m => types.Test.M#m().
[52:8..52:18): superType3 <= types.Test.C#superType3().
[52:21..52:22): C => types.Test.C#
[52:29..52:30): M => types.Test.C#
[52:32..52:33): m => types.Test.M#m().
[54:8..54:21): compoundType1 <= types.Test.C#compoundType1().
[54:29..54:30): k <= types.Test.C#$anon#k().
[54:32..54:35): Int => scala.Int#
[54:40..54:43): ??? => scala.Predef.`???`().
[55:8..55:21): compoundType2 <= types.Test.C#compoundType2().
[55:23..55:24): M => types.Test.M#
[55:30..55:31): N => types.Test.N#
[55:34..55:37): ??? => scala.Predef.`???`().
[56:8..56:21): compoundType3 <= types.Test.C#compoundType3().
[56:23..56:24): M => types.Test.M#
[56:30..56:31): N => types.Test.N#
[56:38..56:39): k <= types.Test.C#$anon#k().
[56:41..56:44): Int => scala.Int#
[56:49..56:52): ??? => scala.Predef.`???`().
[58:8..58:16): annType1 <= types.Test.C#annType1().
[58:18..58:19): T => types.T#
[58:21..58:24): ann => types.ann#
[58:24..58:24):  => types.ann#`<init>`(T).
[58:31..58:34): ??? => scala.Predef.`???`().
[59:8..59:16): annType2 <= types.Test.C#annType2().
[59:18..59:19): T => types.T#
[59:21..59:25): ann1 => types.ann1#
[59:26..59:26):  => types.ann1#`<init>`().
[59:27..59:31): ann2 => types.ann2#
[59:32..59:32):  => types.ann2#`<init>`().
[59:34..59:37): ??? => scala.Predef.`???`().
[61:8..61:24): existentialType1 <= types.Test.C#existentialType1().
[61:26..61:27): T => types.Test.C#existentialType1.T#
[61:43..61:44): T <= types.Test.C#existentialType1.T#
[61:49..61:52): ??? => scala.Predef.`???`().
[63:8..63:19): typeLambda1 <= types.Test.C#typeLambda1().
[63:20..63:21): M <= types.Test.C#typeLambda1().[M]
[63:28..63:31): ??? => scala.Predef.`???`().
[64:4..64:15): typeLambda1 => types.Test.C#typeLambda1().
[64:24..64:25): L <= types.Test.C#$anon#L#
[64:26..64:27): T <= types.Test.C#$anon#L#[T]
[64:31..64:35): List => scala.package.List#
[64:36..64:37): T => types.Test.C#$anon#L#[T]
[64:42..64:43): L => types.Test.C#$anon#L#
[66:11..66:25): ClassInfoType1 <= types.Test.C#ClassInfoType1.
[67:10..67:24): ClassInfoType2 <= types.Test.C#ClassInfoType2#
[67:25..67:25):  <= types.Test.C#ClassInfoType2#`<init>`().
[67:33..67:34): B => types.B#
[67:35..67:35):  => types.B#`<init>`().
[67:41..67:42): x <= types.Test.C#ClassInfoType2#x().
[68:10..68:24): ClassInfoType3 <= types.Test.C#ClassInfoType3#
[68:25..68:26): T <= types.Test.C#ClassInfoType3#[T]
[70:11..70:21): MethodType <= types.Test.C#MethodType.
[71:10..71:12): x1 <= types.Test.C#MethodType.x1().
[71:14..71:17): Int => scala.Int#
[71:20..71:23): ??? => scala.Predef.`???`().
[72:10..72:12): x2 <= types.Test.C#MethodType.x2().
[72:14..72:17): Int => scala.Int#
[72:20..72:23): ??? => scala.Predef.`???`().
[73:10..73:12): m3 <= types.Test.C#MethodType.m3().
[73:14..73:17): Int => scala.Int#
[73:20..73:23): ??? => scala.Predef.`???`().
[74:10..74:12): m4 <= types.Test.C#MethodType.m4().
[74:16..74:19): Int => scala.Int#
[74:22..74:25): ??? => scala.Predef.`???`().
[75:10..75:12): m5 <= types.Test.C#MethodType.m5(Int).
[75:13..75:14): x <= types.Test.C#MethodType.m5(Int).(x)
[75:16..75:19): Int => scala.Int#
[75:22..75:25): Int => scala.Int#
[75:28..75:31): ??? => scala.Predef.`???`().
[76:10..76:12): m6 <= types.Test.C#MethodType.m6(T).
[76:13..76:14): T <= types.Test.C#MethodType.m6(T).[T]
[76:16..76:17): x <= types.Test.C#MethodType.m6(T).(x)
[76:19..76:20): T => types.Test.C#MethodType.m6(T).[T]
[76:23..76:24): T => types.Test.C#MethodType.m6(T).[T]
[76:27..76:30): ??? => scala.Predef.`???`().
[79:11..79:21): ByNameType <= types.Test.C#ByNameType.
[80:10..80:12): m1 <= types.Test.C#ByNameType.m1(=>Int).
[80:13..80:14): x <= types.Test.C#ByNameType.m1(=>Int).(x)
[80:19..80:22): Int => scala.Int#
[80:25..80:28): Int => scala.Int#
[80:31..80:34): ??? => scala.Predef.`???`().
[83:15..83:27): RepeatedType <= types.Test.C#RepeatedType#
[83:27..83:27):  <= types.Test.C#RepeatedType#`<init>`(String*).
[83:28..83:29): s <= types.Test.C#RepeatedType#s().
[83:31..83:37): String => scala.`<repeated>`#
[84:10..84:12): m1 <= types.Test.C#RepeatedType#m1(Int*).
[84:13..84:14): x <= types.Test.C#RepeatedType#m1(Int*).(x)
[84:16..84:19): Int => scala.`<repeated>`#
[84:23..84:26): Int => scala.Int#
[84:29..84:30): s => types.Test.C#RepeatedType#s().
[84:31..84:37): length => scala.collection.SeqLike#length().
[87:11..87:19): TypeType <= types.Test.C#TypeType.
[88:11..88:13): T1 <= types.Test.C#TypeType.T1#
[89:10..89:12): m2 <= types.Test.C#TypeType.m2().
[89:13..89:15): T2 <= types.Test.C#TypeType.m2().[T2]
[89:19..89:20): C => types.Test.C#
[89:24..89:25): C => types.Test.C#
[89:29..89:32): ??? => scala.Predef.`???`().
[90:10..90:12): m3 <= types.Test.C#TypeType.m3().
[90:13..90:15): M3 <= types.Test.C#TypeType.m3().[M3]
[90:22..90:25): ??? => scala.Predef.`???`().
[91:11..91:13): T4 <= types.Test.C#TypeType.T4#
[91:16..91:17): C => types.Test.C#
[92:11..92:13): T5 <= types.Test.C#TypeType.T5#
[92:14..92:15): U <= types.Test.C#TypeType.T5#[U]
[92:19..92:20): U => types.Test.C#TypeType.T5#[U]
[96:9..96:16): Literal <= types.Test.Literal.
[97:14..97:17): int <= types.Test.Literal.int().
[98:14..98:18): long <= types.Test.Literal.long().
[99:14..99:19): float <= types.Test.Literal.float().
[100:14..100:20): double <= types.Test.Literal.double().
[101:14..101:17): nil <= types.Test.Literal.nil().
[102:14..102:18): char <= types.Test.Literal.char().
[103:14..103:20): string <= types.Test.Literal.string().
[104:14..104:18): bool <= types.Test.Literal.bool().
[105:14..105:18): unit <= types.Test.Literal.unit().
[106:14..106:22): javaEnum <= types.Test.Literal.javaEnum().
[106:25..106:29): java => java.
[106:30..106:33): nio => java.nio.
[106:34..106:38): file => java.nio.file.
[106:39..106:49): LinkOption => java.nio.file.LinkOption#
[106:50..106:64): NOFOLLOW_LINKS => java.nio.file.LinkOption#NOFOLLOW_LINKS.
[107:14..107:21): clazzOf <= types.Test.Literal.clazzOf().
[107:24..107:31): classOf => scala.Predef.classOf().
[107:32..107:38): Option => scala.Option#
[107:39..107:42): Int => scala.Int#

semanticdb/integration/src/main/scala/example/Vals.scala
--------------------------------------------------------

Summary:
Schema => SemanticDB v3
Uri => semanticdb/integration/src/main/scala/example/Vals.scala
Text => non-empty
Language => Scala
Symbols => 52 entries
Occurrences => 117 entries

Symbols:
example. => package example
example.ValUsages. => final object ValUsages
example.ValUsages.v(). => val method v: : Vals
  Vals => example.Vals#
example.ValUsages.v. => private[this] val field v: Vals
  Vals => example.Vals#
example.Vals# => abstract class Vals.{+30 decls}
  extends AnyRef
example.Vals#`<init>`(Int,Int,Int). => primary ctor <init>: (p: Int, val xp: Int, var yp: Int): Vals
  p => example.Vals#`<init>`(Int,Int,Int).(p)
  Int => scala.Int#
  xp => example.Vals#`<init>`(Int,Int,Int).(xp)
  yp => example.Vals#`<init>`(Int,Int,Int).(yp)
  Vals => example.Vals#
example.Vals#`<init>`(Int,Int,Int).(p) => param p: Int
  Int => scala.Int#
example.Vals#`<init>`(Int,Int,Int).(xp) => val param xp: Int
  Int => scala.Int#
example.Vals#`<init>`(Int,Int,Int).(yp) => var param yp: Int
  Int => scala.Int#
example.Vals#`yam_=`(Int). => abstract var method yam_=: (x$1: Int): Unit
  x$1 => example.Vals#`yam_=`(Int).(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
example.Vals#`yam_=`(Int).(x$1) => synthetic param x$1: Int
  Int => scala.Int#
example.Vals#`yfm_=`(Int). => final var method yfm_=: (x$1: Int): Unit
  x$1 => example.Vals#`yfm_=`(Int).(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
example.Vals#`yfm_=`(Int).(x$1) => synthetic param x$1: Int
  Int => scala.Int#
example.Vals#`yim_=`(Int). => var method yim_=: (x$1: Int): Unit
  x$1 => example.Vals#`yim_=`(Int).(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
example.Vals#`yim_=`(Int).(x$1) => synthetic param x$1: Int
  Int => scala.Int#
example.Vals#`ym_=`(Int). => var method ym_=: (x$1: Int): Unit
  x$1 => example.Vals#`ym_=`(Int).(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
example.Vals#`ym_=`(Int).(x$1) => synthetic param x$1: Int
  Int => scala.Int#
example.Vals#`yp_=`(Int). => var method yp_=: (x$1: Int): Unit
  x$1 => example.Vals#`yp_=`(Int).(x$1)
  Int => scala.Int#
  Unit => scala.Unit#
example.Vals#`yp_=`(Int).(x$1) => synthetic param x$1: Int
  Int => scala.Int#
example.Vals#m(). => method m: : Unit
  Unit => scala.Unit#
example.Vals#p. => private[this] val field p: Int
  Int => scala.Int#
example.Vals#xam(). => abstract val method xam: : Int
  Int => scala.Int#
example.Vals#xfm(). => final val method xfm: : Int
  Int => scala.Int#
example.Vals#xfm. => private[this] final val field xfm: Int
  Int => scala.Int#
example.Vals#xim(). => implicit val method xim: : Int
  Int => scala.Int#
example.Vals#xim. => private[this] val field xim: Int
  Int => scala.Int#
example.Vals#xlm. => private[this] val field xlm: Int
  Int => scala.Int#
example.Vals#xm(). => val method xm: : Int
  Int => scala.Int#
example.Vals#xm. => private[this] val field xm: Int
  Int => scala.Int#
example.Vals#xp(). => val method xp: : Int
  Int => scala.Int#
example.Vals#xp. => private[this] val field xp: Int
  Int => scala.Int#
example.Vals#xzlm(). => private[this] lazy val field xzlm: Int
  Int => scala.Int#
example.Vals#xzm(). => lazy val field xzm: Int
  Int => scala.Int#
example.Vals#yam(). => abstract var method yam: : Int
  Int => scala.Int#
example.Vals#yfm(). => final var method yfm: : Int
  Int => scala.Int#
example.Vals#yfm. => private[this] final var field yfm: Int
  Int => scala.Int#
example.Vals#yim(). => implicit var method yim: : Int
  Int => scala.Int#
example.Vals#yim. => private[this] var field yim: Int
  Int => scala.Int#
example.Vals#ylm. => private[this] var field ylm: Int
  Int => scala.Int#
example.Vals#ym(). => var method ym: : Int
  Int => scala.Int#
example.Vals#ym. => private[this] var field ym: Int
  Int => scala.Int#
example.Vals#yp(). => var method yp: : Int
  Int => scala.Int#
example.Vals#yp. => private[this] var field yp: Int
  Int => scala.Int#
local0 => val local xl: Int
  Int => scala.Int#
local1 => lazy val local xzl: Int
  Int => scala.Int#
local2 => implicit val local xil: Int
  Int => scala.Int#
local3 => var local yl: Int
  Int => scala.Int#
local4 => implicit var local yil: Int
  Int => scala.Int#
scala.Int# => abstract final class Int.{+111 decls}
  extends AnyVal
scala.Int#`+`(Int). => abstract method +: (x: <?>): Int
  x => scala.Int#`+`(Int).(x)
  Int => scala.Int#
scala.Predef.`???`(). => method ???: : Nothing
  Nothing => scala.Nothing#
scala.Predef.println(Any). => method println: (x: <?>): Unit
  x => scala.Predef.println(Any).(x)
  Unit => scala.Unit#

Occurrences:
[0:8..0:15): example <= example.
[2:15..2:19): Vals <= example.Vals#
[2:19..2:19):  <= example.Vals#`<init>`(Int,Int,Int).
[2:20..2:21): p <= example.Vals#p.
[2:23..2:26): Int => scala.Int#
[2:32..2:34): xp <= example.Vals#xp().
[2:36..2:39): Int => scala.Int#
[2:45..2:47): yp <= example.Vals#yp().
[2:49..2:52): Int => scala.Int#
[3:6..3:8): xm <= example.Vals#xm().
[3:10..3:13): Int => scala.Int#
[3:16..3:19): ??? => scala.Predef.`???`().
[4:6..4:9): xam <= example.Vals#xam().
[4:11..4:14): Int => scala.Int#
[5:20..5:23): xlm <= example.Vals#xlm.
[5:25..5:28): Int => scala.Int#
[5:31..5:34): ??? => scala.Predef.`???`().
[6:11..6:14): xzm <= example.Vals#xzm().
[6:16..6:19): Int => scala.Int#
[6:22..6:25): ??? => scala.Predef.`???`().
[7:25..7:29): xzlm <= example.Vals#xzlm().
[7:31..7:34): Int => scala.Int#
[7:37..7:40): ??? => scala.Predef.`???`().
[8:12..8:15): xfm <= example.Vals#xfm().
[8:17..8:20): Int => scala.Int#
[8:23..8:26): ??? => scala.Predef.`???`().
[9:15..9:18): xim <= example.Vals#xim().
[9:20..9:23): Int => scala.Int#
[9:26..9:29): ??? => scala.Predef.`???`().
[10:6..10:8): ym <= example.Vals#ym().
[10:10..10:13): Int => scala.Int#
[10:16..10:19): ??? => scala.Predef.`???`().
[11:6..11:9): yam <= example.Vals#yam().
[11:11..11:14): Int => scala.Int#
[12:20..12:23): ylm <= example.Vals#ylm.
[12:25..12:28): Int => scala.Int#
[12:31..12:34): ??? => scala.Predef.`???`().
[16:12..16:15): yfm <= example.Vals#yfm().
[16:17..16:20): Int => scala.Int#
[16:23..16:26): ??? => scala.Predef.`???`().
[17:15..17:18): yim <= example.Vals#yim().
[17:20..17:23): Int => scala.Int#
[17:26..17:29): ??? => scala.Predef.`???`().
[18:6..18:7): m <= example.Vals#m().
[19:8..19:10): xl <= local0
[19:12..19:15): Int => scala.Int#
[19:18..19:21): ??? => scala.Predef.`???`().
[20:13..20:16): xzl <= local1
[20:18..20:21): Int => scala.Int#
[20:24..20:27): ??? => scala.Predef.`???`().
[23:17..23:20): xil <= local2
[23:22..23:25): Int => scala.Int#
[23:28..23:31): ??? => scala.Predef.`???`().
[24:8..24:10): yl <= local3
[24:12..24:15): Int => scala.Int#
[24:18..24:21): ??? => scala.Predef.`???`().
[29:17..29:20): yil <= local4
[29:22..29:25): Int => scala.Int#
[29:28..29:31): ??? => scala.Predef.`???`().
[30:4..30:6): yl => local3
[30:9..30:11): xl => local0
[30:12..30:13): + => scala.Int#`+`(Int).
[30:14..30:16): yl => local3
[31:4..31:11): println => scala.Predef.println(Any).
[31:12..31:15): xzl => local1
[32:4..32:7): yil => local4
[32:10..32:13): xil => local2
[32:14..32:15): + => scala.Int#`+`(Int).
[32:16..32:19): yil => local4
[34:2..34:9): println => scala.Predef.println(Any).
[34:10..34:14): xzlm => example.Vals#xzlm().
[35:2..35:5): ylm => example.Vals#ylm.
[35:8..35:11): xlm => example.Vals#xlm.
[35:12..35:13): + => scala.Int#`+`(Int).
[35:14..35:17): ylm => example.Vals#ylm.
[38:7..38:16): ValUsages <= example.ValUsages.
[39:6..39:7): v <= example.ValUsages.v().
[39:9..39:13): Vals => example.Vals#
[39:16..39:19): ??? => scala.Predef.`???`().
[40:2..40:3): v => example.ValUsages.v().
[40:4..40:6): yp => example.Vals#`yp_=`(Int).
[40:9..40:10): v => example.ValUsages.v().
[40:11..40:13): xp => example.Vals#xp().
[40:14..40:15): + => scala.Int#`+`(Int).
[40:16..40:17): v => example.ValUsages.v().
[40:18..40:20): yp => example.Vals#yp().
[41:2..41:3): v => example.ValUsages.v().
[41:4..41:6): ym => example.Vals#`ym_=`(Int).
[41:9..41:10): v => example.ValUsages.v().
[41:11..41:13): xm => example.Vals#xm().
[41:14..41:15): + => scala.Int#`+`(Int).
[41:16..41:17): v => example.ValUsages.v().
[41:18..41:20): ym => example.Vals#ym().
[42:2..42:3): v => example.ValUsages.v().
[42:4..42:7): yam => example.Vals#`yam_=`(Int).
[42:10..42:11): v => example.ValUsages.v().
[42:12..42:15): xam => example.Vals#xam().
[42:16..42:17): + => scala.Int#`+`(Int).
[42:18..42:19): v => example.ValUsages.v().
[42:20..42:23): yam => example.Vals#yam().
[43:2..43:9): println => scala.Predef.println(Any).
[43:10..43:11): v => example.ValUsages.v().
[43:12..43:15): xzm => example.Vals#xzm().
[44:2..44:3): v => example.ValUsages.v().
[44:4..44:7): yfm => example.Vals#`yfm_=`(Int).
[44:10..44:11): v => example.ValUsages.v().
[44:12..44:15): xfm => example.Vals#xfm().
[44:16..44:17): + => scala.Int#`+`(Int).
[44:18..44:19): v => example.ValUsages.v().
[44:20..44:23): yfm => example.Vals#yfm().
[45:2..45:3): v => example.ValUsages.v().
[45:4..45:7): yim => example.Vals#`yim_=`(Int).
[45:10..45:11): v => example.ValUsages.v().
[45:12..45:15): xim => example.Vals#xim().
[45:16..45:17): + => scala.Int#`+`(Int).
[45:18..45:19): v => example.ValUsages.v().
[45:20..45:23): yim => example.Vals#yim().
