eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgIyBGZXRjaCBmb2xkZXJzIGZyb20gZGlzdHJpYnV0ZWQgY2FjaGUKICBzZnRwX2NhY2hlX3Jlc3RvcmU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICByZXN0b3JlOiB0cnVlCiAgICBtb3VudDoKICAgICAgLSAvZHJvbmUvLml2eTIKICAgICAgLSAvZHJvbmUvLmNvdXJzaWVyLWNhY2hlCiAgICAgIC0gL2Ryb25lLy5zYnQKICAgICAgLSAvZHJvbmUvLmdpdAoKICB0ZXN0czoKICAgIGltYWdlOiBzY2FsYXBsYXRmb3JtL3NjYWxhOjAuNgogICAgcHVsbDogdHJ1ZQogICAgdm9sdW1lczoKICAgICAgLSAvcGxhdGZvcm06L2tleXMKICAgIGNvbW1hbmRzOgogICAgICAtIGdpdCBmZXRjaCAtLXRhZ3MgJiYgZ2l0IGxvZyB8IGhlYWQgLW4gMjAKICAgICAgLSAuL2Jpbi9jaGVja0NMQS5zaAogICAgICAtIC4vYmluL3NjYWxhZm10IC0tdGVzdAogICAgICAtIHNidCAkVEVTVAoKICBwdWJsaXNoOgogICAgaW1hZ2U6IHNjYWxhcGxhdGZvcm0vc2NhbGE6MC42CiAgICBwdWxsOiB0cnVlCiAgICB2b2x1bWVzOgogICAgICAtIC9wbGF0Zm9ybTova2V5cwogICAgY29tbWFuZHM6CiAgICAgIC0gLi9iaW4vYmludHJheS5zaAogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKICAgICAgYnJhbmNoOiBbbWFzdGVyXQoKICBub3RpZnk6CiAgICBpbWFnZTogZHJpbGxzdGVyL2Ryb25lLWVtYWlsCiAgICBob3N0OiBzbXRwLm1haWxndW4ub3JnCiAgICB1c2VybmFtZTogbm9yZXBseUBkcm9uZS5nZWlyc3Nvbi5jb20KICAgIHBhc3N3b3JkOiAke01BSUxHVU5fUEFTU1dPUkR9CiAgICBmcm9tOiBub3JlcGx5QGRyb25lLmdlaXJzc29uLmNvbQogICAgcmVjaXBpZW50czoKICAgICAgLSBvbGFmdXJwZ0BnbWFpbC5jb20KICAgICAgLSB4ZW5vLmJ5QGdtYWlsLmNvbQogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1c2gKICAgICAgYnJhbmNoOiBbbWFzdGVyXQogICAgICBzdGF0dXM6IFtjaGFuZ2VkLCBmYWlsdXJlXQoKICAjIFNhdmUgZm9sZGVycyBpbiBkaXN0cmlidXRlZCBjYWNoZQogIHNmdHBfY2FjaGVfcmVidWlsZDoKICAgIGltYWdlOiBwbHVnaW5zL3NmdHAtY2FjaGUKICAgIHJlYnVpbGQ6IHRydWUKICAgIG1vdW50OgogICAgICAtIC9kcm9uZS8uaXZ5MgogICAgICAtIC9kcm9uZS8uY291cnNpZXItY2FjaGUKICAgICAgLSAvZHJvbmUvLnNidAogICAgICAtIC9kcm9uZS8uZ2l0CgptYXRyaXg6CiAgVEVTVDoKICAgIC0gY2ktZmFzdAogICAgLSBjaS1zbG93Cgo.6DSRQcnRABipJRd0gcf3wepyhH78en09S8oGcteaOhc