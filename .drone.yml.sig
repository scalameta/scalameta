eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgIyBGZXRjaCBmb2xkZXJzIGZyb20gZGlzdHJpYnV0ZWQgY2FjaGUKICBzZnRwX2NhY2hlX3Jlc3RvcmU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlCiAgICByZXN0b3JlOiB0cnVlCiAgICBtb3VudDoKICAgICAgLSAvZHJvbmUvLml2eTIKICAgICAgLSAvZHJvbmUvLmNvdXJzaWVyLWNhY2hlCiAgICAgIC0gL2Ryb25lLy5zYnQKICAgICAgLSAvZHJvbmUvLmdpdAoKICB0ZXN0czoKICAgIGltYWdlOiBzY2FsYWNlbnRlci9zY2FsYS1leHRyYXM6MS4wCiAgICBwdWxsOiB0cnVlCiAgICBjb21tYW5kczoKICAgICAgLSBnaXQgZmV0Y2ggLS10YWdzICYmIGdpdCBsb2cgfCBoZWFkIC1uIDIwCiAgICAgIC0gLi9iaW4vY2hlY2tDTEEuc2gKICAgICAgLSAuL2Jpbi9zY2FsYWZtdCAtLXRlc3QKICAgICAgLSBzYnQgJFRFU1QKCiAgcHVibGlzaDoKICAgIGltYWdlOiBzY2FsYWNlbnRlci9zY2FsYS1leHRyYXM6MS4wCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBTT05BVFlQRV9VU0VSTkFNRT0kJFNPTkFUWVBFX1VTRVJOQU1FCiAgICAgIC0gU09OQVRZUEVfUEFTU1dPUkQ9JCRTT05BVFlQRV9QQVNTV09SRAogICAgICAtIEdJVEhVQl9VU0VSTkFNRT0kJEdJVEhVQl9VU0VSTkFNRQogICAgICAtIEdJVEhVQl9QQVNTV09SRD0kJEdJVEhVQl9QQVNTV09SRAogICAgICAtIEJJTlRSQVlfVVNFUk5BTUU9JCRCSU5UUkFZX1VTRVJOQU1FCiAgICAgIC0gQklOVFJBWV9BUElfS0VZPSQkQklOVFJBWV9BUElfS0VZCiAgICAgIC0gTUFJTEdVTl9QQVNTV09SRD0kJE1BSUxHVU5fUEFTU1dPUkQKICAgIGNvbW1hbmRzOgogICAgICAtIC4vYmluL2JpbnRyYXkuc2gKICAgIHdoZW46CiAgICAgIGV2ZW50OiBwdXNoCiAgICAgIGJyYW5jaDogW21hc3RlciwgMi54XQoKICAjIFNhdmUgZm9sZGVycyBpbiBkaXN0cmlidXRlZCBjYWNoZQogIHNmdHBfY2FjaGVfcmVidWlsZDoKICAgIGltYWdlOiBwbHVnaW5zL3NmdHAtY2FjaGUKICAgIHJlYnVpbGQ6IHRydWUKICAgIG1vdW50OgogICAgICAtIC9kcm9uZS8uaXZ5MgogICAgICAtIC9kcm9uZS8uY291cnNpZXItY2FjaGUKICAgICAgLSAvZHJvbmUvLnNidAogICAgICAtIC9kcm9uZS8uZ2l0CgptYXRyaXg6CiAgVEVTVDoKICAgIC0gY2ktZmFzdAogICAgLSBjaS1zbG93Cgo.SxnZLEEvkPZdt-jX2AsgcJNmIsylxo72U66FA7IB6rs