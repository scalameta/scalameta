scalameta/semanticdb-integration/src/main/scala/example/Example.scala
---------------------------------------------------------------------
Language:
Scala212

Names:
[8..15): example <= _root_.example.
[24..29): scala => _root_.scala.
[30..40): concurrent => _root_.scala.concurrent.
[41..47): Future => _root_.scala.concurrent.Future.;_root_.scala.concurrent.Future#
[56..63): Example <= _root_.example.Example.
[72..77): scala => _root_.scala.
[78..88): collection => _root_.scala.collection.
[89..96): mutable => _root_.scala.collection.mutable.
[97..102): Stack => _root_.scala.collection.mutable.Stack#
[103..106): Int => _root_.scala.Int#
[107..107): ε => _root_.scala.collection.mutable.Stack#`<init>`()V.
[116..120): main <= _root_.example.Example.main([Ljava/lang/String;)V.
[121..125): args <= _root_.example.Example.main([Ljava/lang/String;)V.(args)
[127..132): Array => _root_.scala.Array#
[133..139): String => _root_.scala.Predef.String#
[143..147): Unit => _root_.scala.Unit#
[156..163): println => _root_.scala.Predef.println(Ljava/lang/Object;)V.
[177..178): x <= _root_.example.Example.x.
[181..186): scala => _root_.scala.
[187..194): reflect => _root_.scala.reflect.
[195..203): classTag => _root_.scala.reflect.package.classTag(Lscala/reflect/ClassTag;)Lscala/reflect/ClassTag;.
[204..207): Int => _root_.scala.Int#

Symbols:
_root_.example. => package example
_root_.example.Example. => final object Example
_root_.example.Example.main([Ljava/lang/String;)V. => def main: (args: Array[String]): Unit
  [7..12): Array => _root_.scala.Array#
  [13..19): String => _root_.scala.Predef.String#
  [23..27): Unit => _root_.scala.Unit#
_root_.example.Example.main([Ljava/lang/String;)V.(args) => param args: Array[String]
  [0..5): Array => _root_.scala.Array#
  [6..12): String => _root_.scala.Predef.String#
_root_.example.Example.x. => val x: ClassTag[Int]
  [0..8): ClassTag => _root_.scala.reflect.ClassTag#
  [9..12): Int => _root_.scala.Int#
_root_.scala. => package scala
_root_.scala.Array# => final class Array
_root_.scala.Array#`<init>`(I)V. => primaryctor <init>: (_length: Int): Array[T]
  [10..13): Int => _root_.scala.Int#
  [16..21): Array => _root_.scala.Array#
  [22..23): T => _root_.scala.Array#[T]
_root_.scala.Int# => abstract final class Int
_root_.scala.Int#`<init>`()V. => primaryctor <init>: (): Int
  [4..7): Int => _root_.scala.Int#
_root_.scala.Predef.String# => type String: String
  [0..6): String => _root_.java.lang.String#
_root_.scala.Predef.println(Ljava/lang/Object;)V. => def println: (x: Any): Unit
  [4..7): Any => _root_.scala.Any#
  [10..14): Unit => _root_.scala.Unit#
_root_.scala.Unit# => abstract final class Unit
_root_.scala.Unit#`<init>`()V. => primaryctor <init>: (): Unit
  [4..8): Unit => _root_.scala.Unit#
_root_.scala.collection. => package collection
_root_.scala.collection.mutable. => package mutable
_root_.scala.collection.mutable.Stack# => class Stack
_root_.scala.collection.mutable.Stack#`<init>`()V. => secondaryctor <init>: (): Stack[A]
  [4..9): Stack => _root_.scala.collection.mutable.Stack#
  [10..11): A => _root_.scala.collection.mutable.Stack#[A]
_root_.scala.collection.mutable.Stack#`<init>`(Lscala/collection/immutable/List;)V. => private primaryctor <init>: (elems: List[A]): Stack[A]
  [8..12): List => _root_.scala.collection.immutable.List#
  [13..14): A => _root_.scala.collection.mutable.Stack#[A]
  [18..23): Stack => _root_.scala.collection.mutable.Stack#
  [24..25): A => _root_.scala.collection.mutable.Stack#[A]
_root_.scala.concurrent. => package concurrent
_root_.scala.reflect. => package reflect
_root_.scala.reflect.package.classTag(Lscala/reflect/ClassTag;)Lscala/reflect/ClassTag;. => def classTag: [T] => (implicit ctag: ClassTag[T]): ClassTag[T]
  [23..31): ClassTag => _root_.scala.reflect.ClassTag#
  [32..33): T => _root_.scala.reflect.package.classTag(Lscala/reflect/ClassTag;)Lscala/reflect/ClassTag;.[T]
  [37..45): ClassTag => _root_.scala.reflect.ClassTag#
  [46..47): T => _root_.scala.reflect.package.classTag(Lscala/reflect/ClassTag;)Lscala/reflect/ClassTag;.[T]

Synthetics:
[208..208): *(((ClassTag.Int): ClassTag[Int]))
  [0..1): * => _star_.
  [28..31): Int => _root_.scala.Int#
  [19..27): ClassTag => _root_.scala.reflect.ClassTag#
  [13..16): Int => _root_.scala.reflect.ClassTag.Int.


scalameta/semanticdb-integration/src/main/scala/example/Example.scala
---------------------------------------------------------------------
Language:
Scala212

Messages:
[41..47): [warning] Unused import
[72..107): [warning] class Stack in package mutable is deprecated (since 2.12.0): Stack is an inelegant and potentially poorly-performing wrapper around List. Use a List assigned to a var instead.


scalameta/semanticdb-integration/src/main/scala/example/Synthetic.scala
-----------------------------------------------------------------------
Language:
Scala212

Names:
[8..15): example <= _root_.example.
[23..32): Synthetic <= _root_.example.Synthetic#
[33..33): ε <= _root_.example.Synthetic#`<init>`()V.
[37..41): List => _root_.scala.collection.immutable.List.
[45..48): map => _root_.scala.collection.immutable.List#map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;.
[51..52): + => _root_.scala.Int#`+`(I)I.
[58..63): Array => _root_.scala.Array.
[64..69): empty => _root_.scala.Array.empty(Lscala/reflect/ClassTag;)Ljava/lang/Object;.
[70..73): Int => _root_.scala.Int#
[75..85): headOption => _root_.scala.collection.TraversableLike#headOption()Lscala/Option;.
[95..106): stripPrefix => _root_.scala.collection.immutable.StringLike#stripPrefix(Ljava/lang/String;)Ljava/lang/String;.

Symbols:
_root_.example. => package example
_root_.example.Synthetic# => class Synthetic
_root_.example.Synthetic#`<init>`()V. => primaryctor <init>: (): Synthetic
  [4..13): Synthetic => _root_.example.Synthetic#
_root_.scala.Array. => final object Array
_root_.scala.Array.empty(Lscala/reflect/ClassTag;)Ljava/lang/Object;. => def empty: [T] => (implicit evidence$1: ClassTag[T]): Array[T]
  [29..37): ClassTag => _root_.scala.reflect.ClassTag#
  [38..39): T => _root_.scala.Array.empty(Lscala/reflect/ClassTag;)Ljava/lang/Object;.[T]
  [43..48): Array => _root_.scala.Array#
  [49..50): T => _root_.scala.Array.empty(Lscala/reflect/ClassTag;)Ljava/lang/Object;.[T]
_root_.scala.Int# => abstract final class Int
_root_.scala.Int#`+`(I)I. => abstract def +: (x: Int): Int
  [4..7): Int => _root_.scala.Int#
  [10..13): Int => _root_.scala.Int#
_root_.scala.Int#`<init>`()V. => primaryctor <init>: (): Int
  [4..7): Int => _root_.scala.Int#
_root_.scala.collection.TraversableLike#headOption()Lscala/Option;. => def headOption: Option[A]
  [0..6): Option => _root_.scala.Option#
  [7..8): A => _root_.scala.collection.TraversableLike#[A]
_root_.scala.collection.immutable.List#map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;. => final def map: [B, That] => (f: Function1[A, B])(implicit bf: CanBuildFrom[List[A], B, That]): That
  [17..26): Function1 => _root_.scala.Function1#
  [27..28): A => _root_.scala.collection.immutable.List#[A]
  [30..31): B => _root_.scala.collection.immutable.List#map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;.[B]
  [47..59): CanBuildFrom => _root_.scala.collection.generic.CanBuildFrom#
  [60..64): List => _root_.scala.collection.immutable.List#
  [65..66): A => _root_.scala.collection.immutable.List#[A]
  [69..70): B => _root_.scala.collection.immutable.List#map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;.[B]
  [72..76): That => _root_.scala.collection.immutable.List#map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;.[That]
  [80..84): That => _root_.scala.collection.immutable.List#map(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;.[That]
_root_.scala.collection.immutable.List. => final object List
_root_.scala.collection.immutable.StringLike#stripPrefix(Ljava/lang/String;)Ljava/lang/String;. => def stripPrefix: (prefix: String): String
  [9..15): String => _root_.scala.Predef.String#
  [18..24): String => _root_.java.lang.String#

Synthetics:
[41..41): *.apply[Int]
  [0..1): * => _star_.
  [2..7): apply => _root_.scala.collection.immutable.List.apply(Lscala/collection/Seq;)Lscala/collection/immutable/List;.
  [8..11): Int => _root_.scala.Int#
[48..48): *[Int, List[Int]]
  [0..1): * => _star_.
  [2..5): Int => _root_.scala.Int#
  [12..15): Int => _root_.scala.Int#
  [7..11): List => _root_.scala.collection.immutable.List#
[55..55): *(scala.collection.immutable.List.canBuildFrom[Int])
  [0..1): * => _star_.
  [47..50): Int => _root_.scala.Int#
  [34..46): canBuildFrom => _root_.scala.collection.immutable.List.canBuildFrom()Lscala/collection/generic/CanBuildFrom;.
[58..74): scala.Predef.intArrayOps(*)
  [13..24): intArrayOps => _root_.scala.Predef.intArrayOps([I)[I.
  [25..26): * => _star_.
[74..74): *(((ClassTag.Int): ClassTag[Int]))
  [0..1): * => _star_.
  [28..31): Int => _root_.scala.Int#
  [19..27): ClassTag => _root_.scala.reflect.ClassTag#
  [13..16): Int => _root_.scala.reflect.ClassTag.Int.
[88..94): scala.Predef.augmentString(*)
  [13..26): augmentString => _root_.scala.Predef.augmentString(Ljava/lang/String;)Ljava/lang/String;.
  [27..28): * => _star_.
